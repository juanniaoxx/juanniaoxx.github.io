{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\\u3001\\u3002\\uFF0C\\uFF0E\\uFF1F\\uFF01\\uFF1B]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p> \u200b\u5bfc\u822a\u200b\u680f\u200b</p> <p></p> <ul> <li> \u200b\u57fa\u4e8e\u200bMaterial for MkDocs\u200b\u7f8e\u5316\u200b</li> <li> \u200b\u5982\u9047\u200b\u9875\u9762\u200b\u5361\u987f\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b\u79d1\u5b66\u200b\u4e0a\u7f51\u200b</li> <li> <p> \ud835\udd59\ud835\udd52\ud835\udd67\ud835\udd56 \ud835\udd52 \ud835\udd58\ud835\udd60\ud835\udd60\ud835\udd55 \ud835\udd65\ud835\udd5a\ud835\udd5e\ud835\udd56 !   === \"Mac/PC\u200b\u7aef\u200b\"</p> <p>\u200b\u8bf7\u200b\u5728\u200b\u4e0a\u65b9\u200b\u6807\u7b7e\u200b\u9009\u62e9\u200b\u5206\u7c7b\u200b/\u200b\u5de6\u4fa7\u200b\u76ee\u5f55\u200b\u9009\u62e9\u200b\u6587\u7ae0\u200b</p> </li> </ul> \u200b\u79fb\u52a8\u200b\u7aef\u200b <p>\u200b\u8bf7\u200b\u70b9\u51fb\u200b\u5de6\u4e0a\u89d2\u200b\u56fe\u6807\u200b\u9009\u62e9\u200b\u5206\u7c7b\u200b\u548c\u200b\u6587\u7ae0\u200b</p> </li> </ul> <ol> <li> <p>\u200b\u4eba\u200b\u751f\u957f\u200b\u6068\u200b\u6c34\u957f\u4e1c\u200b\u00a0\u21a9</p> </li> <li> <p>All-problems-in-computer-science-can-be-solved-by-another-level-of-indirection\u00a0\u21a9</p> </li> </ol>"},{"location":"tag/","title":"\u5206\u7c7b","text":""},{"location":"tag/#tags","title":"Tags","text":"<ul> <li> <p> tips</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u7f51\u7ad9\u200b\u6587\u7ae0\u200b\u7684\u200b\u5206\u7c7b\u200b\uff0c\u200b\u70b9\u51fb\u200b\u53ef\u200b\u8df3\u8f6c\u200b\u5230\u200b\u5bf9\u5e94\u200b\u5206\u7c7b\u200b\u4e0b\u200b\u7684\u200b\u6587\u7ae0\u200b</p> </li> </ul>"},{"location":"tag/#tag:algorithm","title":"Algorithm","text":"<ul> <li>            N\u200b\u7687\u540e\u200b\u95ee\u9898\u200b--\u200b\u91cd\u70b9\u200b\u5728\u4e8e\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u95ee\u9898\u200b          </li> <li>            Prefix_Sum          </li> <li>            \u200b\u4e8c\u53c9\u6811\u200b\uff08\u200b\u4e0d\u542b\u200b\u6811\u578b\u200bbp\uff09\u200b\u7684\u200b\u7ecf\u5178\u200b\u4e60\u9898\u200b          </li> <li>            \u200b\u524d\u7f00\u200b\u6811\u200b\uff08\u200b\u5b57\u5178\u200b\u6811\u200b\uff09          </li> <li>            \u200b\u5929\u5b57\u7b2c\u4e00\u53f7\u200b\u6280\u5de7\u200b-\u200b\u901a\u8fc7\u200b\u6570\u636e\u91cf\u200b\u63a8\u6d4b\u200b\u89e3\u6cd5\u200b          </li> <li>            \u200b\u5bf9\u6570\u200b\u5668\u200b\u6253\u8868\u200b\u627e\u200b\u89c4\u5f8b\u200b\u6280\u5de7\u200b          </li> <li>            \u200b\u5d4c\u5957\u200b\u7c7b\u200b\u95ee\u9898\u200b\u7684\u200b\u9012\u5f52\u200b\u89e3\u9898\u200b\u5957\u8def\u200b          </li> <li>            \u200b\u5dee\u5206\u200b          </li> <li>            \u200b\u5e38\u89c1\u200b\u9012\u5f52\u200b\u95ee\u9898\u200b          </li> <li>            \u200b\u6570\u636e\u7ed3\u6784\u200b\u8bbe\u8ba1\u200b\u4e60\u9898\u200b          </li> <li>            \u200b\u6700\u5927\u516c\u7ea6\u6570\u200b\u95ee\u9898\u200b\u548c\u200b\u540c\u4f59\u200b\u539f\u7406\u200b          </li> <li>            \u200b\u94fe\u8868\u200b\u9ad8\u9891\u200b\u9898\u76ee\u200b          </li> </ul>"},{"location":"tag/#tag:c","title":"C++","text":"<ul> <li>            C++ Primer Chapter 3 Strings Vectors and Arrays          </li> <li>            C++ Primer Chapter 4 Expression          </li> </ul>"},{"location":"tag/#tag:\u673a\u5668\u5b66\u4e60","title":"\u673a\u5668\u200b\u5b66\u4e60","text":"<ul> <li>            Linear Model          </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"note/Algorithm/Binary%20Tree/","title":"\u4e8c\u53c9\u6811\u200b\uff08\u200b\u4e0d\u542b\u200b\u6811\u578b\u200bbp\uff09\u200b\u7684\u200b\u7ecf\u5178\u200b\u4e60\u9898","text":"\u91cd\u70b9\u200b \u200b\u9898\u76ee\u200b1-9\u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b \u200b\u9898\u76ee\u200b10-16\u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b <ul> <li> \u200b\u9898\u76ee\u200b1\uff1a bfs\u200b\u7684\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b</li> <li> \u200b\u9898\u76ee\u200b2\uff1a \u200b\u952f\u9f7f\u72b6\u200b\u904d\u5386\u200b</li> <li> \u200b\u9898\u76ee\u200b3\uff1a \u200b\u6700\u5927\u200b\u7279\u6b8a\u200b\u5bbd\u5ea6\u200b</li> <li> \u200b\u9898\u76ee\u200b4.1\uff1a \u200b\u6700\u5927\u200b\u6df1\u5ea6\u200b</li> <li> \u200b\u9898\u76ee\u200b4.2\uff1a\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b</li> <li> \u200b\u9898\u76ee\u200b5\uff1a \u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b</li> <li> \u200b\u9898\u76ee\u200b6\uff1a \u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b</li> <li> \u200b\u9898\u76ee\u200b7\uff1a \u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\u548c\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u8fd8\u539f\u200b\u4e8c\u53c9\u6811\u200b</li> <li> \u200b\u9898\u76ee\u200b8\uff1a \u200b\u5224\u65ad\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b</li> <li> \u200b\u9898\u76ee\u200b9\uff1a \u200b\u6c42\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u8282\u70b9\u200b\u4e2a\u6570\u200b</li> <li> \u200b\u9898\u76ee\u200b10: \u200b\u666e\u901a\u200b\u4e8c\u53c9\u6811\u200b\u4e0a\u200b\u6c42\u89e3\u200bLCA</li> <li> \u200b\u9898\u76ee\u200b11\uff1a\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b\u4e0a\u200b\u6c42\u89e3\u200bLCA</li> <li> \u200b\u9898\u76ee\u200b12\uff1a\u200b\u6536\u96c6\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b<code>k</code>\u200b\u7684\u200b\u6240\u6709\u200b\u8def\u5f84\u200b</li> <li> \u200b\u9898\u76ee\u200b13\uff1a\u200b\u5224\u65ad\u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811\u200b</li> <li> \u200b\u9898\u76ee\u200b14\uff1a\u200b\u5224\u65ad\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b</li> <li> \u200b\u9898\u76ee\u200b15\uff1a\u200b\u4fee\u526a\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b</li> <li> \u200b\u9898\u76ee\u200b16\uff1a\u200b\u4e8c\u53c9\u6811\u200b\u4e0a\u200b\u7684\u200b\u6253\u5bb6\u52ab\u820d\u200b\u95ee\u9898\u200b</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_1","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5","text":"\u57fa\u672c\u6982\u5ff5\u200b <p> <p>\u200b\u6df1\u5ea6\u200b\u4e0e\u200b\u9ad8\u5ea6\u200b</p>       \u200b\u8282\u70b9\u200b\u7684\u200b\u9ad8\u5ea6\u200b(height):\u200b\u4ece\u6839\u200b\u8282\u70b9\u200b\u5230\u200b\u8be5\u200b\u8282\u70b9\u200b\u7ecf\u8fc7\u200b\u7684\u200b\u8fb9\u6570\u200b\u3002       \u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u6df1\u5ea6\u200b(depth):\u200b\u4ece\u200b\u8ddd\u79bb\u200b\u8be5\u200b\u8282\u70b9\u200b\u6700\u8fdc\u200b\u7684\u200b\u53f6\u200b\u8282\u70b9\u200b\u5230\u200b\u8be5\u200b\u8282\u70b9\u200b\u6240\u200b\u9700\u8981\u200b\u7ecf\u8fc7\u200b\u7684\u200b\u8fb9\u6811\u200b\u3002       \u200b\u6ce8\u610f\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200b\u9898\u200b\u3001\u200b\u6559\u6750\u200b\u5bf9\u4e8e\u200b\u6839\u53f6\u200b\u8282\u70b9\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u3001\u200b\u6df1\u5ea6\u200b\u4ece\u200b0\u200b\u8fd8\u662f\u200b\u4ece\u200b1\u200b\u5f00\u59cb\u200b\u5e76\u200b\u4e0d\u200b\u7edf\u4e00\u200b\u3002       \u200b\u4f46\u200b\u4e00\u822c\u800c\u8a00\u200b\uff0c\u200b\u8bf4\u6839\u200b\u8282\u70b9\u200b\u7684\u200b\u6df1\u5ea6\u200b\u4e3a\u200b0\uff0c\u200b\u53f6\u5b50\u200b\u8282\u70b9\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u4e3a\u200b0\u3002       </p>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_2","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5c42\u5e8f\u200b\u904d\u5386","text":"<p>\u200b\u9898\u76ee\u200b1\uff1a bfs\u200b\u7684\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b</p> <p>\u200b\u4e3b\u8981\u200b\u4ecb\u7ecd\u200b\u4f7f\u7528\u200b<code>\u200b\u961f\u5217\u200b</code>\u200b\u4e00\u6b21\u200b\u904d\u5386\u200b\u4e00\u5c42\u200b\u7684\u200b\u89e3\u6cd5\u200b</p> \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u89e3\u91ca\u200b \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b\u5f00\u59cb\u200b\u904d\u5386\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u548c\u200b\u8282\u70b9\u200b\u4e2a\u6570\u200b\u4e00\u6837\u200b\u591a\u200b\u7684\u200b\u961f\u5217\u200b \u200b\u9996\u5148\u200b\u5c06\u200b\u6839\u200b\u8282\u70b9\u200b\u52a0\u5165\u200b\u961f\u5217\u200b\uff0c\u200b\u540c\u65f6\u200b\u8bb0\u5f55\u200b\u961f\u5217\u200b\u7684\u200b\u957f\u5ea6\u200b\u6267\u884c\u200b<code>n</code>\u200b\u6b21\u200b\u5982\u4e0b\u200b\u64cd\u4f5c\u200b\uff0cn\u200b\u4e3a\u200b\u4e0a\u200b\u4e00\u6b65\u200b\u8bb0\u5f55\u200b\u7684\u200b\u957f\u5ea6\u200b1. \u200b\u5f39\u51fa\u200b\u961f\u5c3e\u200b\u5143\u7d20\u200b\uff0c\u200b\u52a0\u5165\u200b\u8fd9\u200b\u4e00\u5c42\u200b\u7684\u200b\u7b54\u6848\u200b\u6570\u7ec4\u200b\u4e2d\u200b2. \u200b\u6709\u200b\u5de6\u200b\u5b69\u5b50\u200b\u5219\u200b\u628a\u200b\u5de6\u200b\u5b69\u5b50\u200b\u52a0\u5165\u200b\u961f\u5217\u200b3.\u200b\u6709\u53f3\u200b\u5b69\u5b50\u200b\u5219\u200b\u628a\u200b\u53f3\u200b\u5b69\u5b50\u200b\u52a0\u5165\u200b\u961f\u5217\u200b \u200b\u63d0\u793a\u200b <p>\u200b\u5bf9\u4e8e\u200b\u7b97\u6cd5\u200b\u7ade\u8d5b\u200b\u6216\u8005\u200b\u9762\u8bd5\u200b\u4e00\u822c\u200b\u4e0d\u662f\u200b\u7528\u5e93\u200b\u81ea\u5e26\u200b\u7684\u200b\u961f\u5217\u200b\uff0c\u200b\u800c\u662f\u200b\u7528\u200b\u6570\u7ec4\u200b\u6a21\u62df\u200b\u961f\u5217\u200b\uff0c\u200b\u5177\u4f53\u200b\u770b\u200b[\u200b\u5165\u95e8\u200b]\u200b\u9636\u6bb5\u200b\u7684\u200b\u8bfe\u7a0b\u200b\u3002</p>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_3","title":"\u952f\u9f7f\u5f62\u200b\u5c42\u5e8f\u200b\u904d\u5386","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode 103.\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u952f\u9f7f\u5f62\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b \u200b\u63d0\u793a\u200b <p>\u200b\u8fd9\u9053\u9898\u200b\u548c\u200b\u4e0a\u200b\u4e00\u9053\u200b\u9898\u200b\u601d\u8def\u200b\u4e0a\u200b\u4e00\u81f4\u200b\uff0c\u200b\u53ea\u662f\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u6bcf\u8f6e\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u7684\u200b\u52a0\u5165\u200b\u987a\u5e8f\u200b\u8981\u200b\u4ea4\u66ff\u200b</p> <p>\u200b\u65b9\u6cd5\u200b\u4e00\u200b\uff1a\u200b\u5b8c\u5168\u200b\u6309\u7167\u200b\u4e0a\u9898\u200b\u7684\u200b\u505a\u6cd5\u200b\uff0c\u200b\u53ea\u662f\u200b\u5728\u200b\u8bfb\u5165\u200b\u7b54\u6848\u200b\u7684\u200b\u65f6\u5019\u200b\u5224\u65ad\u200b\u4e00\u4e0b\u200b\u662f\u200b\u4ece\u5de6\u5f80\u53f3\u200b\u7684\u200b\u8bfb\u200b\u8fd8\u662f\u200b\u4ece\u53f3\u5f80\u200b\u5de6\u8bfb\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u4ece\u200b\u53f3\u5f80\u200b\u5de6\u8bfb\u200b\uff0c\u200b\u5c31\u200b\u53cd\u8f6c\u200b\u4e00\u4e0b\u200b<code>list</code>\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5176\u4ed6\u200b\u4ec0\u4e48\u200b\u90fd\u200b\u4e0d\u200b\u9700\u8981\u200b\u6539\u200b</p> C++<pre><code>// false \u200b\u8868\u793a\u200b \u200b\u4ece\u200b\u5de6\u200b \u200b\u5f80\u53f3\u200b\u8bfb\u5165\u200b\n// true \u200b\u8868\u793a\u200b \u200b\u4ece\u53f3\u200b\u5f80\u200b\u5de6\u200b\u8bfb\u5165\u200b\nbool flag = false; \n......;\nif (flag) reserve(list.begin(), list.end());\nflag = !flag;\nans.push_back(list);\n</code></pre> <p>\u200b\u65b9\u6cd5\u200b\u4e8c\u200b\uff1a\u200b\u5148\u200b\u6536\u96c6\u200blist\u200b\u518d\u200b\u628a\u200b\u5de6\u53f3\u200b\u8282\u70b9\u200b\u52a0\u5165\u200b\u961f\u5217\u200b</p> C++<pre><code>// reverse == false, \u200b\u5de6\u200b -&gt; \u200b\u53f3\u200b\uff0c l....r-1, \u200b\u6536\u96c6\u200bsize\u200b\u4e2a\u200b\n// reverse == true,  \u200b\u53f3\u200b -&gt; \u200b\u5de6\u200b\uff0c r-1....l, \u200b\u6536\u96c6\u200bsize\u200b\u4e2a\u200b\n// \u200b\u5de6\u200b -&gt; \u200b\u53f3\u200b, i = i + 1\n// \u200b\u53f3\u200b -&gt; \u200b\u5de6\u200b, i = i - 1\nfor (int i = reverse ? r - 1 : l, j = reverse ? -1 : 1, k = 0; k &lt; size; i += j, k++) {\n    list.push_back(q[i]-&gt;val);\n}\n// \u200b\u52a0\u5165\u200b\u5de6\u53f3\u200b\u8282\u70b9\u200b\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_4","title":"\u6700\u5927\u200b\u7279\u6b8a\u200b\u5bbd\u5ea6","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_5","title":"\u524d\u5e8f\u200b\u904d\u5386\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode297.\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b <p>           \u200b\u5e8f\u5217\u5316\u200b\u662f\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u6570\u636e\u7ed3\u6784\u200b\u6216\u8005\u200b\u5bf9\u8c61\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u8fde\u7eed\u200b\u7684\u200b\u6bd4\u7279\u200b\u4f4d\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8fdb\u800c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u8f6c\u6362\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u6216\u8005\u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u200b\u4f20\u8f93\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u673a\u200b\u73af\u5883\u200b\uff0c\u200b\u91c7\u53d6\u200b\u76f8\u53cd\u200b\u65b9\u5f0f\u200b\u91cd\u6784\u200b\u5f97\u5230\u200b\u539f\u200b\u6570\u636e\u200b\u3002                    \u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u524d\u5e8f\u200b\u548c\u200b\u540e\u5e8f\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5b8c\u6210\u200b\u5e8f\u5217\u5316\u200b\u4f46\u200b\u4e2d\u5e8f\u200b\u5e76\u200b\u4e0d\u80fd\u200b\u552f\u4e00\u200b\u786e\u5b9a\u200b\uff01       </p> <p>\u200b\u64cd\u4f5c\u200b\u5012\u200b\u662f\u200b\u7b80\u5355\u200b\u8fd9\u9053\u9898\u200b\u611f\u89c9\u200b\u4e0d\u662f\u200b\u7b97\u6cd5\u200b\u9898\u200b\u662f\u200b<code>coding</code>\u200b\u80fd\u529b\u200b\u6d4b\u8bd5\u9898\u200b</p> <ul> <li>\u200b\u5bf9\u200b\u8be5\u200b\u4e8c\u53c9\u6811\u200b\u8fdb\u884c\u200b\u4e00\u6b21\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b</li> <li>\u200b\u5bf9\u4e8e\u200b\u975e\u7a7a\u200b\u8282\u70b9\u200b<code>x</code>\u200b\u8bb0\u5f55\u200b\u5176\u4e3a\u200b\u5b57\u7b26\u4e32\u200b<code>x,</code> </li> <li>\u200b\u5bf9\u4e8e\u200b\u7a7a\u200b\u8282\u70b9\u200b\u8bb0\u5f55\u200b\u4e3a\u200b<code>#,</code> </li> <li>\u200b\u6ce8\u610f\u200b\u67d0\u4e00\u200b\u8282\u70b9\u200b\u82e5\u200b\u5176\u200b\u5de6\u53f3\u200b\u5b50\u6811\u4e3a\u200b\u7a7a\u200b\u4e5f\u200b\u9700\u8981\u200b\u8bb0\u5f55\u200b\u4e3a\u200b<code>#,</code> </li> </ul> \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u89e3\u91ca\u200b \u200b\u8bb0\u5f55\u200b<code>1</code>\u200b\u4e3a\u200b <code>1,</code>\u200b\u8bb0\u5f55\u200b<code>2</code>\u200b\u4e3a\u200b<code>2,</code>\u200b\u540c\u65f6\u200b\u8bb0\u5f55\u200b\u5176\u5b50\u200b\u7ed3\u70b9\u200b\u4e3a\u200b<code>#, #,</code> \u200b\u5176\u4f59\u200b\u8282\u70b9\u200b\u540c\u7406\u200b\u5904\u7406\u200b\u5373\u53ef\u200b\u6700\u7ec8\u200b\u5b57\u7b26\u4e32\u200b\u4e3a\u200b<code>1,2,#,#,3,4,#,#,5,#,#</code>\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5c31\u200b\u6bd4\u8f83\u7b80\u5355\u200b\u4e86\u200b\u904d\u5386\u200b\u4e0a\u8ff0\u200b\u5b57\u7b26\u4e32\u200b\u5373\u53ef\u200b \u200b\u6280\u5de7\u200b \u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b istringstream\u200b\u7c7b\u578b\u200b\u628a\u200b\u5b57\u7b26\u4e32\u200b\u8f6c\u5316\u200b\u4e3a\u6d41\u200b\u8f93\u51fa\u200b\uff0c\u200b\u8fdb\u800c\u200b\u53ef\u4ee5\u200b\u7528\u200b&gt;&gt;\u200b\u76f4\u63a5\u200b\u8fc7\u6ee4\u200b\u7a7a\u683c\u200b C++<pre><code>// \u200b\u611f\u89c9\u200b\u8fd9\u9053\u9898\u200b\u8003\u200b\u8bed\u6cd5\u200b\uff1f\nclass Codec {\npublic:\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        if (!root) return \"# \";\n        return to_string(root-&gt;val) + \" \" + serialize(root-&gt;left) + serialize(root-&gt;right);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        istringstream iss(data); // \u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\u6d41\u200b\u7b80\u5316\u200b\u89e3\u6790\u200b\n        return buildTree(iss);\n    }\n\nprivate:\n    TreeNode* buildTree(istringstream &amp;iss) {\n        string val;\n        iss &gt;&gt; val; // \u200b\u81ea\u52a8\u200b\u8df3\u8fc7\u200b\u7a7a\u683c\u200b\n        if (val == \"#\") return nullptr;\n        TreeNode* node = new TreeNode(stoi(val)); // \u200b\u5904\u7406\u200b\u591a\u4f4d\u6570\u200b\n        node-&gt;left = buildTree(iss);\n        node-&gt;right = buildTree(iss);\n        return node;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_6","title":"\u5c42\u5e8f\u200b\u904d\u5386\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode297.\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_7","title":"\u901a\u8fc7\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\u548c\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u590d\u539f\u200b\u4e8c\u53c9\u6811","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode105.\u200b\u4ece\u524d\u200b\u5e8f\u200b\u904d\u5386\u200b\u4e0e\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b <p>\u200b\u8fd9\u4e2a\u200b\u9898\u200b\u7684\u200b\u77e5\u8bc6\u70b9\u200b\u5012\u200b\u662f\u200b\u8003\u7814\u200b\u7ecf\u5e38\u200b\u4f1a\u8003\u200b\u7684\u200b </p> <p>\u200b\u5173\u952e\u200b\u601d\u8def\u200b</p> <ul> <li>\u200b\u901a\u8fc7\u200b<code>\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b</code>\u200b\u786e\u5b9a\u200b\u6839\u200b\u8282\u70b9\u200b</li> <li>\u200b\u901a\u8fc7\u200b<code>\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b</code>\u200b\u786e\u5b9a\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b</li> <li>\u200b\u9012\u5f52\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u5c31\u200b\u80fd\u200b\u8fd8\u539f\u200b\u51fa\u539f\u200b\u4e8c\u53c9\u6811\u200b</li> </ul> <p>\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u5173\u952e\u200b\u662f\u200b\u7406\u89e3\u200b\u8fd9\u4e2a\u200b\u8fb9\u754c\u200b\u56fe\u200b</p> <p></p> \u200b\u989d\u5916\u200b <p>           \u200b\u8fd8\u6709\u200b\u4e24\u4e2a\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u9898\u76ee\u200b\uff0c\u200b\u4f46\u200b\u8981\u200b\u6ce8\u610f\u200b\u5982\u679c\u200b\u5355\u7eaf\u200b\u901a\u8fc7\u200b\u524d\u5e8f\u200b\u548c\u200b\u540e\u5e8f\u200b\u662f\u200b\u65e0\u6cd5\u200b\u552f\u4e00\u200b\u8fd8\u539f\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\uff01       </p> leetcode106.\u200b\u4ece\u4e2d\u200b\u5e8f\u200b\u904d\u5386\u200b\u548c\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b leetcode889.\u200b\u6839\u636e\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b\u548c\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\u590d\u539f\u200b\u4e8c\u53c9\u6811\u200b \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u89e3\u91ca\u200b \u200b\u5148\u5e8f\u200b:<code>3 9 20 15 7</code>\u200b\u4e2d\u5e8f\u200b:<code>9 3 15 20 7</code> \u200b\u9996\u5148\u200b\u901a\u8fc7\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\u627e\u5230\u200b\u6574\u9897\u200b\u6811\u200b\u7684\u200b\u6839\u200b<code>3</code>\u200b\u540c\u65f6\u200b\u5728\u200b\u4e2d\u5e8f\u200b\u4e2d\u200b\u627e\u5230\u200b\u5bf9\u5e94\u200b\u7684\u200b\u8282\u70b9\u200b\u5176\u200b\u5de6\u8fb9\u200b\u5c31\u662f\u200b\u5de6\u5b50\u200b\u6811\u200b<code>9</code>\u200b\u53f3\u8fb9\u200b\u5c31\u662f\u200b\u53f3\u5b50\u200b\u6811\u200b <code>15 20 7</code> \u200b\u7136\u540e\u200b\u9012\u5f52\u200b\u5904\u7406\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b \u200b\u6280\u5de7\u200b \u200b\u8fd9\u91cc\u200b\u627e\u200b\u5bf9\u5e94\u200b\u8282\u70b9\u200b\u7684\u200b\u65f6\u5019\u200b\u53ef\u4ee5\u200b\u7528\u200b\u54c8\u5e0c\u200b\u8868","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_8","title":"\u5224\u65ad\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode958.\u200b\u4e8c\u53c9\u6811\u200b\u5b8c\u5168\u6027\u200b\u7684\u200b\u9a8c\u8bc1\u200b <p>\u200b\u7b97\u6cd5\u200b\u6b65\u9aa4\u200b</p> <ul> <li> <p>\u200b\u4f7f\u7528\u200b<code>\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b</code></p> </li> <li> <p>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u9f50\u5168\u200b\uff0c\u200b\u5219\u200b\u65e0\u9700\u200b\u5904\u7406\u200b\u904d\u5386\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5373\u53ef\u200b</p> </li> <li>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u6709\u53f3\u5b50\u200b\u6811\u200b\uff0c\u200b\u800c\u200b\u5de6\u5b50\u200b\u6811\u200b\u7f3a\u5931\u200b\u5219\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b<code>false</code></li> <li>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u7f3a\u5c11\u200b\u53f3\u200b\u5b69\u5b50\u200b\uff0c\u200b\u5219\u200b\u8bb0\u5f55\u200b\u4e4b\u200b\uff0c\u200b\u904d\u5386\u200b\u4e4b\u540e\u200b\u7684\u200b\u8282\u70b9\u200b</li> <li>\u200b\u5982\u679c\u200b\u4e4b\u540e\u200b\u904d\u5386\u200b\u7684\u200b\u8282\u70b9\u200b\u4e0d\u5168\u200b\u4e3a\u200b\u53f6\u5b50\u200b\u8282\u70b9\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b<code>false</code></li> <li>\u200b\u5426\u5219\u200b \u200b\u8fd4\u56de\u200b<code>true</code></li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_9","title":"\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u8282\u70b9\u200b\u4e2a\u6570","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode222.\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u8282\u70b9\u200b\u4e2a\u6570\u200b <p>\u200b\u5982\u679c\u200b\u4e0d\u200b\u8003\u8651\u200b\u4efb\u4f55\u200b\u7279\u6027\u200b\uff0c\u200b\u904d\u5386\u200b\u4e00\u8fb9\u200b\u4e8c\u53c9\u6811\u200b\u7ecf\u8fc7\u200bO(N) \u200b\u7684\u200b\u65f6\u95f4\u200b\u5c31\u200b\u80fd\u200b\u83b7\u5f97\u200b\u7b54\u6848\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u96be\u5ea6\u200b\u4e3a\u200b<code>Easy</code>\u3002\u200b\u4f46\u200b\u4eba\u200b\u80af\u5b9a\u200b\u8fd8\u662f\u200b\u5f97\u200b\u6709\u70b9\u200b\u8ffd\u6c42\u200b\u7684\u200b\u5566\u200b\uff0c\u200b\u5982\u4f55\u200b\u5728\u200b<code>&lt; O(N)</code>\u200b\u7684\u200b\u65f6\u95f4\u200b\u5185\u200b\u83b7\u5f97\u200b\u8282\u70b9\u200b\u6570\u76ee\u200b\u5462\u200b\uff1f</p> <p>\u200b\u8003\u8651\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u7279\u6027\u200b</p> <ul> <li>\u200b\u4e00\u4e2a\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u5fc5\u7136\u200b\u662f\u200b\u7531\u200b\u4e00\u4e2a\u200b<code>\u200b\u6ee1\u4e8c\u200b\u53c9\u5b50\u200b\u6811\u200b</code>\u200b\u548c\u200b\u4e00\u4e2a\u200b<code>\u200b\u5b8c\u5168\u200b\u4e8c\u200b\u53c9\u5b50\u200b\u6811\u200b</code>\u200b\u6216\u200b<code>\u200b\u6ee1\u4e8c\u200b\u53c9\u5b50\u200b\u6811\u200b</code>\u200b\u6784\u6210\u200b</li> </ul> <p>\u200b\u5177\u4f53\u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b\u5982\u4e0b\u200b</p> \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u5bf9\u4e8e\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\uff0c\u200b\u68c0\u67e5\u200b\u5176\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u6700\u200b\u5de6\u200b\u8282\u70b9\u200b\u662f\u5426\u200b\u80fd\u200b\u5230\u8fbe\u200b\u6574\u68f5\u6811\u200b\u7684\u200b\u6700\u5e95\u5c42\u200b \u200b\u5982\u679c\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5de6\u5b50\u200b\u6811\u200b\u662f\u200b\u6ee1\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8ba1\u7b97\u200b\u5de6\u5b50\u200b\u6811\u200b\u8282\u70b9\u200b\u6570\u200b(<code>2^(h-level)</code>)\uff0c\u200b\u7136\u540e\u200b\u9012\u5f52\u200b\u5904\u7406\u200b\u53f3\u5b50\u200b\u6811\u200b \u200b\u5982\u679c\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u8bf4\u660e\u200b\u53f3\u5b50\u200b\u6811\u200b\u662f\u200b\u6ee1\u200b\u4e8c\u53c9\u6811\u200b(\u200b\u4f46\u5c11\u200b\u4e00\u5c42\u200b)\uff0c\u200b\u76f4\u63a5\u200b\u8ba1\u7b97\u200b\u53f3\u5b50\u200b\u6811\u200b\u8282\u70b9\u200b\u6570\u200b(<code>2^(h-level-1)</code>)\uff0c\u200b\u7136\u540e\u200b\u9012\u5f52\u200b\u5904\u7406\u200b\u5de6\u5b50\u200b\u6811\u200b <p>\u200b\u7531\u4e8e\u200b\u662f\u200b\u9012\u5f52\u200b\u7b97\u6cd5\u200b\u8fd8\u662f\u200b\u6bd4\u8f83\u200b\u62bd\u8c61\u200b\u7684\u200b\uff01</p>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#lca","title":"\u666e\u901a\u200b\u4e8c\u53c9\u6811\u200b\u6c42\u200bLCA\u200b\u95ee\u9898","text":"\u5f15\u8a00\u200b <p>           LCA\u200b\u95ee\u9898\u200b(Lowest Common Ancestor\uff0c \u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148\u200b)            </p> <p>           \u200b\u5176\u4e2d\u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148\u200b\u7684\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\uff1a\u201c\u200b\u5bf9\u4e8e\u200b\u6709\u200b\u6839\u6811\u200b T \u200b\u7684\u200b\u4e24\u4e2a\u200b\u8282\u70b9\u200b p\u3001q\uff0c\u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148\u200b\u8868\u793a\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b x\uff0c\u200b\u6ee1\u8db3\u200b x \u200b\u662f\u200b p\u3001q \u200b\u7684\u200b\u7956\u5148\u200b\u4e14\u200b x \u200b\u7684\u200b\u6df1\u5ea6\u200b\u5c3d\u53ef\u80fd\u200b\u5927\u200b\uff08\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u5b83\u200b\u81ea\u5df1\u200b\u7684\u200b\u7956\u5148\u200b\uff09\u3002\u201d       </p> <p>\u200b\u5206\u7c7b\u200b\u8ba8\u8bba\u200b</p> <ul> <li><code>p</code>\u200b\u6216\u8005\u200b<code>q</code>\u200b\u5305\u542b\u200b\u4e8e\u200b\u53e6\u200b\u4e00\u9897\u200b\u6811\u4e2d\u200b</li> <li>\u200b\u5219\u200b\u4e3a\u200b<code>p</code>\u200b\u6216\u8005\u200b<code>q</code> \uff08\u200b\u7236\u200b\u8282\u70b9\u200b\uff09</li> <li><code>p</code>\u200b\u548c\u200b<code>q</code>\u200b\u5206\u200b\u5c5e\u4e8e\u200b\u4e24\u9897\u200b\u6811\u200b</li> </ul> <p>\u200b\u8fd9\u9053\u9898\u200b\u770b\u200b\u7b54\u6848\u200b\u786e\u5b9e\u200b\u5f88\u200b\u597d\u200b\u7406\u89e3\u200b\uff0c\u200b\u4f46\u200b\u81ea\u5df1\u200b\u60f3\u200b\u53ef\u80fd\u200b\u5c31\u8981\u200b\u8d39\u200b\u8001\u9f3b\u5b50\u200b\u529b\u6c14\u200b\u4e86\u200b....</p> <p>\u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b</p> <ul> <li>\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u662f\u200b<code>p</code>\u200b\u6216\u8005\u200b<code>q</code>\u200b\u6216\u8005\u200b<code>\u200b\u7a7a\u200b</code> \u200b\u5219\u200b\u8fd4\u56de\u200b\u8be5\u200b\u8282\u70b9\u200b</li> <li>\u200b\u5426\u5219\u200b\u9012\u5f52\u200b\u904d\u5386\u200b\u8be5\u200b\u8282\u70b9\u200b\u7684\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b</li> <li>\u200b\u5982\u679c\u200b\u5de6\u5b50\u200b\u6811\u200b\u8fd4\u56de\u200b\u4e86\u200b<code>nullpter</code>\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u7ed3\u679c\u200b</li> <li>\u200b\u53cd\u6b63\u200b\u82e5\u53f3\u5b50\u200b\u6811\u200b\u8fd4\u56de\u200b\u4e86\u200b<code>nullpter</code>\u200b\u5219\u200b\u8fd4\u56de\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u7ed3\u679c\u200b</li> <li>\u200b\u5982\u679c\u200b\u90fd\u200b\u975e\u7a7a\u200b\u5219\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u662f\u200b<code>p\u3001q</code>\u200b\u7684\u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148\u200b</li> </ul> C++<pre><code>class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // \u200b\u5982\u679c\u200b\u627e\u5230\u200bp\u3001q\u200b\u6216\u8005\u200b\u8282\u70b9\u200b\u4e3a\u200b\u7a7a\u5219\u200b\u8fd4\u56de\u200b\n        if (root == nullptr || root == p || root == q) return root;\n        // \u200b\u5de6\u6811\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\n        TreeNode *l = lowestCommonAncestor(root-&gt;left, p, q); \n        // \u200b\u53f3\u6811\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\n        TreeNode *r = lowestCommonAncestor(root-&gt;right, p, q);\n\n        // \u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u5404\u6709\u200bp\u200b\u6216\u8005\u200bq\uff0c\u200b\u5219\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u4e3a\u200b\u516c\u5171\u200b\u7956\u5148\u200b\n        if (l != nullptr &amp;&amp; r != nullptr) return root;\n        // \u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u90fd\u200b\u6ca1\u200b\u627e\u5230\u200b\uff0c\u200b\u8fd4\u56de\u200b\u7a7a\u200b\n        if (l == nullptr &amp;&amp; r == nullptr) return nullptr;\n        // \u200b\u5426\u5219\u200b\uff0c\u200b\u8fd4\u56de\u200bp\u200b\u6216\u8005\u200bq\u200b\u5bf9\u5e94\u200b\u60c5\u51b5\u200b1\n        return l != nullptr ? l : r;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#lca_1","title":"\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200bLCA\u200b\u95ee\u9898","text":"\u5f15\u8a00\u200b <p>           \u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b            </p> <p>           \u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811\u200b \u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u6709\u5e8f\u200b\u7684\u200b\u6811\u200b       </p> <p>\u200b\u548c\u200b\u4e0a\u200b\u4e00\u9053\u200b\u9898\u200b\u4e00\u6837\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u91cc\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u5176\u200b\u5de6\u5b50\u200b\u6811\u200b&lt;\u200b\u6839\u200b\u8282\u70b9\u200b&lt;\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u7279\u6027\u200b\uff0c\u200b\u4e00\u6b21\u200b\u7b5b\u9009\u200b\u51fa\u200b\u4e0d\u5c11\u200b\u70b9\u200b\u3002</p> <ul> <li>\u200b\u5982\u679c\u200b<code>root == p</code>\u200b\u6216\u8005\u200b<code>root == q</code>\u200b\u5219\u200b\u76f4\u63a5\u200b\u5c31\u662f\u200b\u7b54\u6848\u200b</li> <li>\u200b\u5982\u679c\u200b<code>root.val &gt; max(p.val, q.val)</code> <code>p\u200b\u548c\u200bq</code>\u200b\u5fc5\u7136\u200b\u4f4d\u4e8e\u200b<code>root-&gt;left</code>\u200b\u4e2d\u200b</li> <li>\u200b\u5982\u679c\u200b<code>root.val &lt; min(p.val, q.val)</code> <code>p\u200b\u548c\u200bq</code>\u200b\u5fc5\u7136\u200b\u4f4d\u4e8e\u200b<code>root-&gt;right</code>\u200b\u4e2d\u200b</li> <li>\u200b\u5982\u679c\u200b<code>root.val</code>\u200b\u4f4d\u4e8e\u200b<code>p.val</code>\u200b\u548c\u200b<code>q.val</code>\u200b\u76f4\u63a5\u200b\uff0c\u200b\u5219\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b<code>root</code>\u200b\u4e3a\u200b\u7b54\u6848\u200b</li> </ul> C++<pre><code>class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        while (root-&gt;val != p-&gt;val &amp;&amp; root-&gt;val != q-&gt;val) {\n            if (min(p-&gt;val, q-&gt;val) &lt; root-&gt;val &amp;&amp; root-&gt;val &lt; max(p-&gt;val, q-&gt;val)) break;\n            root = root-&gt;val &lt; min(p-&gt;val, q-&gt;val) ? root-&gt;right : root-&gt;left;\n        }\n        return root;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#k","title":"\u6536\u96c6\u200b\u8def\u5f84\u200b\u548c\u200b\u4e3a\u200bk\u200b\u7684\u200b\u8def\u5f84","text":"\u6280\u5de7\u200b \u200b\u9012\u5f52\u200b\u56de\u6eaf\u200b\u8981\u200b\u6ce8\u610f\u200b\u8fd8\u539f\u200b\u73b0\u573a\u200b <p>\u200b\u9898\u76ee\u200b</p> C++<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; pathSum(TreeNode* root, int targetSum) {\n        if (root == nullptr) return {};\n        target = targetSum;\n        dfs(root, 0);\n        return ans;\n    }\nprivate:\n    vector&lt;int&gt; path;\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    int target = 0;\n    void dfs(TreeNode *root, int sum) {\n        path.push_back(root-&gt;val); // \u200b\u5c06\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u52a0\u5165\u200b\u8def\u5f84\u200b\n        if (root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) {\n            if ((sum + root-&gt;val) == target) {\n                ans.push_back(path); // \u200b\u627e\u5230\u200b\u4e00\u6761\u200b\u8def\u5f84\u200b\uff0c\u200b\u52a0\u5165\u200b\u7b54\u6848\u200b\n            }\n        }\n        if (root-&gt;left != nullptr) {\n            dfs(root-&gt;left, sum + root-&gt;val); // \u200b\u9012\u5f52\u200b\u5de6\u5b50\u200b\u6811\u200b\n            path.pop_back();\n        }\n        if (root-&gt;right != nullptr) {\n            dfs(root-&gt;right, sum + root-&gt;val); // \u200b\u9012\u5f52\u200b\u53f3\u5b50\u200b\u6811\u200b\n            path.pop_back();\n        }\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_10","title":"\u5224\u65ad\u200b\u4e00\u4e2a\u200b\u6811\u200b\u662f\u5426\u200b\u4e3a\u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811","text":"\u5f15\u8a00\u200b <p>           \u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811\u200b            </p> <p>           \u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811\u200b \u200b\u662f\u200b\u6307\u8be5\u200b\u6811\u200b\u6240\u6709\u200b\u8282\u70b9\u200b\u7684\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u76f8\u5dee\u200b\u4e0d\u200b\u8d85\u8fc7\u200b 1\u3002       </p> <p>\u200b\u5224\u65ad\u200b\u8fd8\u662f\u200b\u86ee\u200b\u7b80\u5355\u200b\u7684\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u9012\u5f52\u8ba1\u7b97\u200b\u5b50\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u5373\u53ef\u200b\u3002\u200b\u770b\u200b\u4ee3\u7801\u200b\u5c31\u53ef\u4ee5\u770b\u200b\u61c2\u200b\uff01</p> C++<pre><code>class Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n        hight(root);\n        return balance;\n    }\nprivate:\n    bool balance = true;\n    int hight(TreeNode *root) {\n        // \u200b\u5982\u679c\u200b\u5df2\u7ecf\u200b\u4e0d\u200b\u5e73\u8861\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\n        // \u200b\u7a7a\u200b\u8282\u70b9\u200b\u8fd4\u56de\u200b0\n        if (!balance || root == nullptr) return 0;\n\n        // \u200b\u9012\u5f52\u8ba1\u7b97\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\n        int l_size = hight(root-&gt;left);\n        // \u200b\u9012\u5f52\u8ba1\u7b97\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\n        int r_size = hight(root-&gt;right);\n\n        // \u200b\u5224\u65ad\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u5dee\u200b\n        if (abs(l_size - r_size) &gt; 1) balance = false;\n        // \u200b\u8fd4\u56de\u200b\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\n        return max(l_size, r_size) + 1;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Binary%20Tree/#_11","title":"\u5224\u65ad\u200b\u4e00\u4e2a\u200b\u6811\u200b\u662f\u5426\u200b\u4e3a\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811","text":"\u5f15\u8a00\u200b <p>           \u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b            </p> <p>           \u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811\u200b \u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u6709\u5e8f\u200b\u7684\u200b\u6811\u200b       </p> <p>\u200b\u65b9\u6cd5\u200b\u4e00\u200b\uff1a\u200b\u5229\u7528\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b --- \u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u6709\u5e8f\u200b\u7684\u200b\u7279\u6027\u200b</p>","tags":["Algorithm"]},{"location":"note/Algorithm/DateStrucutreDesign/","title":"\u6570\u636e\u7ed3\u6784\u200b\u8bbe\u8ba1\u200b\u4e60\u9898","text":"\u91cd\u70b9\u200b \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b <p>\u200b\u4e3b\u8981\u200b\u5185\u5bb9\u200b</p> <ul> <li> \u200b\u9898\u76ee\u200b1: <code>setAll</code>\u200b\u529f\u80fd\u200b\u7684\u200b\u54c8\u5e0c\u200b\u8868\u200b</li> <li> \u200b\u9898\u76ee\u200b2: \u200b\u5b9e\u73b0\u200b<code>LRU</code>\u200b\u7ed3\u6784\u200b</li> <li> \u200b\u9898\u76ee\u200b3: \u200b\u63d2\u200b\u5220\u200b\u968f\u200b\\(O(1)\\)\u200b\u7684\u200b\u7ed3\u6784\u200b</li> <li> \u200b\u9898\u76ee\u200b4: \u200b\u63d2\u200b\u5220\u200b\u968f\u200b\\(O(1)\\)\u200b\u7684\u200b\u7ed3\u6784\u200b\u52a0\u5f3a\u7248\u200b</li> <li> \u200b\u9898\u76ee\u200b5: \u200b\u5feb\u901f\u200b\u83b7\u5f97\u200b\u6570\u636e\u6d41\u200b\u7684\u200b\u4e2d\u4f4d\u6570\u200b </li> <li> \u200b\u9898\u76ee\u200b6: \u200b\u6700\u5927\u200b\u9891\u7387\u200b\u6808\u200b</li> <li> \u200b\u9898\u76ee\u200b7: \u200b\u5168\u662f\u200bO(1)\u200b\u7684\u200b\u7ed3\u6784\u200b</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/DateStrucutreDesign/#setall","title":"<code>setAll</code>\u200b\u529f\u80fd\u200b\u7684\u200b\u54c8\u5e0c\u200b\u8868","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b \u200b\u725b\u5ba2\u200b. \u200b\u8bbe\u8ba1\u200b\u6709\u200b<code>setAll</code>\u200b\u529f\u80fd\u200b\u7684\u200b\u54c8\u5e0c\u200b\u8868\u200b</p> <p>\u200b\u63d0\u793a\u200b:C++\u200b\u9009\u624b\u200b\u82e5\u6709\u200b\u9700\u8981\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bunordered_map\u200b\u66ff\u6362\u200bmap\u200b\u6765\u200b\u5c06\u200b\u590d\u6742\u5ea6\u200b\u4ece\u200bO(log n)\u200b\u964d\u200b\u4e3a\u200bO(1)</p> <p>\u200b\u8bbe\u8ba1\u200b\u601d\u8def\u200b</p> <ul> <li> <p>\u200b\u5c06\u200b <code>key-value</code>\u200b\u6539\u6210\u200b<code>key - pair&lt;value, time&gt;</code> </p> </li> <li> <p>\u200b\u8bbe\u7f6e\u200b\u4e09\u4e2a\u200b\u5168\u5c40\u53d8\u91cf\u200b<code>setAllTime</code> \u200b\u548c\u200b <code>setAllValue</code> \u200b\u4e0e\u200b <code>cnt</code></p> </li> <li>\u200b\u6bcf\u6b21\u200b\u52a0\u5165\u200b\u52a0\u5165\u200b\u4e00\u5bf9\u200b<code>key-value</code> <code>cnt++</code> ,\u200b\u5e76\u4e14\u200b\u5c06\u200b<code>time = cnt</code></li> <li>\u200b\u6bcf\u6b21\u200b\u6267\u884c\u200b<code>setAll</code>\u200b\u7684\u200b\u65f6\u5019\u200b\u8bbe\u7f6e\u200b<code>setAllTime = cnt</code> \u200b\u548c\u200b <code>setAllValue = \u200b\u8981\u200b\u4fee\u6539\u200b\u7684\u200b\u503c\u200b</code> ,\u200b\u5e76\u4e14\u200b<code>cnt++</code><ul> <li>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u200b\u4e00\u6b65\u200b\u5e76\u200b\u4e0d\u4f1a\u200b\u4fee\u6539\u200b<code>key-value</code></li> </ul> </li> <li>\u200b\u6267\u884c\u200b<code>get()</code>\u200b\u64cd\u4f5c\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u68c0\u67e5\u200b<code>time</code>\u200b\u4e0e\u200b<code>setAllTime</code>\u200b\u82e5\u200b<code>time &lt; setAllTime</code>\u200b\u5219\u200b\u4fee\u6539\u200b<code>value = setAllvalue</code>\u200b\u5426\u5219\u200b\u76f4\u63a5\u200b\u83b7\u5f97\u200b\u503c\u200b</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/DateStrucutreDesign/#lru","title":"\u5b9e\u73b0\u200b<code>LRU</code>\u200b\u7ed3\u6784","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode 146.<code>LRU</code>\u200b\u7f13\u5b58\u200b mid</p> <p>\u200b\u8bbe\u8ba1\u200b\u601d\u8def\u200b</p> <p><code>\u200b\u53cc\u5411\u200b\u94fe\u8868\u200b + \u200b\u54c8\u5e0c\u200b\u8868\u200b</code></p> <p></p> <ul> <li>\u200b\u63d2\u5165\u200b<code>key-value</code>\u200b\u7684\u200b\u65f6\u5019\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b<code>\u200b\u53cc\u5411\u200b\u94fe\u8868\u200b\u8282\u70b9\u200b</code> ,\u200b\u5e76\u4e14\u200b<code>value</code>\u200b\u4e3a\u200b\u6307\u5411\u200b\u8be5\u200b\u8282\u70b9\u200b\u7684\u200b\u6307\u9488\u200b</li> <li>\u200b\u5229\u7528\u200b\u5168\u5c40\u200b\u6307\u9488\u200b<code>head</code>\u200b\u548c\u200b<code>tail</code>\u200b\u5b9a\u4f4d\u200b\u94fe\u8868\u200b\u7684\u200b\u5934\u200b\u8282\u70b9\u200b\u548c\u200b\u5c3e\u200b\u8282\u70b9\u200b</li> <li>\u200b\u6bcf\u6b21\u200b\u6dfb\u52a0\u200b\u3001\u200b\u4fee\u6539\u200b\u3001\u200b\u67e5\u8be2\u200b\u65f6\u5019\u200b\u5c06\u200b\u5bf9\u5e94\u200b\u8282\u70b9\u200b\u79fb\u52a8\u200b\u5230\u200b<code>tail</code>\u200b\u7684\u200b\u540e\u9762\u200b\uff0c\u200b\u5e76\u200b\u8ba9\u200b<code>tail</code>\u200b\u6307\u5411\u200b\u8be5\u200b\u8282\u70b9\u200b</li> <li><code>tail</code>\u200b\u6307\u5411\u200b\u7684\u200b\u6c38\u8fdc\u200b\u662f\u200b\u6700\u65b0\u200b\u88ab\u200b\u64cd\u4f5c\u200b\u7684\u200b\u6570\u636e\u200b</li> <li><code>head</code>\u200b\u6307\u5411\u200b\u6c38\u8fdc\u200b\u662f\u200b\u6700\u6700\u200b\u65e7\u200b\u672a\u200b\u88ab\u200b\u4f7f\u7528\u200b\u7684\u200b\u6570\u636e\u200b</li> <li>\u200b\u5bb9\u91cf\u200b\u4e0d\u591f\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u91ca\u653e\u200b<code>head</code>\u200b\u5bf9\u5e94\u200b\u7684\u200b\u8282\u70b9\u200b\uff0c\u200b\u5e76\u200b\u79fb\u52a8\u200b<code>head = head-&gt;next</code>,\u200b\u540c\u65f6\u200b\u53bb\u9664\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b<code>k-v</code>\u200b\u5bf9\u200b</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/DateStrucutreDesign/#o1","title":"O(1)\u200b\u65f6\u95f4\u200b\u63d2\u5165\u200b\u3001\u200b\u5220\u9664\u200b\u548c\u200b\u83b7\u53d6\u200b\u968f\u673a\u200b\u5143\u7d20","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b\uff1a leetcode 380. O(1) \u200b\u65f6\u95f4\u200b\u63d2\u5165\u200b\u3001\u200b\u5220\u9664\u200b\u548c\u200b\u83b7\u53d6\u200b\u968f\u673a\u200b\u5143\u7d20\u200b</p> <p>\u200b\u8bbe\u8ba1\u200b\u601d\u8def\u200b</p> <ul> <li>\u200b\u80af\u5b9a\u200b\u4f1a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u54c8\u5e0c\u200b\u8868\u200b\uff0c\u200b\u540c\u65f6\u200b\u7533\u8bf7\u200b\u4e00\u4e2a\u200b\u52a8\u6001\u200b\u6570\u7ec4\u200b(vector)\u200b\u5b58\u200b\u8f93\u5165\u200b\u7684\u200b\u6570\u636e\u200b</li> <li>\u200b\u54c8\u5e0c\u200b\u8868\u200b\u4e3a\u4e86\u200b\u53bb\u200b\u91cd\u200b</li> <li>\u200b\u52a8\u6001\u200b\u6570\u7ec4\u200b\u4e3a\u4e86\u200brandom\u200b\u64cd\u4f5c\u200b</li> <li>\u200b\u8003\u8651\u200b<code>remove</code>\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5982\u679c\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u5220\u9664\u200b\u54c8\u5e0c\u200b\u8868\u200b\u7684\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u5bf9\u200b\u6570\u7ec4\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u5904\u7406\u200b\uff0c\u200b\u7a7a\u4f59\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5c06\u4f1a\u200b\u8d8a\u6765\u8d8a\u200b\u591a\u200b\u4ece\u800c\u200b\u5341\u5206\u200b\u5f71\u54cd\u200b<code>random</code>\u200b\u64cd\u4f5c\u200b</li> <li>\u200b\u89e3\u51b3\u529e\u6cd5\u200b\uff1a\u200b\u4f7f\u7528\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u8986\u76d6\u200b\u88ab\u200b<code>remove</code>\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u540c\u65f6\u200b\u66f4\u65b0\u200b\u54c8\u5e0c\u200b\u8868\u200b\u8bb0\u5f55\u200b\u5373\u53ef\u200b</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Difference/","title":"\u5dee\u5206","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Difference/#_1","title":"\u4e00\u7ef4\u200b\u5dee\u5206\u200b\u4e0e\u200b\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206","text":"\ud83d\udcbb \u200b\u76f8\u5173\u200b\u4e60\u9898\u200b          leetcode 1109.\u200b\u822a\u73ed\u200b\u9884\u8ba2\u200b\u7edf\u8ba1\u200b            \u200b\u6d1b\u8c37\u200bP4231 \u200b\u4e09\u6b65\u200b\u5fc5\u6740\u200b    \u200b\u6d1b\u8c37\u200bP5026 Lycanthropy","tags":["Algorithm"]},{"location":"note/Algorithm/Difference/#_2","title":"\u4e00\u7ef4\u200b\u5dee\u5206","text":"<p>\u200b\u5047\u8bbe\u200b\u8981\u200b\u5728\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u7684\u200b[left, right]\u200b\u4e0a\u200b\u8fdb\u884c\u200bn\u200b\u6b21\u200b\u64cd\u4f5c\u200b</p> <ul> <li>\u200b\u53ea\u200b\u5728\u200b<code>left</code>\u200b\u4f4d\u7f6e\u200b\u52a0\u200b<code>x</code>\u200b\u800c\u200b\u5728\u200b<code>right + 1</code>\u200b\u4f4d\u7f6e\u200b\u51cf\u200b<code>x</code></li> <li>\u200b\u76f8\u5f53\u4e8e\u200b\u6807\u8bb0\u200b\u4f5c\u7528\u200b\u8303\u56f4\u200b</li> <li>\u200b\u901a\u8fc7\u200b\u524d\u7f00\u200b\u548c\u200b\u8fd8\u539f\u200b\u51fa\u200b\u771f\u6b63\u200b\u7684\u200b\u7ed3\u679c\u200b</li> </ul> <p>\u200b\u6ce8\u610f\u200b\u4e00\u7ef4\u200b\u5dee\u5206\u200b\u65e0\u6cd5\u200b\u5b9e\u73b0\u200b\u5728\u200b\u64cd\u4f5c\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b \u200b\u67e5\u8be2\u200b\u7684\u200b\u64cd\u4f5c\u200b</p> C++<pre><code>// \u200b\u4e00\u7ef4\u200b\u5dee\u5206\u200b\u6a21\u677f\u200b\narr[left] += x;\narr[right + 1] -= y;\n\nfor (int i = 1; i &lt; arr.size(); i++) arr[i] += arr[i - 1];\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Difference/#_3","title":"\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206","text":"\ud83d\udea7 \u200b\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206\u200b\u76ee\u524d\u200b\u9762\u8bd5\u200b\u5e76\u200b\u4e0d\u200b\u5e38\u89c1\u200b \ud83d\udd39 \u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b \u200b\u4e00\u200b\u5f00\u59cb\u200b1~n\u200b\u8303\u56f4\u200b\u4e0a\u200b\u7684\u200b\u6570\u5b57\u200b\u90fd\u200b\u662f\u200b0\u3002\u200b\u63a5\u4e0b\u6765\u200b\u4e00\u5171\u200b\u6709\u200bm\u200b\u4e2a\u200b\u64cd\u4f5c\u200b\u3002 \u200b\u6bcf\u6b21\u200b\u64cd\u4f5c\u200b\uff1al~r\u200b\u8303\u56f4\u200b\u4e0a\u200b\u4f9d\u6b21\u200b\u52a0\u4e0a\u200b\u9996\u9879\u200bs\u3001\u200b\u672b\u9879\u200be\u3001\u200b\u516c\u5dee\u200bd\u200b\u7684\u200b\u6570\u5217\u200b \u200b\u6700\u7ec8\u200b1~n\u200b\u8303\u56f4\u200b\u4e0a\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u6570\u5b57\u200b\u90fd\u200b\u8981\u200b\u6b63\u786e\u200b\u5f97\u5230\u200b <p>\u200b\u5177\u4f53\u200b\u7684\u200b\u63a8\u5bfc\u200b\u8fc7\u7a0b\u200b\u5982\u4e0b\u200b(\u200b\u901a\u8fc7\u200b\u6700\u7ec8\u200b\u72b6\u6001\u200b\u53cd\u63a8\u200b\u53c2\u6570\u200b)</p> <p></p> C++<pre><code>// \u200b\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206\u200b\u6a21\u677f\u200b\nvoid set(int l, int r, int s ,int e, int d) {\n    arr[l] += s;\n    arr[l + 1] += d - s;\n    arr[r + 1] -= d + e;\n    arr[r + 2] += e;\n}\n\nvoid build() {\n    // \u200b\u4e24\u6b21\u200b\u524d\u7f00\u200b\u548c\u200b\n    for (int i = 1; i &lt;= n; i++) arr[i] += arr[i - 1];\n    for (int i = 1; i &lt;= n; i++) arr[i] += arr[i - 1];\n}\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Difference/#_4","title":"\u4e8c\u7ef4\u200b\u524d\u7f00\u200b\u548c","text":"\ud83d\udcbb \u200b\u76f8\u5173\u200b\u4e60\u9898\u200b leetcode 304.\u200b\u4e8c\u7ef4\u200b\u533a\u57df\u200b\u548c\u200b\u68c0\u7d22\u200b-\u200b\u77e9\u9635\u200b\u4e0d\u53ef\u200b\u53d8\u200b(\u200b\u4e8c\u7ef4\u200b\u524d\u7f00\u200b\u548c\u200b\u6a21\u677f\u200b) leetcode 1139.\u200b\u6700\u5927\u200b\u4ee5\u200b1\u200b\u4e3a\u200b\u8fb9\u754c\u200b\u7684\u200b\u6b63\u65b9\u5f62\u200b <p>\u200b\u4e8c\u7ef4\u200b\u524d\u7f00\u200b\u548c\u200b\u7684\u200b\u57fa\u672c\u539f\u7406\u200b</p>","tags":["Algorithm"]},{"location":"note/Algorithm/Difference/#_5","title":"\u4e8c\u7ef4\u200b\u5dee\u5206","text":"\ud83d\udcbb \u200b\u76f8\u5173\u200b\u4e60\u9898\u200b \u200b\u6d1b\u8c37\u200bP3397\u200b\u5730\u6bef\u200b(\u200b\u4e8c\u7ef4\u200b\u5dee\u5206\u200b\u6a21\u677f\u200b) leetcode2132.\u200b\u7528\u200b\u90ae\u7968\u200b\u8d34\u6ee1\u200b\u7f51\u683c\u200b\u56fe","tags":["Algorithm"]},{"location":"note/Algorithm/Difference/#_6","title":"\u79bb\u6563\u200b\u5316\u200b\u6280\u5de7","text":"\ud83d\udcbb \u200b\u76f8\u5173\u200b\u4e60\u9898\u200b leetcode LCP74.\u200b\u6700\u5f3a\u200b\u795d\u798f\u200b\u529b\u573a","tags":["Algorithm"]},{"location":"note/Algorithm/GCD%20and%20Congruence%20/","title":"\u6700\u5927\u516c\u7ea6\u6570\u200b\u95ee\u9898\u200b\u548c\u200b\u540c\u4f59\u200b\u539f\u7406","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/GCD%20and%20Congruence%20/#_1","title":"\u6700\u5927\u516c\u7ea6\u6570\u200b\u95ee\u9898","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/GCD%20and%20Congruence%20/#_2","title":"\u540c\u4f59\u200b\u539f\u7406","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Infer%20by%20data/","title":"\u5929\u5b57\u7b2c\u4e00\u53f7\u200b\u6280\u5de7\u200b-\u200b\u901a\u8fc7\u200b\u6570\u636e\u91cf\u200b\u63a8\u6d4b\u200b\u89e3\u6cd5","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/","title":"\u94fe\u8868\u200b\u9ad8\u9891\u200b\u9898\u76ee","text":"\u91cd\u70b9\u200b \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b <p>\u200b\u94fe\u8868\u200b\u9898\u76ee\u200b\u5e76\u200b\u4e0d\u662f\u200b\u7b97\u6cd5\u200b\u8bbe\u8ba1\u200b\u9898\u200b\uff0c\u200b\u800c\u662f\u200b\u5f88\u200b\u7ecf\u5178\u200b\u7684\u200bCoding\u200b\u80fd\u529b\u200b\u8003\u5bdf\u200b\uff01</p> <p>\u200b\u4e00\u822c\u200b\u4e5f\u200b\u662f\u200b<code>\u200b\u586b\u200b\u51fd\u6570\u200b\u98ce\u683c\u200b</code>\u200b\u800c\u200b\u4e0d\u4f1a\u200b\u662f\u200b<code>Acw</code> </p> <ul> <li> leetcode 160.\u200b\u76f8\u4ea4\u200b\u94fe\u8868\u200b Easy</li> <li> leetcode 25 K\u200b\u4e2a\u200b\u4e00\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868\u200b Hard</li> <li> leetcode 138.\u200b\u968f\u673a\u200b\u94fe\u8868\u200b\u7684\u200b\u590d\u5236\u200b mid</li> <li> leetcode 234\u200b\u56de\u6587\u200b\u94fe\u8868\u200b easy</li> <li> leetcode 142\u200b\u73af\u5f62\u200b\u94fe\u8868\u200bII mid</li> <li> leetcode 148\u200b\u94fe\u8868\u200b\u6392\u5e8f\u200b(\u200b\u601d\u8def\u200bmid,\u200b\u4ee3\u7801\u200bhard)</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/#_1","title":"\u94fe\u8868\u200b\u9898\u200b\u7684\u200b\u6ce8\u610f\u200b\u70b9","text":"<ul> <li>\u200b\u7a7a\u95f4\u200b\u8981\u6c42\u200b\u4e0d\u200b\u4e25\u683c\u200b \u200b\u4f7f\u7528\u200b\u5bb9\u5668\u200b\u5b9e\u73b0\u200b\u5373\u53ef\u200b</li> <li>\u200b\u7a7a\u95f4\u200b\u8981\u6c42\u200b\u4e25\u683c\u200b  \u200b\u8981\u6c42\u200bO(1)\u200b\u7684\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b</li> <li>\u200b\u6700\u200b\u5e38\u7528\u200b\u6280\u5de7\u200b-\u200b\u5feb\u6162\u200b\u6307\u9488\u200b</li> <li>\u200b\u672c\u8d28\u200b\u4e0d\u662f\u200b\u7b97\u6cd5\u200b\u8bbe\u8ba1\u200b\u80fd\u529b\u200b\u800c\u662f\u200bcoding\u200b\u80fd\u529b\u200b</li> <li>\u200b\u94fe\u8868\u200b\u9700\u8981\u200b\u591a\u591a\u200b\u8bad\u7ec3\u200b\u624d\u200b\u53ef\u4ee5\u200b\uff01</li> </ul> \u200b\u63d0\u793a\u200b        \u200b\u548c\u200b\u94fe\u8868\u200b\u76f8\u5173\u200b\u7684\u200b\u96be\u9898\u200b\u4f1a\u200b\u5728\u200b[\u200b\u62d3\u5c55\u200b]\u200b\u7ea6\u745f\u592b\u200b\u73af\u200b\u4e2d\u200b\u6d89\u53ca","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/#_2","title":"\u7ecf\u5178\u200b\u9898\u76ee","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/#question-1","title":"Question 1 \u200b\u4e24\u4e2a\u200b\u94fe\u8868\u200b\u76f8\u4ea4\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u8282\u70b9","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode 160.\u200b\u76f8\u4ea4\u200b\u94fe\u8868\u200b Easy </p> <p>\u200b\u6700\u200b\u76f4\u89c2\u200b\u7684\u200b\u60f3\u6cd5\u200b\uff0c\u200b\u4f7f\u7528\u200b<code>Hashset</code>\u200b\u904d\u5386\u200b\u67d0\u200b\u4e00\u4e2a\u200b\u94fe\u8868\u200b\u4e00\u6b21\u200b\uff0c\u200b\u518d\u200b\u904d\u5386\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u94fe\u8868\u200b\u4e00\u6b21\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u904d\u5386\u200b\u90fd\u200b\u67e5\u8be2\u200b\u4e00\u6b21\u200b\u3002</p> <ul> <li>\u200b\u8fd9\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u7684\u200b\u5bb9\u5668\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u6c42\u200b\u4e25\u683c\u200b\u7684\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\u5219\u200b\u4e0d\u200b\u5bf9\u200b</li> </ul> \u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b \u200b\u89e3\u91ca\u200b \u200b\u5bf9\u4e8e\u200b<code>A</code> <code>B</code>\u200b\u4e24\u4e2a\u200b\u94fe\u8868\u200b\uff0c\u200b\u82e5\u200b\u4e8c\u8005\u200b\u4f1a\u200b\u76f8\u9047\u200b\u5219\u200b\u5fc5\u7136\u200b\u6700\u200b\u603b\u4f1a\u200b\u8fbe\u5230\u200b\u540c\u4e00\u4e2a\u200b\u8282\u70b9\u200b\uff0c\u200b\u4e14\u200b\u6211\u4eec\u200b\u53d1\u73b0\u200b<code>A</code> \u200b\u4e0e\u200b <code>B</code>\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e4b\u5dee\u200b\u4e00\u5b9a\u200b\u5728\u200b\u7b2c\u4e00\u6b21\u200b\u76f8\u9047\u200b\u4e4b\u524d\u200b\u6545\u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b\u4e3a\u200b- \u200b\u957f\u200b\u94fe\u8868\u200b - \u200b\u957f\u5ea6\u200b\u4e4b\u5dee\u200b \u200b\u5e76\u200b\u5f80\u200b\u4e0b\u200b\u904d\u5386\u200b\uff0c\u200b\u76f4\u5230\u200b\u76f8\u540c","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/#question-2","title":"Question 2 \u200b\u6309\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode 25 K\u200b\u4e2a\u200b\u4e00\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868\u200b Hard</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u601d\u8def\u200b\u5012\u200b\u662f\u200b\u4e0d\u96be\u200b\uff0c\u200b\u96be\u200b\u7684\u200b\u662f\u200b<code>Coding</code>\u200b\u5b9e\u73b0\u200b\u7684\u200b\u7ec6\u8282\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u8003\u8651\u200b\\(O(1)\\)\u200b\u7684\u200b\u65f6\u95f4\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u5b58\u5165\u200b\u5728\u200b\u8fdb\u884c\u200b\u53cd\u8f6c\u200b\uff0c\u200b\u4f46\u200b\u8003\u8651\u200b\\(O(1)\\)\u200b\u5373\u200b\u8fdb\u884c\u200b\u539f\u5730\u200b\u53cd\u8f6c\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u7684\u200b\u7ec6\u8282\u200b\u5c31\u200b\u5f88\u591a\u200b\u4e86\u200b\u3002</p> \u200b\u91cd\u8981\u200b \u200b\u8fd9\u9053\u9898\u200b\u601d\u8def\u200b\u4e0d\u96be\u200b\u96be\u70b9\u200b\u5728\u4e8e\u200b\u5982\u4f55\u200b\u5199\u51fa\u200b\u4e0d\u200b\u542b\u200bbug\u200b\u7684\u200b\u4ee3\u7801\u200b \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u89e3\u91ca\u200b \u200b\u5047\u8bbe\u200bk=2 \u200b\u7b2c\u4e00\u6b21\u200b\u64cd\u4f5c\u200b\u7684\u200b\u65f6\u5019\u200b\u6ce8\u610f\u200b\u6362\u5934\u200b\u4e24\u4e2a\u200b\u4e00\u7ec4\u200b\uff0c\u200b\u5355\u72ec\u200b\u53cd\u8f6c\u200b \u200b\u7279\u522b\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u200b\u4e00\u6761\u200b\u7ea2\u8272\u200b\u7684\u200b\u7ebf\u200b\u6700\u7ec8\u200b\u662f\u200b\u8981\u200b\u6307\u5411\u200b<code>d</code> <code>g</code> \u200b\u4e0d\u8db3\u200b2\u200b\u4e0d\u200b\u9700\u8981\u200b\u6539\u53d8","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/#question-3","title":"Question 3 \u200b\u590d\u5236\u200b\u5e26\u200b\u968f\u673a\u200b\u6307\u9488\u200b\u7684\u200b\u94fe\u8868","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200bleetcode 138.\u200b\u968f\u673a\u200b\u94fe\u8868\u200b\u7684\u200b\u590d\u5236\u200b mid</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u9898\u610f\u200b\u5f88\u200b\u7b80\u5355\u200b\uff0c\u200b\u6734\u7d20\u200b\u601d\u8def\u200b\u4e5f\u200b\u5f88\u200b\u7b80\u5355\u200b\u3002</p> <ul> <li> <p>\u200b\u4f7f\u7528\u200b<code>Hash</code>\u200b\u5b58\u50a8\u200b\u62f7\u8d1d\u200b\u8282\u70b9\u200b\u548c\u200b\u539f\u200b\u8282\u70b9\u200b\u7684\u200b<code>key-value</code>\u200b\u5173\u7cfb\u200b\uff0c\u200b\u901a\u8fc7\u200b\u904d\u5386\u200b\u539f\u200b\u8282\u70b9\u200b\uff0c\u200b\u67e5\u200b<code>Hash</code>\u200b\u7684\u200b\u529e\u6cd5\u200b\u786e\u5b9a\u200b\u62f7\u8d1d\u200b\u8282\u70b9\u200b\u7684\u200b<code>next</code>\u200b\u548c\u200b<code>random</code>\u200b\u6307\u9488\u200b\u7684\u200b\u76ee\u6807\u200b</p> </li> <li> <p>\u200b\u4e0d\u662f\u200b\u7528\u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b\u5c31\u200b\u9700\u8981\u200b\u4e00\u70b9\u200b\u6280\u5de7\u200b</p> </li> </ul> \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u8bb2\u89e3\u200b <code>next</code>\u200b\u6307\u9488\u200b\u4e3a\u200b\u84dd\u8272\u200b<code>random</code>\u200b\u6307\u9488\u200b\u4e3a\u200b\u7eff\u8272\u200b \u200b\u9996\u5148\u200b\u5728\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u540e\u9762\u200b\u62f7\u8d1d\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b \u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u539f\u6765\u200b\u7684\u200b\u8282\u70b9\u200b\u7684\u200b<code>random</code>\u200b\u6307\u9488\u200b\u786e\u5b9a\u200b\u62f7\u8d1d\u200b\u8282\u70b9\u200b\u7684\u200b<code>random</code>\u200b\u6307\u9488\u200b<code>copy-&gt;random = original-&gt;random-&gt;next</code>\u200b\u6ce8\u610f\u200b\u56fe\u4e2d\u200b\u7701\u53bb\u200b\u4e86\u200b\u539f\u6765\u200b\u7684\u200brandom\u200b\u6307\u9488\u200b\uff0c\u200b\u5b9e\u9645\u200b\u7f16\u7801\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u6539\u53d8\u200b \u200b\u5206\u79bb\u200b\u94fe\u8868\u200b\u5373\u53ef","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/#question-4","title":"Question 4 \u200b\u5224\u65ad\u200b\u94fe\u8868\u200b\u662f\u5426\u200b\u5b58\u6709\u200b\u56de\u6587\u7ed3\u6784","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode 234\u200b\u56de\u6587\u200b\u94fe\u8868\u200b easy</p> <p>\u200b\u7b80\u5355\u200b\u601d\u8def\u200b\uff1a\u200b\u4f7f\u7528\u200b\u6808\u200b\\(O(N)\\) ,\u200b\u8bfb\u5165\u200b\u8bfb\u51fa\u200b\u4e00\u6b21\u200b\u5373\u53ef\u200b\u5224\u65ad\u200b</p> <p>\u200b\u8fdb\u9636\u200b\u601d\u8def\u200b\uff1a\u200b\u4f7f\u7528\u200b\u5feb\u6162\u200b\u6307\u9488\u200b</p> <ul> <li>\u200b\u6c42\u4e2d\u70b9\u200b</li> <li>\u200b\u9006\u5e8f\u200b\u53e6\u4e00\u8fb9\u200b\u7684\u200b\u94fe\u8868\u200b</li> <li>\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u76f8\u540c\u200b</li> </ul> \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u89e3\u91ca\u200b \u200b\u8bbe\u7f6e\u200b\u5feb\u6162\u200b\u53cc\u200b\u6307\u9488\u200b<code>s</code>\u200b\u8868\u793a\u200b\u6ee1\u200b\u6307\u9488\u200b<code>f</code>\u200b\u8868\u793a\u200b\u5feb\u200b\u6307\u9488\u200b\u5176\u4e2d\u200b<code>s</code>\u200b\u6bcf\u6b21\u200b\u8d70\u200b\u4e00\u683c\u200b,<code>f</code>\u200b\u6bcf\u6b21\u200b\u8d70\u200b\u4e24\u683c\u200b\u5f53\u200b<code>f</code>\u200b\u4e3a\u200b\u8d70\u200b\u4e0d\u200b\u4e0b\u53bb\u200b\u7684\u200b\u65f6\u5019\u200b<code>s</code>\u200b\u4e3a\u200b\u4e2d\u70b9\u200b\u53cd\u8f6c\u200b\u53e6\u4e00\u534a\u200b\u94fe\u8868\u200b\uff0c\u200b\u9010\u4e2a\u200b\u6bd4\u8f83\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u56de\u6587\u200b \u200b\u91cd\u8981\u200b \u200b\u8fd9\u9053\u9898\u200b\u601d\u8def\u200b\u4e0d\u96be\u200b,\u200b\u96be\u70b9\u200b\u5728\u4e8e\u200b\u5982\u4f55\u200b\u5199\u51fa\u200b\u4e0d\u200b\u542b\u200bbug\u200b\u7684\u200b\u4ee3\u7801","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/#question-5","title":"Question 5 \u200b\u94fe\u8868\u200b\u7b2c\u4e00\u4e2a\u200b\u5165\u200b\u73af\u8282\u200b\u70b9","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode 142\u200b\u73af\u5f62\u200b\u94fe\u8868\u200bII mid</p> <p>\u200b\u8fd9\u662f\u200b\u4e00\u9053\u200b\u6bd4\u8f83\u200b\u7ecf\u5178\u200b\u7684\u200b\u5feb\u6162\u200b\u53cc\u200b\u6307\u9488\u200b\u95ee\u9898\u200b(\\(O(1)\\)\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u7684\u200b\u89e3\u6cd5\u200b)</p> <p>\u200b\u672c\u8d28\u200b\u662f\u200b\u4e00\u9053\u200b\u6570\u5b66\u9898\u200b</p> \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u89e3\u91ca\u200b \u200b\u8bbe\u7f6e\u200b\u5feb\u6162\u200b\u53cc\u200b\u6307\u9488\u200b\u5feb\u200b\u6307\u9488\u200b\u6bcf\u6b21\u200b\u8d70\u200b\u4e24\u6b65\u200b\u6162\u200b\u6307\u9488\u200b\u6bcf\u6b21\u200b\u8d70\u200b\u4e00\u6b65\u200b\u6570\u200b \u200b\u5feb\u6162\u200b\u6307\u9488\u200b\u5fc5\u7136\u200b\u4f1a\u200b\u76f8\u9047\u200b \u200b\u6839\u636e\u200b\u4e0b\u65b9\u200b\u6570\u5b66\u200b\u63a8\u200b\u5230\u200b\uff0c\u200b\u4ece\u5934\u200b\u8282\u70b9\u200b\u548c\u200b<code>slow</code>\u200b\u6b64\u540e\u200b<code>slow</code>\u200b\u548c\u200b<code>p</code>\u200b\u6bcf\u6b21\u200b\u5411\u524d\u200b<code>\u200b\u4e00\u6b65\u200b</code>\uff0c\u200b\u6700\u7ec8\u200b\u76f8\u9047\u200b\u7684\u200b\u7ed3\u70b9\u200b\uff0c\u200b\u6bd4\u5982\u200b\u662f\u200b\u5165\u200b\u73af\u8282\u200b\u70b9\u200b <p>\u200b\u6570\u5b66\u200b\u63a8\u5bfc\u200b</p> <p></p> <ul> <li>\u200b\u5047\u8bbe\u200b\u73af\u5916\u200b\u90e8\u5206\u200b\u8ddd\u79bb\u200b\u4e3a\u200b<code>a</code> ,<code>slow</code>\u200b\u6307\u9488\u200b\u8fdb\u5165\u200b\u73af\u540e\u200b\u8d70\u200b\u4e86\u200b<code>b</code>\u200b\u4e0e\u200b<code>fast</code>\u200b\u6307\u9488\u200b\u76f8\u9047\u200b</li> <li>\u200b\u6b64\u65f6\u200b<code>fast</code>\u200b\u6307\u9488\u200b\u8d70\u200b\u5b8c\u200b\u4e86\u200b<code>n</code>\u200b\u5708\u73af\u200b</li> <li><code>fast</code>\u200b\u8d70\u8fc7\u200b\u7684\u200b\u603b\u200b\u8ddd\u79bb\u200b\u4e3a\u200b<code>a+n(b+c)+b = a+(n+1)b+nc</code></li> <li>\u200b\u7531\u4e8e\u200b\u4efb\u610f\u200b\u65f6\u523b\u200b<code>fast</code>\u200b\u8d70\u8fc7\u200b\u7684\u200b\u8ddd\u79bb\u200b\u4e00\u5b9a\u200b\u4e3a\u200b<code>slow</code>\u200b\u7684\u200b\u4e24\u500d\u200b</li> <li>\u200b\u5219\u200b\u6709\u200b<code>2a+2b = a+(n+1)b+nc</code> \u200b\u5373\u200b <code>a=c+(n-1)(b+c)</code></li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/ListQuestions/#question-6","title":"Question 6 \u200b\u94fe\u8868\u200b\u6392\u5e8f","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200bleetcode 148\u200b\u94fe\u8868\u200b\u6392\u5e8f\u200b</p> <p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u989d\u5916\u200b\u8f85\u52a9\u200b\u7a7a\u95f4\u200b\u7684\u200b\u89e3\u6cd5\u200b\u5c31\u200b\u5f88\u591a\u200b\u4e86\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4f7f\u7528\u200b\u9012\u5f52\u200b\u7248\u672c\u200b\u7684\u200b\u5f52\u5e76\u200b\uff0c\u200b\u751a\u81f3\u200b\u76f4\u63a5\u200bsort\u200b\u90fd\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u8981\u6c42\u200b\\(O(1)\\)\u200b\u7684\u200b\u5e38\u6570\u200b\u7a7a\u95f4\u200b\u5e76\u200b\\(O(n\\log{n})\\)\u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u5e76\u200b\u4fdd\u8bc1\u200b\u7a33\u5b9a\u6027\u200b\u5462\u200b\uff1f</p> <ul> <li>\u200b\u8fd9\u4e2a\u200b\u8981\u6c42\u200b\u5f88\u200b\u660e\u663e\u200b\u53ea\u80fd\u200b\u7528\u975e\u200b\u9012\u5f52\u200b\u7248\u672c\u200b\u7684\u200b\u5f52\u5e76\u200b\u6392\u5e8f\u200b\uff0c\u200b\u5177\u4f53\u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b\u770b\u200b 1.2\u200b\u5f52\u5e76\u200b\u6392\u5e8f\u200b\u4e0e\u200b\u5f52\u5e76\u200b\u5206\u6cbb\u200b</li> <li>\u200b\u4f46\u200b\u7531\u4e8e\u200b\u662f\u200b\u94fe\u8868\u200b\uff0c\u200b\u4e9b\u200b\u8fd9\u6bb5\u200b\u4ee3\u7801\u200b\u8fd8\u662f\u200b\u975e\u5e38\u200b\u6298\u78e8\u200b\u7684\u200b\uff01</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/N%20Queen%20Question/","title":"N\u200b\u7687\u540e\u200b\u95ee\u9898\u200b--\u200b\u91cd\u70b9\u200b\u5728\u4e8e\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u95ee\u9898","text":"\ud83d\udcda \u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode51.N\u200b\u7687\u540e\u200b leetcode52.N\u200b\u7687\u540e\u200bII <p>\u200b\u9996\u5148\u200b\u8003\u8651\u200b\u66b4\u529b\u200b\u89e3\u6cd5\u200b</p>","tags":["Algorithm"]},{"location":"note/Algorithm/Nest%20Recursion%20/","title":"\u5d4c\u5957\u200b\u7c7b\u200b\u95ee\u9898\u200b\u7684\u200b\u9012\u5f52\u200b\u89e3\u9898\u200b\u5957\u8def","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Nest%20Recursion%20/#_1","title":"\u5d4c\u5957\u200b\u7c7b\u200b\u89e3\u9898\u200b\u5957\u8def","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Nest%20Recursion%20/#1","title":"\u9898\u76ee\u200b1 \u200b\u8868\u8fbe\u5f0f\u200b\u6c42\u503c","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Nest%20Recursion%20/#2","title":"\u9898\u76ee\u200b2 \u200b\u5b57\u7b26\u4e32\u200b\u89e3\u7801","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Nest%20Recursion%20/#3","title":"\u9898\u76ee\u200b 3 \u200b\u5206\u5b50\u5f0f\u200b\u6c42\u200b\u539f\u5b50\u200b\u6570\u91cf","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/","title":"['\u200b\u6784\u5efa\u200b\u524d\u7f00\u200b\u4fe1\u606f\u200b\u7684\u200b\u6280\u5de7\u200b-\u200b\u89e3\u51b3\u200b\u5b50\u200b\u6570\u7ec4\u200b\u76f8\u5173\u200b\u95ee\u9898\u200b']","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/#-","title":"\u6784\u5efa\u200b\u524d\u7f00\u200b\u4fe1\u606f\u200b\u7684\u200b\u6280\u5de7\u200b-\u200b\u89e3\u51b3\u200b\u5b50\u200b\u6570\u7ec4\u200b\u76f8\u5173\u200b\u95ee\u9898","text":"\ud83d\udcbb \u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b Q1:leetcode303.\u200b\u533a\u57df\u200b\u548c\u200b\u68c0\u7d22\u200b-\u200b\u6570\u7ec4\u200b\u4e0d\u53ef\u200b\u53d8\u200b Q2:\u200b\u725b\u5ba2\u200b.\u200b\u672a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u503c\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u957f\u5ea6\u200b Q3:leetcode560.\u200b\u548c\u200b\u4e3a\u200bk\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b Q4:\u200b\u725b\u5ba2\u200b.\u200b\u672a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u503c\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u7cfb\u5217\u200b\u95ee\u9898\u200b\u8865\u200b1 Q5:leetcode1124.\u200b\u8868\u73b0\u200b\u826f\u597d\u200b\u7684\u200b\u6700\u957f\u200b\u65f6\u95f4\u6bb5\u200b Q6:leetcode1590.\u200b\u4f7f\u200b\u6570\u7ec4\u200b\u548c\u200b\u80fd\u200b\u88ab\u200bP\u200b\u6574\u9664\u200b Q7:leetcode1371.\u200b\u6bcf\u4e2a\u200b\u5143\u97f3\u200b\u5305\u542b\u200b\u5076\u6570\u200b\u6b21\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u5b57\u7b26\u4e32","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/#-_1","title":"\u533a\u57df\u200b\u548c\u200b\u68c0\u7d22\u200b-\u200b\u6570\u7ec4\u200b\u4e0d\u53ef\u200b\u53d8","text":"\ud83d\udca1 \u200b\u63d0\u793a\u200b \u200b\u6570\u636e\u7ed3\u6784\u200b\u8bbe\u8ba1\u200b\u9898\u200b \ud83d\udd04 \u200b\u6734\u7d20\u200b\u89e3\u6cd5\u200b \u200b\u53d1\u73b0\u200b\u4e3b\u8981\u200b\u7684\u200b\u65f6\u95f4\u200b\u6d88\u8d39\u200b\u5728\u200bsumRange C++<pre><code>// \u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b 123ms 23.4MB\nclass NumArray {\npublic:\n    NumArray(vector&lt;int&gt;&amp; nums) {\n        this-&gt;nums = nums;\n    }\n\n    // \u200b\u6700\u200b\u8d39\u65f6\u95f4\u200b\u7684\u200b\u64cd\u4f5c\u200b\n    int sumRange(int left, int right) {\n        int ans = 0;\n        for (int i = left; i &lt;= right; i++)\n            ans += nums[i];\n        return ans;\n    }\nprivate:\n    vector&lt;int&gt; nums;\n};\n</code></pre> \u26a1 \u200b\u4f18\u5316\u200b\u7248\u672c\u200b \u200b\u4f7f\u7528\u200b\u524d\u7f00\u200b\u548c\u200b\u7b80\u5316\u200b\u67e5\u8be2\u200b <p>\u200b\u57fa\u4e8e\u200b\u5982\u4e0b\u200b\u6570\u5b66\u516c\u5f0f\u200b\uff1a</p> \\[ \\begin{aligned} \\text{sumRange}(i, j)    &amp;= \\sum_{k = i}^{j} \\text{num}[k] \\\\   &amp;= \\sum_{k=0}^{j} \\text{num}[k] - \\sum_{k=0}^{i-1} \\text{num}[k] \\end{aligned} \\] <p>\u200b\u8f6c\u6362\u200b\u4e3a\u200b<code>0~j</code>\u200b\u7684\u200b\u524d\u7f00\u200b\u548c\u200b\u4e0e\u200b<code>0~(i-1)</code>\u200b\u7684\u200b\u524d\u7f00\u200b\u548c\u200b\u4e4b\u200b\u5dee\u200b</p> C++<pre><code>// \u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b 3ms 23.5MB\nclass NumArray {\npublic:\n    vector&lt;int&gt; sums;\n    NumArray(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        sums.resize(n + 1); // \u200b\u907f\u514d\u200b\u8fb9\u754c\u200b\u8ba8\u8bba\u200b\n        for (int i = 0; i &lt; n; i++) {\n            sums[i + 1] = sums[i] + nums[i];\n        }\n    }\n\n    int sumRange(int left, int right) {\n        return sums[right + 1] -sums[left]; // sums\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200bn+1\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/#_1","title":"\u672a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u503c\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u957f\u5ea6","text":"\ud83d\udd04 \u200b\u6734\u7d20\u200b\u89e3\u6cd5\u200b C++<pre><code>// O(N^2)\u200b\u7684\u200b\u89e3\u6cd5\u200b\uff0c\u200b\u8fc7\u200b\u4e0d\u4e86\u200b\u5168\u90e8\u200b\u6d4b\u8bd5\u200b\u6837\u4f8b\u200b\nint maxLength(int sum, int n) {\n    int result = 0;\n    for (int i = 0; i &lt; n; i++) {\n        int cur_sum = array[i];\n        for (int j = i + 1; j &lt; n; j++) {\n            cur_sum += array[j];\n            if (cur_sum == sum) {\n                result = result &gt; (j - i + 1) ? result : (j - i + 1);\n            }\n        }\n    }\n\n    return result;\n}\n</code></pre> \u26a1\u200b\u4f18\u5316\u200b\u7248\u672c\u200b \u200b\u4f7f\u7528\u200b\u524d\u7f00\u200b\u4e0e\u200b\u54c8\u5e0c\u200b\u8868\u200b\u4f18\u5316\u200b C++<pre><code>// O(N)\nint compute() {\n    map.clear();\n    map.insert({0, -1});\n    int ans = 0;\n    for (int i = 0, sum = 0; i &lt; n; i++) {\n        sum += q[i];\n        if (map.find(sum - aim) != map.end()) ans = max(ans, i - map[sum - aim]);\n        if (map.find(sum) == map.end()) map.insert({sum, i});\n    }\n\n    return ans;\n}\n</code></pre> <ul> <li>\u200b\u6ce8\u610f\u200b<code>{0, -1}</code>\u200b\u662f\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u5c11\u200b\u7684\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u9519\u8bef\u200b\u3002</li> <li><code>sum[i]</code> \u200b\u8868\u793a\u200b <code>q[0] + q[1] + ... + q[i]</code>\uff08\u200b\u5373\u524d\u200b <code>i+1</code> \u200b\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u548c\u200b\uff09\u3002</li> <li>\u200b\u5b50\u200b\u6570\u7ec4\u200b <code>q[j..i]</code> \u200b\u7684\u200b\u548c\u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b\u4e3a\u200b\uff1asum[i]\u2212sum[j\u22121]</li> <li>\u200b\u5bfb\u627e\u200b <code>j</code> \u200b\u4f7f\u5f97\u200b <code>sum[j] = sum[i] - aim</code>\u3002</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/#k","title":"\u548c\u200b\u4e3a\u200bk\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4","text":"<p>\u200b\u8fd9\u9053\u200b\u9898\u76ee\u200b\u53ea\u200b\u9700\u8981\u200b\u7a0d\u7a0d\u200b\u4fee\u6539\u200b\u4e0a\u9762\u200b\u90a3\u9053\u9898\u200b\u7684\u200b\u89e3\u6cd5\u200b\u5373\u53ef\u200b</p> C++<pre><code>class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; map;  // \u200b\u8bb0\u5f55\u200b\u524d\u7f00\u200b\u548c\u200b\u7684\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\n        map[0] = 1;  // \u200b\u521d\u59cb\u200b\u524d\u7f00\u200b\u548c\u200b\u4e3a\u200b0\u200b\u51fa\u73b0\u200b1\u200b\u6b21\u200b\uff08\u200b\u65b9\u4fbf\u200b\u8ba1\u7b97\u200b\uff09\n        int sum = 0;\n        int ans = 0;\n        for (int num : nums) {\n            sum += num;  // \u200b\u8ba1\u7b97\u200b\u5f53\u524d\u200b\u524d\u7f00\u200b\u548c\u200b\n            if (map.find(sum - k) != map.end()) {\n                ans += map[sum - k];  // \u200b\u7edf\u8ba1\u200b\u6ee1\u8db3\u6761\u4ef6\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b\u6570\u91cf\u200b\n            }\n            map[sum]++;  // \u200b\u66f4\u65b0\u200b\u5f53\u524d\u200b\u524d\u7f00\u200b\u548c\u200b\u7684\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\n        }\n        return ans;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/#1","title":"\u672a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u503c\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u957f\u5ea6\u200b\u8865\u200b1","text":"<p>\u200b\u8fd9\u9053\u9898\u200b\u548c\u200b\u9898\u200b\u4e8c\u200b\u57fa\u672c\u200b\u4e00\u76f4\u200b\uff0c\u200b\u5c06\u200b\u6b63\u6570\u200b\u8f6c\u6362\u200b\u4e3a\u200b<code>1</code>\uff0c\u200b\u8d1f\u6570\u200b\u8f6c\u6362\u200b\u4e3a\u200b<code>-1</code>\uff0c\u200b\u5219\u200b\u9898\u76ee\u200b\u95ee\u9898\u200b\u8f6c\u6362\u200b\u4e3a\u5b50\u200b\u6570\u7ec4\u200b\u548c\u200b\u4e3a\u200b<code>0</code>\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u6709\u200b\u591a\u957f\u200b\u3002</p>","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/#_2","title":"\u8868\u73b0\u200b\u826f\u597d\u200b\u7684\u200b\u6700\u957f\u200b\u65f6\u95f4\u6bb5","text":"<p>\u200b\u672c\u8d28\u200b\u8fd8\u662f\u200b\u524d\u7f00\u200b\u548c\u200b\u5440\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u628a\u200b\u5927\u4e8e\u200b8\u200b\u7684\u200b\u8f6c\u6362\u200b\u4e3a\u200b<code>1</code>\uff0c\u200b\u5c0f\u4e8e\u200b<code>8</code>\u200b\u7684\u200b\u8f6c\u5316\u200b\u4e3a\u200b<code>-1</code>\uff0c\u200b\u5219\u200b\u9898\u76ee\u200b\u7684\u200b\u95ee\u9898\u200b\u8f6c\u6362\u200b\u4e3a\u6c42\u200b<code>aim &gt; 0</code>\u200b\u7684\u200b\u6700\u5927\u200b\u5b50\u200b\u6570\u7ec4\u200b\u957f\u5ea6\u200b</p> <p>\u200b\u5f53\u7136\u200b\u8fd9\u9053\u9898\u200b\u7531\u4e8e\u200b<code>sum</code>\u200b\u6bcf\u6b21\u200b\u53ea\u80fd\u200b<code>+1</code>/<code>-1</code> \u200b\u82e5\u200b <code>sum &lt; 0</code> \u200b\u53ea\u200b\u9700\u8981\u200b\u67e5\u627e\u200b\u6700\u65e9\u200b\u51fa\u73b0\u200b\u524d\u7f00\u200b\u548c\u200b\u4e3a\u200b<code>sum - 1</code>\u200b\u7684\u200b\u5b50\u4e32\u200b\u5373\u53ef\u200b</p> <p>\u200b\u89e3\u91ca\u200b\uff1a</p> <ul> <li>0 ..... j j + 1..... i  \u200b\u7684\u200b\u6574\u4f53\u200b sum = -3</li> <li>0 .... j \u200b\u7684\u200bsum\u200b\u53ef\u4ee5\u200b\u662f\u200b -4, -5, -6 ....</li> <li>\u200b\u4f46\u200b\u7531\u4e8e\u200bsum \u200b\u6bcf\u6b21\u200b\u90fd\u200b\u662f\u200b<code>+1</code>`-1`</li> <li>\u200b\u82e5\u200b0....j\u200b\u4e3a\u200b<code>-5</code>\u200b\u5219\u200b\u6bd4\u5982\u200b\u5b58\u5728\u200b0...m, m+1....j \u200b\u5176\u4e2d\u200b0....m\u200b\u4e3a\u200b<code>-4</code>,  m +  1 ..... j \u200b\u4e3a\u200b<code>-1</code></li> <li>\u200b\u4e14\u200bm + 1..... i\u200b\u6bd4\u200b j +  1 .... i\u200b\u957f\u200b</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/#p","title":"\u4f7f\u200b\u6570\u7ec4\u200b\u548c\u200b\u80fd\u200b\u88ab\u200bP\u200b\u6574\u9664","text":"<p>\u200b\u5927\u4f53\u4e0a\u200b\u548c\u200b\u524d\u9762\u200b\u51e0\u9053\u200b\u9898\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u4f46\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u9053\u9898\u200b\u8981\u6c42\u200b\u7684\u200b\u662f\u200b \u200b\u6700\u77ed\u5b50\u200b\u6570\u7ec4\u200b\uff0c\u200b\u54c8\u5e0c\u200b\u8868\u200b\u91cc\u9762\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u5b58\u200b\u6700\u65e9\u200b\u51fa\u73b0\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u800c\u200b\u5e94\u8be5\u200b\u5b58\u200b\u6700\u200b\u77ed\u200b\u51fa\u73b0\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002</p> <p>\u200b\u9898\u76ee\u200b\u672c\u8d28\u200b\u8981\u6c42\u200b\u5bfb\u627e\u200b<code>cur - mod / (cur + p -mod)</code> \u200b\u6700\u200b\u665a\u200b\u51fa\u73b0\u200b\u7684\u200b\u4f4d\u7f6e\u200b</p> <ul> <li><code>mod</code>\u200b\u4e3a\u200b\u6574\u4f53\u200b\u6570\u7ec4\u200b\u4e0e\u200b<code>p</code>\u200b\u7684\u200b\u4f59\u6570\u200b</li> <li><code>cur</code> \u200b\u4e3a\u200b <code>0...i</code>\u200b\u8fd9\u90e8\u5206\u200b\u7684\u200b\u4f59\u6570\u200b</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Prefix_Sum/#_3","title":"\u6bcf\u4e2a\u200b\u5143\u97f3\u200b\u5305\u542b\u200b\u5076\u6570\u200b\u6b21\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u5b57\u7b26\u4e32\u200b (\u200b\u72b6\u6001\u200b\u538b\u7f29\u200b+\u200b\u524d\u7f00\u200b\u548c\u200b)","text":"<p>\u200b\u6ce8\u610f\u200b\u5230\u200b\u8981\u6c42\u200b\u6240\u4ee5\u200b\u7684\u200b\u5143\u97f3\u200b\u90fd\u200b\u662f\u200b\u5076\u6570\u200b\uff0c\u200b\u8003\u8651\u200b\u7528\u200b\u4e00\u4e2a\u200b<code>00000</code>\u200b\u6807\u8bb0\u200b\u5143\u97f3\u200b\u7684\u200b\u5947\u5076\u200b\u72b6\u6001\u200b</p> <ul> <li><code>0</code>\u200b\u4e3a\u200b\u5076\u6570\u200b <code>1</code>\u200b\u4e3a\u200b\u5947\u6570\u200b</li> </ul> <p>\u200b\u82e5\u200b<code>0....i</code>\u200b\u65f6\u5019\u200b\u7684\u200b\u72b6\u6001\u200b\u4e3a\u200b<code>11101</code>\u200b\u6b64\u65f6\u200b\u53ea\u200b\u9700\u8981\u200b\u627e\u200b\uff0c\u200b\u6700\u65e9\u200b\u51fa\u73b0\u200b\u8be5\u200b\u72b6\u6001\u200b\u7684\u200b\u4f4d\u7f6e\u200b<code>0...j</code> <code>11101</code> \u200b\u6b64\u65f6\u200b<code>j + 1, i</code>\u200b\u5fc5\u7136\u200b\u662f\u200b<code>00000</code></p>","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/","title":"\u5e38\u89c1\u200b\u9012\u5f52\u200b\u95ee\u9898","text":"<ul> <li> \u200b\u9898\u76ee\u200b1 : \u200b\u8fd4\u56de\u200b\u5b57\u7b26\u4e32\u200b\u5168\u90e8\u200b\u5b50\u200b\u5e8f\u5217\u200b\uff0c\u200b\u5b50\u200b\u5e8f\u5217\u200b\u8981\u6c42\u200b\u53bb\u200b\u91cd\u200b\u3002\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bO(2^n * n)</li> <li> \u200b\u9898\u76ee\u200b2 : \u200b\u8fd4\u56de\u200b\u6570\u7ec4\u200b\u7684\u200b\u6240\u6709\u200b\u7ec4\u5408\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u65e0\u89c6\u200b\u5143\u7d20\u200b\u987a\u5e8f\u200b\u3002\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bO(2^n * n)</li> <li> \u200b\u9898\u76ee\u200b3 : \u200b\u8fd4\u56de\u200b\u6ca1\u6709\u200b\u91cd\u590d\u200b\u503c\u200b\u6570\u7ec4\u200b\u7684\u200b\u5168\u90e8\u200b\u6392\u5217\u200b\u3002\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bO(n! * n)</li> <li> \u200b\u9898\u76ee\u200b4 : \u200b\u8fd4\u56de\u200b\u53ef\u80fd\u200b\u6709\u200b\u91cd\u590d\u200b\u503c\u200b\u6570\u7ec4\u200b\u7684\u200b\u5168\u90e8\u200b\u6392\u5217\u200b\uff0c\u200b\u6392\u5217\u200b\u8981\u6c42\u200b\u53bb\u200b\u91cd\u200b\u3002\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bO(n! * n)</li> <li> \u200b\u9898\u76ee\u200b5 : \u200b\u7528\u200b\u9012\u5f52\u200b\u9006\u5e8f\u200b\u4e00\u4e2a\u200b\u6808\u200b\u3002\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bO(n^2)</li> <li> \u200b\u9898\u76ee\u200b6 : \u200b\u7528\u200b\u9012\u5f52\u200b\u6392\u5e8f\u200b\u4e00\u4e2a\u200b\u6808\u200b\u3002\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bO(n^2)</li> <li> \u200b\u9898\u76ee\u200b7 : \u200b\u6253\u5370\u200bn\u200b\u5c42\u200b\u6c49\u8bfa\u5854\u200b\u95ee\u9898\u200b\u7684\u200b\u6700\u4f18\u200b\u79fb\u52a8\u200b\u8f68\u8ff9\u200b\u3002\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200bO(2^n)</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/#_1","title":"\u9012\u5f52\u200b\u7684\u200b\u5957\u8def\u200b\u603b\u7ed3","text":"\u5f15\u8a00\u200b        \u200b\u5e26\u200b\u8def\u5f84\u200b\u7684\u200b\u9012\u5f52\u200b vs \u200b\u4e0d\u5e26\u200b\u8def\u5f84\u200b\u7684\u200b\u9012\u5f52\u200b(\u200b\u5927\u90e8\u5206\u200bdp, \u200b\u72b6\u6001\u200b\u538b\u7f29\u200bdp\u200b\u8ba4\u4e3a\u200b\u662f\u200b\u8def\u5f84\u200b\u7b80\u5316\u200b\u4e86\u200b\u7ed3\u6784\u200b)              \u200b\u4efb\u4f55\u200b\u9012\u5f52\u200b\u90fd\u200b\u662f\u200bbfs\u200b\u4e14\u200b\u975e\u5e38\u7075\u6d3b\u200b\uff0c\u200b\u56de\u6eaf\u200b\u8fd9\u4e2a\u200b\u672f\u8bed\u200b\u53ef\u80fd\u200b\u5e76\u200b\u4e0d\u200b\u91cd\u8981","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/#1","title":"\u9898\u76ee\u200b1 : \u200b\u8fd4\u56de\u200b\u5b57\u7b26\u4e32\u200b\u5168\u90e8\u200b\u5b50\u200b\u5e8f\u5217\u200b\uff0c\u200b\u5b50\u200b\u5e8f\u5217\u200b\u8981\u6c42\u200b\u53bb\u200b\u91cd\u200b\u3002","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b \u200b\u725b\u5ba2\u200b.\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u5168\u90e8\u200b\u5b50\u200b\u5e8f\u5217\u200b C++<pre><code>class Solution {\npublic:\n    /**\n     * \u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u7c7b\u540d\u200b\u3001\u200b\u65b9\u6cd5\u200b\u540d\u200b\u3001\u200b\u53c2\u6570\u200b\u540d\u200b\u5df2\u7ecf\u200b\u6307\u5b9a\u200b\uff0c\u200b\u8bf7\u52ff\u200b\u4fee\u6539\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\u65b9\u6cd5\u200b\u89c4\u5b9a\u200b\u7684\u200b\u503c\u200b\u5373\u53ef\u200b\n     *\n     *\n     * @param s string\u200b\u5b57\u7b26\u4e32\u200b\n     * @return string\u200b\u5b57\u7b26\u4e32\u200bvector\n     */\n    vector&lt;string&gt; generatePermutation(string s) {\n        // write code here\n        path.resize(s.size());\n        dfs(s, 0, 0);\n        return vector&lt;string&gt;(set.begin(), set.end());\n    }\nprivate:\n    string path;\n    unordered_set&lt;string&gt; set;\n    void dfs(string&amp; s, int i, int size) {\n        if (i == s.size()) {\n            set.insert(path.substr(0, size));\n        } else {\n            path[size] = s[i]; // \u200b\u5982\u679c\u200b\u4e0d\u200b\u521d\u59cb\u5316\u200bpath\u200b\u957f\u5ea6\u200b\u8fd9\u91cc\u200b\u5c31\u200b\u4f1a\u200b\u8d8a\u754c\u200b\n            dfs(s, i + 1, size + 1);\n            dfs(s, i + 1, size);\n        }\n    }\n};\n</code></pre> <p>\u200b\u4f7f\u7528\u200b<code>path</code>\u200b\u8bb0\u5f55\u200b\u5f53\u524d\u200b\u904d\u5386\u200b\u8fc7\u200b\u7684\u200b\u8282\u70b9\u200b\uff0c\u200b\u7531\u4e8e\u200b<code>dfs</code>\u200b\u7684\u200b\u7279\u6027\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u88ab\u200b\u904d\u5386\u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u5373\u53ef\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4f20\u5165\u200b<code>size</code>\u200b\u548c\u200b<code>size+1</code>\u200b\u6765\u200b\u5b9e\u73b0\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u4f7f\u7528\u200b\u4e0e\u5426\u200b\u7684\u200b\u5224\u65ad\u200b</p> \u200b\u62d3\u5c55\u200b \u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u7248\u672c\u200b C++<pre><code>vector&lt;string&gt; generatePermutation(string s) {\n    unordered_set&lt;string&gt; set;\n    int n = s.size();\n    // \u200b\u5982\u679c\u200b\u4e0d\u200b\u9700\u8981\u200b\u7a7a\u200b\u5b50\u4e32\u200b\u5219\u200b\u4ece\u200b1\u200b\u5f00\u59cb\u200b\n    for (int mask = 0; mask &lt; (1 &lt;&lt; n); ++mask) {\n        string sub;\n        for (int i = 0; i &lt; n; ++i) {\n            if (mask &amp; (1 &lt;&lt; i)) sub += s[i];\n        }\n        set.insert(sub);\n    }\n    return vector&lt;string&gt;(set.begin(), set.end());\n}\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/#2","title":"\u9898\u76ee\u200b2 : \u200b\u8fd4\u56de\u200b\u6570\u7ec4\u200b\u7684\u200b\u6240\u6709\u200b\u7ec4\u5408\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u65e0\u89c6\u200b\u5143\u7d20\u200b\u987a\u5e8f\u200b\u3002","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode90.\u200b\u5b50\u96c6\u200bII <p>\u200b\u65b9\u6cd5\u200b\u4e00\u200b\uff1a\u200b\u66b4\u529b\u200b\u679a\u4e3e\u200b</p> <p></p> <p>\u200b\u53ef\u4ee5\u200b\u5b8c\u5168\u200b\u6309\u7167\u200b\u4e0a\u9898\u200b\u7684\u200b\u601d\u8def\u200b\u5199\u200b\uff0c\u200b\u4f46\u200b\u8981\u200b\u6ce8\u610f\u200b<code>c++</code>\u200b\u9ed8\u8ba4\u200b\u5e76\u200b\u4e0d\u200b\u652f\u6301\u200b\u5bf9\u200b<code>vector</code>\u200b\u54c8\u5e0c\u200b\u5316\u200b\uff0c\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u5199\u200bhash\u200b\u5904\u7406\u51fd\u6570\u200b\u3002</p> <p>\u200b\u65b9\u6cd5\u200b\u4e8c\u200b\uff1a\u200b\u526a\u679d\u200b\u4f18\u5316\u200b(\u200b\u8bfe\u7a0b\u200b\u4e0a\u200b\u8bb2\u200b\u7684\u200b)</p> <p>\u200b\u6392\u5e8f\u200b\u5e76\u200b\u5212\u5206\u200b\u5143\u7d20\u200b\u6bd4\u5982\u8bf4\u200b\u4e0a\u9762\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b<code>1,1,2,2,3</code></p> <ul> <li>\u200b\u9009\u200b<code>0</code>\u200b\u4e2a\u200b1,\u200b\u5e76\u4e14\u200b\u4ece\u200b\u7b2c\u4e00\u4e2a\u200b<code>2</code>\u200b\u5f00\u59cb\u200b\u9012\u5f52\u200b</li> <li>\u200b\u9009\u200b<code>0</code>\u200b\u4e2a\u200b2,\u200b\u4ece\u200b\u7b2c\u4e00\u4e2a\u200b<code>3</code>\u200b\u5f00\u59cb\u200b\u9012\u5f52\u200b<ul> <li>\u200b\u9009\u200b<code>0</code>\u200b\u4e2a\u200b3</li> <li>\u200b\u9009\u200b<code>1</code>\u200b\u4e2a\u200b3</li> </ul> </li> <li>\u200b\u9009\u200b<code>1</code>\u200b\u4e2a\u200b2,,\u200b\u4ece\u200b\u7b2c\u4e00\u4e2a\u200b<code>3</code>\u200b\u5f00\u59cb\u200b\u9012\u5f52\u200b<ul> <li>.....</li> </ul> </li> <li>\u200b\u9009\u200b<code>2</code>\u200b\u4e2a\u200b2,,\u200b\u4ece\u200b\u7b2c\u4e00\u4e2a\u200b<code>3</code>\u200b\u5f00\u59cb\u200b\u9012\u5f52\u200b<ul> <li>........</li> </ul> </li> <li>\u200b\u9009\u200b<code>1</code> \u200b\u4e2a\u200b1,\u200b\u5e76\u4e14\u200b\u4ece\u200b\u7b2c\u4e00\u4e2a\u200b<code>2</code>\u200b\u5f00\u59cb\u200b\u9012\u5f52\u200b</li> <li>.....</li> <li>\u200b\u9009\u200b<code>2</code>\u200b\u4e2a\u200b1,\u200b\u5e76\u4e14\u200b\u4ece\u200b\u7b2c\u4e00\u4e2a\u200b<code>2</code>\u200b\u5f00\u59cb\u200b\u9012\u5f52\u200b</li> <li>.......</li> </ul> C++<pre><code>void dfs(vector&lt;int&gt;&amp; nums, int i, int size) {\n    if (i == nums.size()) {\n        ans.push_back(vector&lt;int&gt;(path.begin(), path.begin() + size));\n    } else {\n        int j = i + 1;\n        while (j &lt; nums.size() &amp;&amp; nums[i] == nums[j]) {\n            // \u200b\u8bb0\u5f55\u200b\u4e0e\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u91cd\u590d\u200b\u7684\u200b\u5143\u7d20\u200b\u6709\u200b\u591a\u5c11\u200b\u4e2a\u200b\n            j++;\n        }\n\n        // \u200b\u53bb\u200b\u627e\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u91cd\u590d\u200b\u7684\u200b\u5143\u7d20\u200b\n        dfs(nums, j, size);\n        for (; i &lt; j; i++) {\n            path[size++] = nums[i]; \n            // \u200b\u9009\u62e9\u200b1\u200b\u4e2a\u200b\u30012\u200b\u4e2a\u200b\u30013\u200b\u4e2a\u200b....\u200b\u4e2a\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\n            dfs(nums, j, size);\n        }\n    }\n}\n</code></pre> <p>\u200b\u8fd8\u6709\u200b\u53e6\u200b\u4e00\u5957\u200b\u526a\u679d\u200b\u903b\u8f91\u200b</p> C++<pre><code>void dfs(vector&lt;int&gt;&amp; nums, int start) {\n    result.insert(current);\n\n    for (int i = start; i &lt; nums.size(); i++) {\n        if (i &gt; start &amp;&amp; nums[i] == nums[i-1]) continue; // \u200b\u8df3\u8fc7\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b\n        current.push_back(nums[i]);\n        dfs(nums, i + 1);\n        current.pop_back();\n    }\n}\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/#3","title":"\u9898\u76ee\u200b3 : \u200b\u8fd4\u56de\u200b\u6ca1\u6709\u200b\u91cd\u590d\u200b\u503c\u200b\u6570\u7ec4\u200b\u7684\u200b\u5168\u90e8\u200b\u6392\u5217\u200b\u3002","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode46.\u200b\u5168\u200b\u6392\u5217\u200b <p>\u200b\u9898\u76ee\u200b\u4fdd\u8bc1\u200b\u4e86\u200b\u6570\u636e\u200b\u4e0d\u200b\u91cd\u590d\u200b\uff0c\u200b\u6240\u4ee5\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f88\u200b\u76f4\u89c2\u200b\u7684\u200b<code>dfs</code>\u200b\u4f8b\u9898\u200b</p> <p>\u200b\u6bd4\u5982\u8bf4\u200b<code>1, 2, 3</code></p> <ul> <li>\u200b\u5728\u200b<code>0</code>\u200b\u4f4d\u7f6e\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b<code>1</code> <code>2</code> <code>3</code></li> <li>\u200b\u9009\u62e9\u200b<code>1</code><ul> <li>\u200b\u5728\u200b<code>1</code>\u200b\u4f4d\u7f6e\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b<code>2</code>, <code>3</code></li> <li>\u200b\u9009\u62e9\u200b<code>2</code> \u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b <code>3</code><ul> <li>\u200b\u9009\u62e9\u200b<code>3</code>\u200b\u8f93\u51fa\u200b 123</li> </ul> </li> <li>\u200b\u9009\u62e9\u200b<code>3</code> \u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b<code>2</code><ul> <li>\u200b\u9009\u62e9\u200b<code>2</code>\u200b\u8f93\u51fa\u200b 132</li> </ul> </li> </ul> </li> <li>\u200b\u9009\u62e9\u200b<code>2</code><ul> <li>....</li> </ul> </li> <li>\u200b\u9009\u62e9\u200b<code>3</code><ul> <li>.....</li> </ul> </li> </ul> <p>\u200b\u8fd9\u9053\u9898\u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u9700\u8981\u200b\u5f00\u200b\u4e00\u4e2a\u200b\u989d\u5916\u200b\u6570\u7ec4\u200b\u6765\u200b\u505a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u539f\u200b\u6570\u7ec4\u200b\u5b9e\u73b0\u200b\u3002</p> C++<pre><code>void dfs(vector&lt;int&gt; &amp;nums, int i) {\n    if (i == nums.size()) ans.push_back(nums); // \u200b\u9012\u5f52\u200b\u7ec8\u6b62\u200b\u6761\u4ef6\u200b\n    else {\n        for (int j = i; j &lt; nums.size(); j++) {\n            swap(nums[i], nums[j]); // \u200b\u9009\u4e0b\u4e2a\u200b\u5143\u7d20\u200b\n            dfs(nums, i + 1);\n            swap(nums[i], nums[j]); // \u200b\u8fd8\u539f\u200b\n        }\n    }\n}\n</code></pre> <p>\u200b\u9012\u5f52\u200b\u8fc7\u7a0b\u200b</p> <ul> <li><code>nums = [1, 2, 3]</code> <code>i = j = 0</code> ---&gt; <code>dfs(nums, 1)</code><ul> <li><code>nums = [1, 2, 3]</code> , <code>i = j = 1</code> ---&gt; <code>dfs(nums, 2)</code></li> <li><code>nums = [1, 2, 3]</code> , <code>i = j = 2</code> ---&gt; <code>dfs(nums, 3)</code><ul> <li>\u200b\u8fd9\u200b\u4e00\u6b21\u200b\u8c03\u7528\u200b\u7ed3\u675f\u200b<code>nums = [1, 2, 3]</code>\u200b\u52a0\u5165\u200b\u7b54\u6848\u200b</li> </ul> </li> <li><code>nums = [1, 2, 3]</code> , <code>i = 2, j = 3</code> \u200b\u5faa\u73af\u200b\u7ed3\u675f\u200b\u9000\u51fa\u200b\u8c03\u7528\u200b</li> <li><code>nums = [1, 3, 2]</code> , <code>i = 1, j = 2</code> ---&gt; <code>dfs(nums, 2)</code></li> <li><code>nums = [1, 3, 2]</code> , <code>i = j = 2</code> ---&gt; <code>dfs(nums, 3)</code><ul> <li>\u200b\u8fd9\u200b\u4e00\u6b21\u200b\u8c03\u7528\u200b\u7ed3\u675f\u200b<code>nums = [1, 3, 2]</code>\u200b\u52a0\u5165\u200b\u7b54\u6848\u200b</li> </ul> </li> <li><code>nums = [1, 2, 3]</code> , <code>i = 2, j = 3</code> \u200b\u5faa\u73af\u200b\u7ed3\u675f\u200b\u9000\u51fa\u200b\u8c03\u7528\u200b</li> <li><code>nums = [1, 2, 3]</code> , <code>i = 1, j = 3</code> \u200b\u5faa\u73af\u200b\u7ed3\u675f\u200b\u9000\u51fa\u200b\u8c03\u7528\u200b</li> </ul> </li> <li><code>nums = [2, 1, 3]</code> <code>i = 0, j = 1</code> ---&gt; <code>dfs(nums, 1)</code><ul> <li>.....\u200b\u540c\u200b\u4e0a\u200b</li> </ul> </li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/#4","title":"\u9898\u76ee\u200b4 : \u200b\u8fd4\u56de\u200b\u53ef\u80fd\u200b\u6709\u200b\u91cd\u590d\u200b\u503c\u200b\u6570\u7ec4\u200b\u7684\u200b\u5168\u90e8\u200b\u6392\u5217\u200b\uff0c\u200b\u6392\u5217\u200b\u8981\u6c42\u200b\u53bb\u200b\u91cd\u200b\u3002","text":"\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b leetcode47.\u200b\u5168\u200b\u6392\u5217\u200bII","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/#5","title":"\u9898\u76ee\u200b5 : \u200b\u7528\u200b\u9012\u5f52\u200b\u9006\u5e8f\u200b\u4e00\u4e2a\u200b\u6808\u200b\u3002","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/#6","title":"\u9898\u76ee\u200b6 : \u200b\u7528\u200b\u9012\u5f52\u200b\u6392\u5e8f\u200b\u4e00\u4e2a\u200b\u6808\u200b\u3002","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Recursion%20/#7-n","title":"\u9898\u76ee\u200b7 : \u200b\u6253\u5370\u200bn\u200b\u5c42\u200b\u6c49\u8bfa\u5854\u200b\u95ee\u9898\u200b\u7684\u200b\u6700\u4f18\u200b\u79fb\u52a8\u200b\u8f68\u8ff9\u200b\u3002","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/","title":"\u524d\u7f00\u200b\u6811\u200b\uff08\u200b\u5b57\u5178\u200b\u6811\u200b\uff09","text":"","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#_1","title":"\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5","text":"\u26a0\ufe0f \u200b\u91cd\u8981\u200b \u200b\u524d\u7f00\u200b\u6811\u200b\u76f8\u5173\u200b\u64cd\u4f5c\u200b\u7684\u200b\u590d\u6742\u5ea6\u200b <ul> <li>\u200b\u63d2\u5165\u200b\u64cd\u4f5c\u200b \\(O(N)\\) \u200b\u4e0e\u200b \\(O(N)\\) </li> <li>\u200b\u641c\u7d22\u200b\u64cd\u4f5c\u200b\\(O(N)\\)\u200b\u4e0e\u200b\\(O(1)\\)</li> <li>\u200b\u524d\u7f00\u200b\u67e5\u627e\u200b\u64cd\u4f5c\u200b\\(O(N)\\)\u200b\u548c\u200b\\(O(1)\\)</li> <li>\u200b\u5220\u9664\u200b\u64cd\u4f5c\u200b\\(O(M)\\)\u200b\u548c\u200b\\(O(1)\\)</li> </ul> \ud83d\udd0d Trie The Trie data structure is a tree-like structure used for storing a dynamic set of strings. It allows for efficient retrieval and storage of keys, making it highly effective in handling large datasets. Trie supports operations such as insertion, search, deletion of keys, and prefix searches.  <p>\u200b\u7ecf\u5178\u200b\u7684\u200b\u524d\u7f00\u200b\u6811\u200b\u4e00\u822c\u200b\u4e0d\u200b\u5728\u200b\u8282\u70b9\u200b\u5185\u200b\u5b58\u50a8\u200b\u4fe1\u606f\u200b\uff08\u200b\u4e0a\u200b\u56fe\u200b\u53ea\u662f\u200b\u4e2a\u200b\u793a\u610f\u200b\uff09\u200b\u800c\u662f\u200b\u901a\u8fc7\u200b\u8def\u5f84\u200b\u5b58\u50a8\u200b\u5f62\u8c61\u200b\uff0c\u200b\u8282\u70b9\u200b\u4e00\u822c\u200b\u5b58\u6709\u200b<code>poss</code>\u200b\u4e0e\u200b<code>end</code>\uff0c\u200b\u5176\u4e2d\u200b<code>poss</code>\u200b\u8868\u660e\u200b\u6709\u200b\u591a\u5c11\u200b\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u8282\u70b9\u200b\uff0c<code>end</code>\u200b\u8868\u793a\u200b\u591a\u5c11\u200b\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u4ee5\u8be5\u200b\u8282\u70b9\u200b\u7ed3\u675f\u200b\u3002</p>","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#-","title":"\u4e0d\u200b\u63a8\u8350\u200b-\u200b\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u7c7b\u200b\u5b9e\u73b0","text":"\ud83d\udcbb \u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b \u200b\u725b\u5ba2\u200b.\u200b\u5b57\u5178\u200b\u6811\u200b\u7684\u200b\u5b9e\u73b0\u200b C++<pre><code>struct TrieNode {\n    int pass;\n    int end;\n    std::array&lt;TrieNode*, 26&gt; next = {};\n    TrieNode() : pass(0), end(0) {\n        for (int i = 0; i &lt; 26; ++i) {\n            next[i] = nullptr;\n        }\n    }\n    ~TrieNode() {\n        for (int i = 0; i &lt; 26; ++i) {\n            if (next[i] != nullptr) {\n                delete next[i];\n            }\n        }\n    }\n};\nTrieNode *root;\n</code></pre> <p><code>Trie</code>\u200b\u7684\u200b\u8282\u70b9\u200b\u5982\u200b\u4e0a\u200b\u6240\u793a\u200b</p> <ul> <li><code>pass</code>\u200b\u8868\u660e\u200b\u6709\u200b\u591a\u5c11\u200b\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u7ecf\u8fc7\u200b\u4e86\u200b\u8be5\u200b\u8282\u70b9\u200b</li> <li><code>end</code>\u200b\u8868\u660e\u200b\u6709\u200b\u591a\u5c11\u200b\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u4ee5\u8be5\u200b\u8282\u70b9\u200b\u7ed3\u5c3e\u200b</li> <li><code>next[]</code>\u200b\u4f7f\u7528\u200b\u6307\u9488\u200b\u6570\u7ec4\u200b\u5b58\u50a8\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u7684\u200b26\u200b\u6761\u200b\u8def\u5f84\u200b</li> <li><code>a</code>-&gt;0,<code>b</code>-&gt;1 .... z-&gt;<code>25</code> </li> <li>\u200b\u6ce8\u610f\u200b\u8fd9\u91cc\u200b\u786c\u200b\u7f16\u7801\u200b\u4e86\u200b\u6570\u7ec4\u200b\u5927\u5c0f\u200b</li> </ul> <p>\u200b\u57fa\u672c\u64cd\u4f5c\u200b</p> <ul> <li> <p>\u200b\u521d\u59cb\u5316\u200b<code>Trie</code>\u200b\u7c7b\u200b   C++<pre><code>    Trie() {\n        root = new TrieNode();\n    }\n</code></pre></p> </li> <li> <p>\u200b\u63d2\u5165\u200b\u64cd\u4f5c\u200b(insert)   C++<pre><code>// \u200b\u63d2\u5165\u200b\u64cd\u4f5c\u200b\nvoid insert(string word) {\n    TrieNode *node = root;\n    node-&gt;pass++; // \u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200b pass \u200b\u589e\u52a0\u200b\n    for (int i = 0; i &lt; word.size(); i++) {\n        int path = word[i] - 'a'; // \u200b\u8ba1\u7b97\u200b\u5b57\u7b26\u200b\u5bf9\u5e94\u200b\u7684\u200b\u8def\u5f84\u200b\uff080~25\uff09\n        if (node-&gt;next[path] == nullptr) {\n            node-&gt;next[path] = new TrieNode(); // \u200b\u5982\u679c\u200b\u5b50\u200b\u8282\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u521b\u5efa\u200b\u65b0\u200b\u8282\u70b9\u200b\n        }\n        node = node-&gt;next[path]; // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n        node-&gt;pass++; // \u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u7684\u200b pass \u200b\u589e\u52a0\u200b\n    }\n    node-&gt;end++; // \u200b\u5355\u8bcd\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u7684\u200b end \u200b\u589e\u52a0\u200b\n}\n</code></pre></p> </li> <li> <p>\u200b\u67e5\u8be2\u200b\u64cd\u4f5c\u200b   C++<pre><code>int search(string word) {\n    TrieNode *node = root;\n    for (int i = 0; i &lt; word.size(); i++) {\n        int path = word[i] - 'a';\n        if(node-&gt;next[path] == nullptr) return 0; // \u200b\u672a\u200b\u904d\u5386\u200b\u5b8c\u200bword\u200b\u4e14\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u672a\u200b\u52a0\u5165\u200bTrie\u200b\u5219\u200b\u8fd4\u56de\u200b0\n        node = node-&gt;next[path];\n    }\n    return node-&gt;end;\n}\n</code></pre></p> </li> <li> <p>\u200b\u67e5\u8be2\u200b\u524d\u7f00\u200b\u64cd\u4f5c\u200b   C++<pre><code>int search_prefix(const string &amp;prev) {\n    TrieNode *node = root;\n    for (int i = 0; i &lt; prev.size(); i++) {\n        int path = prev[i] - 'a';\n        if (node-&gt;next[path] == nullptr) return 0;\n        node = node-&gt;next[path];\n    }\n    return node-&gt;pass; // \u200b\u8fd4\u56de\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u8282\u70b9\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u4e2a\u6570\u200b\n}\n</code></pre></p> </li> <li> <p>\u200b\u5220\u9664\u200b\u64cd\u4f5c\u200b</p> </li> <li> <p>\u200b\u5982\u679c\u200b\u6709\u200b\uff0c\u200b\u5220\u9664\u200b\u4e00\u6b21\u200b</p> </li> <li>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\uff0c\u200b\u4ec0\u4e48\u200b\u90fd\u200b\u4e0d\u200b\u505a\u200b</li> </ul> C++<pre><code>void erase(const string &amp;word) {\n    // \u200b\u53ea\u6709\u200b\u8be5\u200b\u5b57\u7b26\u4e32\u200b\u5b58\u5728\u200b\u4e8e\u200bTrie\u200b\u4e2d\u624d\u200b\u9700\u8981\u200b\u64cd\u4f5c\u200b\n    if (search(word) &gt; 0) {\n        TrieNode *node = root;\n        node-&gt;pass--;\n        for (int i = 0; i &lt; word.size(); i++) {\n            int path = word[i] - 'a';\n            if(--node-&gt;next[path]-&gt;pass == 0) {\n                delete node-&gt;next[path];\n                node-&gt;next[path] = nullptr;\n                return ;\n            }\n            node = node-&gt;next[path];\n        }\n        node-&gt;end--;\n    }\n}\n</code></pre> \u26a0\ufe0f \u200b\u91cd\u8981\u200b \u200b\u53ef\u4ee5\u200b\u6539\u7528\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5b58\u50a8\u200b\u66f4\u200b\u591a\u200b\u5b57\u7b26","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#-_1","title":"\u63a8\u8350\u200b-\u200b\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u9759\u6001\u200b\u6570\u7ec4\u200b\u5b9e\u73b0","text":"\ud83d\udcbb \u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b \u200b\u725b\u5ba2\u200b.\u200b\u5b57\u5178\u200b\u6811\u200b\u7684\u200b\u5b9e\u73b0\u200b <p>\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u9759\u6001\u200b\u6570\u7ec4\u200b\u5b9e\u73b0\u200b</p> C++<pre><code>const int MAX; // \u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b\u5408\u7406\u200b\u6570\u503c\u200b\nint trie[MAX][26]; // \u200b\u8bb0\u5f55\u200b\u8def\u5f84\u200b\u4fe1\u606f\u200b\nint Pass[MAX], End[MAX]; // \u200b\u8bb0\u5f55\u200bpass\u200b\u6570\u636e\u200b\u548c\u200bend\u200b\u6570\u636e\u200b\n// \u200b\u820d\u5f03\u200b\u8282\u70b9\u200b0\u200b\u4e0d\u7528\u200b\nint cnt = 1; // \u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\n</code></pre> \ud83d\udcbb \u200b\u53c2\u8003\u200b\u4ee3\u7801\u200b C++<pre><code>// \u200b\u63d2\u5165\u200b\u64cd\u4f5c\u200b\uff1a\u200b\u5c06\u200b\u5355\u8bcd\u200b\u63d2\u5165\u200b\u5230\u200bTrie\u200b\u6811\u4e2d\u200b\nvoid insert(const string &amp;word) {\n    int cur = 1;  // \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b(\u200b\u8282\u70b9\u200b1)\u200b\u5f00\u59cb\u200b\n    Pass[cur]++;  // \u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200bPass\u200b\u8ba1\u6570\u200b+1\uff08\u200b\u8868\u793a\u200b\u7ecf\u8fc7\u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200b\u8def\u5f84\u200b\u6570\u200b+1\uff09\n\n    // \u200b\u904d\u5386\u200b\u5355\u8bcd\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n    for (int i = 0; i &lt; word.size(); i++) {\n        int path = word[i] - 'a';  // \u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b0-25\u200b\u7684\u200b\u7d22\u5f15\u200b(\u200b\u5bf9\u5e94\u200b26\u200b\u4e2a\u200b\u5b57\u6bcd\u200b)\n\n        // \u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u5b57\u7b26\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b50\u200b\u8282\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u521b\u5efa\u200b\u65b0\u200b\u8282\u70b9\u200b\n        if (trie[cur][path] == 0) {\n            trie[cur][path] = ++cnt;  // \u200b\u5206\u914d\u200b\u65b0\u200b\u8282\u70b9\u200b\uff0ccnt\u200b\u9012\u589e\u200b\n        }\n\n        cur = trie[cur][path];  // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n        Pass[cur]++;  // \u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u7684\u200bPass\u200b\u8ba1\u6570\u200b+1\uff08\u200b\u8868\u793a\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u8282\u70b9\u200b\u7684\u200b\u8def\u5f84\u200b\u6570\u200b+1\uff09\n    }\n\n    End[cur]++;  // \u200b\u5355\u8bcd\u200b\u7ed3\u675f\u200b\u8282\u70b9\u200b\u7684\u200bEnd\u200b\u8ba1\u6570\u200b+1\uff08\u200b\u8868\u793a\u200b\u4ee5\u8be5\u200b\u8282\u70b9\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u5355\u8bcd\u200b\u6570\u200b+1\uff09\n}\n\n// \u200b\u67e5\u8be2\u200b\u64cd\u4f5c\u200b\uff1a\u200b\u68c0\u67e5\u200b\u5355\u8bcd\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u4e8e\u200bTrie\u200b\u6811\u4e2d\u200b\nint search(const string &amp;word) {\n    int cur = 1;  // \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b(\u200b\u8282\u70b9\u200b1)\u200b\u5f00\u59cb\u200b\n\n    // \u200b\u904d\u5386\u200b\u5355\u8bcd\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n    for (int i = 0; i &lt; word.size(); i++) {\n        int path = word[i] - 'a';  // \u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b0-25\u200b\u7684\u200b\u7d22\u5f15\u200b\n\n        // \u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u5b57\u7b26\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b50\u200b\u8282\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u5355\u8bcd\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        if (trie[cur][path] == 0) {\n            return 0;  // \u200b\u8fd4\u56de\u200b0\u200b\u8868\u793a\u200b\u5355\u8bcd\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        }\n\n        cur = trie[cur][path];  // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n    }\n\n    // \u200b\u68c0\u67e5\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u662f\u5426\u662f\u200b\u67d0\u4e2a\u200b\u5355\u8bcd\u200b\u7684\u200b\u7ed3\u675f\u200b\u8282\u70b9\u200b\n    return End[cur];  // \u200b\u8fd4\u56de\u200bEnd\u200b\u8ba1\u6570\u200b(0\u200b\u8868\u793a\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c&gt;0\u200b\u8868\u793a\u200b\u5b58\u5728\u200b)\n}\n\n// \u200b\u67e5\u8be2\u200b\u524d\u7f00\u200b\u64cd\u4f5c\u200b\uff1a\u200b\u7edf\u8ba1\u200b\u4ee5\u200b\u7ed9\u5b9a\u200b\u524d\u7f00\u200b\u5f00\u5934\u200b\u7684\u200b\u5355\u8bcd\u200b\u6570\u91cf\u200b\nint search_prefix(const string &amp;pre) {\n    int cur = 1;  // \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b(\u200b\u8282\u70b9\u200b1)\u200b\u5f00\u59cb\u200b\n\n    // \u200b\u904d\u5386\u200b\u524d\u7f00\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n    for (int i = 0; i &lt; pre.size(); i++) {\n        int path = pre[i] - 'a';  // \u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b0-25\u200b\u7684\u200b\u7d22\u5f15\u200b\n\n        // \u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u5b57\u7b26\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b50\u200b\u8282\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u524d\u7f00\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        if (trie[cur][path] == 0) {\n            return 0;  // \u200b\u8fd4\u56de\u200b0\u200b\u8868\u793a\u200b\u524d\u7f00\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        }\n\n        cur = trie[cur][path];  // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n    }\n\n    // \u200b\u8fd4\u56de\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u524d\u7f00\u200b\u8282\u70b9\u200b\u7684\u200b\u8def\u5f84\u200b\u6570\u200b(Pass\u200b\u8ba1\u6570\u200b)\n    return Pass[cur];\n}\n\n// \u200b\u5220\u9664\u200b\u64cd\u4f5c\u200b\uff1a\u200b\u4ece\u200bTrie\u200b\u6811\u4e2d\u200b\u5220\u9664\u200b\u5355\u8bcd\u200b\nvoid erase(const string &amp;word) {\n    // \u200b\u5148\u200b\u68c0\u67e5\u200b\u5355\u8bcd\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\n    if (search(word)) {\n        int cur = 1;  // \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b(\u200b\u8282\u70b9\u200b1)\u200b\u5f00\u59cb\u200b\n        Pass[cur]--;  // \u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200bPass\u200b\u8ba1\u6570\u200b-1\n\n        // \u200b\u904d\u5386\u200b\u5355\u8bcd\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n        for (int i = 0; i &lt; word.size(); i++) {\n            int path = word[i] - 'a';  // \u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b0-25\u200b\u7684\u200b\u7d22\u5f15\u200b\n\n            // \u200b\u51cf\u5c11\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u7684\u200bPass\u200b\u8ba1\u6570\u200b\n            if (--Pass[trie[cur][path]] == 0) {\n                // \u200b\u5982\u679c\u200bPass\u200b\u8ba1\u6570\u200b\u51cf\u200b\u4e3a\u200b0\uff0c\u200b\u8868\u793a\u200b\u6ca1\u6709\u200b\u5176\u4ed6\u200b\u5355\u8bcd\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u8282\u70b9\u200b\n                // \u200b\u53ef\u4ee5\u200b\u5b89\u5168\u200b\u5220\u9664\u200b\u8be5\u200b\u8282\u70b9\u200b(\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b0)\n                trie[cur][path] = 0;\n                return;  // \u200b\u5220\u9664\u200b\u5b8c\u6210\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\n            }\n\n            cur = trie[cur][path];  // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n        }\n\n        End[cur]--;  // \u200b\u5355\u8bcd\u200b\u7ed3\u675f\u200b\u8282\u70b9\u200b\u7684\u200bEnd\u200b\u8ba1\u6570\u200b-1\n    }\n    // \u200b\u5982\u679c\u200b\u5355\u8bcd\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u4e0d\u200b\u505a\u200b\u4efb\u4f55\u200b\u64cd\u4f5c\u200b\n}\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#_2","title":"\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u76f8\u5173\u200b\u4e60\u9898","text":"\ud83d\udcbb \u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b Q1:\u200b\u725b\u5ba2\u200b.\u200b\u63a5\u5934\u200b\u5bc6\u94a5\u200b Q2:leetcode421.\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u4e24\u4e2a\u200b\u6570\u200b\u7684\u200b\u6700\u5927\u200b\u5f02\u6216\u200b\u503c\u200b Q3:leetcode212.\u200b\u5355\u8bcd\u200b\u641c\u7d22\u200bII","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#_3","title":"\u63a5\u5934\u200b\u5bc6\u94a5","text":"<p>\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u5173\u952e\u70b9\u200b\u5728\u4e8e\u200b\u610f\u8bc6\u200b\u5230\u200b\u8fd9\u200b\u662f\u200b\u4e00\u4e2a\u200b<code>\u200b\u524d\u7f00\u200b</code>\u200b\u95ee\u9898\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8981\u200b\u76f8\u5f53\u200b\u5427\u200b<code>int</code>-&gt;<code>string</code>\u200b\u6765\u200b\u6784\u5efa\u200b\u524d\u7f00\u200b\u6811\u200b</p> \ud83d\udca1 \u200b\u63d0\u793a\u200b \u200b\u6ce8\u610f\u200b\u6570\u5b57\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5dee\u503c\u200b\u7684\u200b\u8303\u56f4\u200b\u53ef\u80fd\u200b\u5f88\u5e7f\u200b\uff0c\u200b\u5982\u679c\u200b\u6bcf\u4e2a\u200b\u6570\u5b57\u200b\u90fd\u200b\u521b\u5efa\u200b\u7ef4\u5ea6\u200b\uff0c\u200b\u6b64\u65f6\u200b\u9759\u6001\u200b\u6570\u7ec4\u200b\u4f1a\u200b\u8fc7\u4e8e\u200b\u5927\u200b\u3002\u200b\u8003\u8651\u200b\u5206\u89e3\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u4e3a\u200b\u591a\u4e2a\u200b\u6570\u5b57\u200b\u7528\u200b\u4e00\u6761\u200b\u8def\u5f84\u200b\u5b58\u50a8\u200b\u3002 <p>\u200b\u4e3e\u4f8b\u200b\uff1a\u200b\u5bf9\u4e8e\u200b<code>123</code>\u200b\u8fd9\u4e2a\u200b\u7b54\u6848\u200b\u6309\u7167\u200b\u5982\u56fe\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b58\u50a8\u200b\u5728\u200btrie\u200b\u4e2d\u200b\u3002</p> <p></p> <ul> <li>\u200b\u4f7f\u7528\u200b<code>1</code> <code>2</code> <code>3</code>\u200b\u548c\u200b<code>#</code> \u200b\u6784\u6210\u200b\u8fd9\u4e2a\u200b\u5b57\u7b26\u4e32\u200b</li> <li><code>#</code>\u200b\u8868\u660e\u200b\u4e00\u4e2a\u200b\u6570\u5b57\u200b\u7684\u200b\u7ed3\u675f\u200b</li> </ul>","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#_4","title":"\u6570\u7ec4\u200b\u4e2d\u200b\u4e24\u4e2a\u200b\u6570\u200b\u7684\u200b\u6700\u5927\u200b\u5f02\u6216\u200b\u503c","text":"\ud83d\udd04 \u200b\u6734\u7d20\u200b\u89e3\u6cd5\u200b \u200b\u6734\u7d20\u200b\u60f3\u6cd5\u200b\uff0c\u200b\u904d\u5386\u200b\u6570\u7ec4\u200b\u5e76\u200b\u8bb0\u5f55\u200b\u5f02\u5316\u200b\u8fd0\u7b97\u200b(^)\u200b\u7684\u200b\u6700\u5927\u200b\u7ed3\u679c\u200b <ul> <li>\u200b\u4f46\u200b\u6ce8\u610f\u200b\u5230\u200b\u6570\u636e\u200b\u8303\u56f4\u200b\u4e3a\u200b\\([1,2*10^5]\\) \u200b\u6309\u7167\u200b\u6734\u7d20\u200b\u60f3\u6cd5\u200b\\(O(N^2)\\)\u200b\u7684\u200b\u590d\u6742\u5ea6\u200b\u4f1a\u200b\u8d85\u51fa\u200b\u65f6\u95f4\u200b\u9650\u5236\u200b</li> <li>\u200b\u4f46\u200bleetcode\u200b\u7684\u200b\u6570\u636e\u200b\u4e5f\u200b\u592a\u6c34\u200b\u4e86\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fc7\u200b<code>41/45</code> </li> </ul> \u26a1 \u200b\u4f18\u5316\u200b\u7248\u672c\u200b \u200b\u4f7f\u7528\u200b\u524d\u7f00\u200b\u6811\u200b\\\u200b\u54c8\u5e0c\u200b\u8868\u200b <p>\u200b\u4e0b\u9762\u200b\u4e24\u4e2a\u200b\u65b9\u6cd5\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4f7f\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u964d\u4f4e\u200b\u81f3\u200b\\(O(\\log{V}N)\\),\u200b\u5176\u4e2d\u200b<code>V</code>\u200b\u662f\u200b\u6700\u5927\u200b\u7684\u200b\u6570\u503c\u200b\uff0c\\(\\log{V}\\)\u200b\u6700\u9ad8\u200b\u4e0d\u8fc7\u200b32\u200b\u4f4d\u200b\u6240\u4ee5\u200b\u8fd9\u4e2a\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b\\(O(N)\\)</p>","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#_5","title":"\u65b9\u6cd5\u200b\u4e00\u200b\uff1a\u200b\u4f7f\u7528\u200b\u8d2a\u5fc3\u200b+\u200b\u524d\u7f00\u200b\u6811\u200b(\u200b\u76f8\u5bf9\u200b\u597d\u200b\u60f3\u200b\u4f46\u200b\u901f\u5ea6\u6162\u200b\u4e00\u4e9b\u200b)","text":"<p>leetcode\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\u4e3a\u200b<code>253ms(65.7%)</code> \u200b\u4e0e\u200b <code>85.66MB (67.23%)</code></p> <p>\u200b\u7b97\u6cd5\u200b\u6b65\u9aa4\u200b</p> <ul> <li>\u200b\u5c06\u200b\u6240\u6709\u200b\u7684\u200b\u6570\u5b57\u200b\u90fd\u200b\u52a0\u5165\u200b\u524d\u7f00\u200b\u6811\u200b \\(O(N)\\)</li> <li>\u200b\u904d\u5386\u200b\u4e00\u904d\u200b\u6240\u6709\u200b\u6570\u5b57\u200b \\(O(N)\\)</li> <li>\u200b\u5bf9\u4e8e\u200b\u67d0\u4e2a\u200b\u6570\u5b57\u200b\uff0c\u200b\u4ece\u200b\u6700\u9ad8\u200b\u4f4d\u81f3\u200b\u6700\u4f4e\u200b\u4f4d\u200b\u4f9d\u6b21\u200b\u904d\u5386\u200b\u4e00\u6b21\u200b\uff0c\u200b\u8bb0\u200b\u4f46\u200b\u524d\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u72b6\u6001\u200b\u4e3a\u200b<code>s</code></li> <li>\u200b\u53bb\u200b\u5b57\u5178\u200b\u6811\u200b\u91cc\u9762\u200b\u67e5\u627e\u200b\u662f\u5426\u200b\u5b58\u5728\u200b<code>w = s^1</code>\uff0c\u200b\u82e5\u200b\u5b58\u5728\u200b\u5219\u200b\u5c06\u200b\u7b54\u6848\u200b\u66f4\u65b0\u200b<ul> <li><code>ans |=(s ^ w) &lt;&lt; i</code> \u200b\u672c\u8d28\u200b\u662f\u200b\u5c06\u200b<code>1</code>\u200b\u79fb\u52a8\u200b i \u200b\u4f4d\u200b</li> <li>\u200b\u5426\u5219\u200b\u4fdd\u6301\u200b<code>w</code> </li> <li><code>w ^= 1</code> \u200b\u6b64\u65f6\u200b<code>w == s</code> \u200b\u5e76\u200b <code>ans |= (s ^ w) &lt;&lt; i</code>\u200b\u7b49\u4ef7\u200b\u4e8e\u200b<code>ans |= (s ^ s) &lt;&lt; i = 0 &lt;&lt; i</code> \u200b\u76f8\u5f53\u4e8e\u200b\u628a\u200b<code>0</code>\u200b\u79fb\u52a8\u200b\u5230\u200b\u5bf9\u5e94\u200b\u4f4d\u7f6e\u200b</li> </ul> </li> </ul> \u200b\u7b97\u6cd5\u200b\u56fe\u793a\u200b \u200b\u89e3\u91ca\u200b \u200b\u5047\u8bbe\u200b\u8f93\u5165\u200b\u4e3a\u200b[3, 10, 5, 25, 2, 8] \u200b\u6784\u5efa\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b57\u5178\u200b\u6811\u200b \u200b\u904d\u5386\u200b\u6570\u7ec4\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u6570\u4e3a\u200b<code>3</code>\u200b\u671f\u671b\u200b\u83b7\u5f97\u200b\u7684\u200bXOR\u200b\u6700\u5927\u503c\u200b\u4e3a\u200b<code>11100</code>\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u5efa\u7acb\u200b\u7684\u200b\u5b57\u5178\u200b\u6811\u200b\\(O(\\log{V})\\)\u200b\u67e5\u627e\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u5bf9\u5e94\u200b\u7684\u200b\u8282\u70b9","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#_6","title":"\u65b9\u6cd5\u200b\u4e8c\u200b\uff1a \u200b\u4f7f\u7528\u200b\u54c8\u5e0c\u200b\u8868\u200b+\u200b\u8d2a\u5fc3\u200b(\u200b\u66f4\u5feb\u200b\u4f46\u200b\u66f4\u200b\u96be\u200b\u60f3\u200b)","text":"<p>leetcode\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\u4e3a\u200b<code>67ms(98.45%)</code> \u200b\u4e0e\u200b <code>75.42MB(93.82%)</code></p> C++<pre><code>int findMaximumXOR(vector&lt;int&gt;&amp; nums) {\n    // \u200b\u7b2c\u4e00\u6b65\u200b\uff1a\u200b\u627e\u5230\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u6700\u5927\u503c\u200b\n    int max = 0;\n    for (int num : nums) max = max &gt; num ? max : num;\n\n    int ans = 0;  // \u200b\u5b58\u50a8\u200b\u6700\u7ec8\u200b\u7684\u200b\u6700\u5927\u200b\u5f02\u6216\u200b\u503c\u200b\n    unordered_set&lt;int&gt; set;  // \u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u5904\u7406\u200b\u540e\u200b\u7684\u200b\u6570\u5b57\u200b\n\n    // \u200b\u7b2c\u4e8c\u6b65\u200b\uff1a\u200b\u4ece\u200b\u6700\u9ad8\u200b\u6709\u6548\u200b\u4f4d\u200b\u5f00\u59cb\u200b\u9010\u4f4d\u200b\u786e\u5b9a\u200b\u6700\u5927\u200b\u5f02\u6216\u200b\u503c\u200b\n    for (int i = 31 - numberOfLeadingZeros(max); i &gt;= 0; i--) {\n        int better = ans | (1 &lt;&lt; i);  // \u200b\u5c1d\u8bd5\u200b\u5c06\u200b\u5f53\u524d\u200b\u4f4d\u8bbe\u200b\u4e3a\u200b1\uff0c\u200b\u5f97\u5230\u200b\u53ef\u80fd\u200b\u7684\u200b\u66f4\u200b\u5927\u200b\u5f02\u6216\u200b\u503c\u200b\n        set.clear();  // \u200b\u6e05\u200b\u7a7a\u96c6\u5408\u200b\n        for (auto num : nums) {\n            num = (num &gt;&gt; i) &lt;&lt; i;  // \u200b\u5c06\u200b\u6570\u5b57\u200b\u53f3\u79fb\u200bi\u200b\u4f4d\u200b\u518d\u200b\u5de6\u79fb\u200bi\u200b\u4f4d\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200b\u4fdd\u7559\u200bi\u200b\u4f4d\u53ca\u200b\u4ee5\u4e0a\u200b\u7684\u200b\u9ad8\u4f4d\u200b\uff0c\u200b\u4f4e\u4f4d\u200b\u6e05\u200b0\n            set.insert(num);  // \u200b\u5c06\u200b\u5904\u7406\u200b\u540e\u200b\u7684\u200b\u6570\u5b57\u200b\u52a0\u5165\u200b\u96c6\u5408\u200b\n            // \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u6570\u5b57\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u5f53\u524d\u200b\u6570\u5b57\u200b\u4e0e\u200b\u5b83\u200b\u7684\u200b\u5f02\u6216\u200b\u7b49\u4e8e\u200bbetter\n            if (set.find(better ^ num) != set.end()) {\n                ans = better;  // \u200b\u5982\u679c\u200b\u5b58\u5728\u200b\uff0c\u200b\u66f4\u65b0\u200bans\n                break;  // \u200b\u627e\u5230\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8df3\u51fa\u200b\u5faa\u73af\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u5904\u7406\u200b\u4e0b\u200b\u4e00\u4f4d\u200b\n            }\n        }\n    } \n    return ans;\n}\n</code></pre>","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#ii","title":"\u5355\u8bcd\u200b\u641c\u7d22\u200bII","text":"<p>\u200b\u8fd9\u9053\u9898\u200b\u6700\u7ec8\u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u90fd\u200b\u662f\u200b\\(O()(m*n)4^{10})\\)  \u200b\u4f46\u200b\u5982\u679c\u200b\u4e0d\u200b\u91c7\u7528\u200b\u4efb\u4f55\u200b\u51cf\u679d\u200b\u4f18\u5316\u200b\u8fc7\u200b\u4e0d\u4e86\u200b\u6240\u6709\u200b\u6d4b\u8bd5\u200b\u6848\u4f8b\u200b\u3002</p> \ud83d\udd04 \u200b\u6734\u7d20\u200b\u89e3\u6cd5\u200b \u200b\u5f88\u200b\u7ecf\u5178\u200b\u7684\u200bDFS\u200b\u677f\u5b50\u200b <ul> <li>\u200b\u4f46\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u6570\u636e\u200b\u5f88\u200b\u6076\u5fc3\u200b\uff0c\u200b\u53ea\u80fd\u200b\u8fc7\u200b<code>63/65</code></li> </ul> \u26a1 \u200b\u4f18\u5316\u200b\u7248\u672c\u200b \u200b\u91c7\u7528\u200b\u524d\u7f00\u200b\u6811\u200b <p>\u200b\u524d\u7f00\u200b\u6811\u6709\u200b\u4e09\u91cd\u200b\u4f18\u5316\u200b</p> <ul> <li>\u200b\u5148\u200b\u628a\u200b\u6240\u6709\u200b\u8981\u200b\u67e5\u8be2\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u52a0\u5165\u200b\u5230\u200btire\u200b\u4e2d\u200b\u3001\u200b\u5982\u679c\u200b\u5f53\u524d\u200bboard\u200b\u4e0a\u200b\u7684\u200b\u5b57\u7b26\u200b\u6839\u672c\u200b\u4e0d\u518d\u200btire\u200b\u8def\u5f84\u200b\u4e0a\u200b\u5219\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u8df3\u8fc7\u200b</li> <li>\u200b\u53ef\u4ee5\u200b\u7ed9\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u7ec8\u6b62\u200b\u8282\u70b9\u200b\u989d\u5916\u200b\u4e00\u4e2a\u200b<code>string</code>\u200b\u5c5e\u6027\u200b\uff0c\u200b\u8fdb\u800c\u200b\u76f4\u63a5\u200b\u8f93\u51fa\u200b\u7b54\u6848\u200b</li> <li>\u200b\u901a\u8fc7\u200b\u6bcf\u6b21\u200b<code>dfs</code>\u200b\u4fee\u6539\u200b<code>pass</code>\u200b\u5c5e\u6027\u200b\uff0c\u200b\u4ece\u800c\u200b\u907f\u514d\u200b\u91cd\u590d\u200b\u9012\u5f52\u200b\u76f8\u540c\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b</li> </ul> \u200b\u7b97\u6cd5\u200b\u56fe\u793a\u200b \u200b\u89e3\u91ca\u200b! \u200b\u5de6\u4fa7\u200b\u4e3a\u200bboard\u3001\u200b\u53f3\u4fa7\u200b\u4e3a\u200bwords \u200b\u6784\u5efa\u200bTire \u200b\u904d\u5386\u200bboard\uff0c\u200b\u67e5\u200ba\u200b\u53d1\u73b0\u200bTire\u200b\u4e2d\u6709\u200ba\u200b\u7684\u200b\u5206\u652f\u200b\u904d\u5386\u200b<code>a</code>\u200b\u7684\u200b\u524d\u540e\u5de6\u53f3\u200b\u56db\u4e2a\u200b\u65b9\u5411\u200b\u53ef\u4ee5\u200b\u8bbf\u95ee\u200b\u7684\u200b\u5143\u7d20\u200b\u5e76\u200b\u653e\u7f6e\u200b<code>a</code>\u200b\u4e3a\u200b<code>#</code> (\u200b\u907f\u514d\u200b\u91cd\u590d\u200b\u904d\u5386\u200b)\u200b\u53d1\u73b0\u200b<code>b</code>\u200b\u4e5f\u200b\u5728\u200bTire\u200b\u4e2d\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u904d\u5386\u200b\u56db\u4e2a\u200b\u65b9\u5411\u200b,\u200b\u5e76\u200b\u7f6e\u200b<code>#</code>\u200b\u53d1\u73b0\u200b<code>c</code>\u200b\u4e5f\u200b\u5728\u200bTire\u200b\u4e2d\u200b\uff0c\u200b\u5e76\u4e14\u200b\u662f\u200b<code>end=1</code>\u200b\u7684\u200b\u8282\u70b9\u200b\uff0c\u200b\u4ece\u800c\u200b\u5c06\u200b<code>abd</code>\u200b\u52a0\u5165\u200b\u7b54\u6848\u200b\u5e76\u200b\u5220\u9664\u200b\u8fd9\u200b\u4e00\u6761\u200b\u8def\u200b\uff0c\u200b\u56de\u6eaf\u200b\u3002","tags":["Algorithm"]},{"location":"note/Algorithm/Trie%20Tree/#_7","title":"\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u603b\u7ed3","text":"","tags":["Algorithm"]},{"location":"note/C%2B%2B%20Language/Expressions%20/","title":"C++ Primer Chapter 4 Expression","text":"","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Expressions%20/#fundamentals","title":"Fundamentals","text":"","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Expressions%20/#basic-concepts","title":"Basic Concepts","text":"","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/","title":"C++ Primer Chapter 3 Strings Vectors and Arrays","text":"","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#namespace-using-declarations","title":"Namespace <code>using</code> Declarations (\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b\u4f7f\u7528\u200b\u58f0\u660e\u200b)","text":"C++<pre><code>using namespace::name; // the safest way \n</code></pre> <p>\u200b\u4f7f\u7528\u200b<code>using</code>\u200b\u53ef\u4ee5\u200b\u907f\u514d\u200b\u91cd\u590d\u4f7f\u7528\u200b<code>std::xxx</code>\u200b\u53ea\u200b\u9700\u8981\u200b\u5728\u200b<code>#include</code>\u200b\u4e4b\u540e\u200b<code>main</code>\u200b\u51fd\u6570\u200b\u4e4b\u524d\u200b\u58f0\u660e\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u5185\u5bb9\u200b\u5373\u53ef\u200b\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n\nusing std::cin;\n\nint mian() {\n    int i;\n    cin &gt;&gt; i;\n    cout &lt;&lt; i; // error \n    std::cout &lt;&lt; i;\n    return 0;\n}\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u7c7b\u578b\u200b\u9700\u8981\u200b\u5355\u72ec\u200b\u4f7f\u7528\u200b<code>using</code></p> C++<pre><code>#include &lt;iostream&gt;\n\nusing std::cin;\nusing std::cout;\nint mian() {\n    int i;\n    cin &gt;&gt; i;\n    cout &lt;&lt; i; // ok\n    std::cout &lt;&lt; i;\n    return 0;\n}\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\u8fd9\u79cd\u200b\u662f\u200b\u975e\u6cd5\u200b\u7684\u200b, \u200b\u4e0d\u200b\u5141\u8bb8\u200b\u516c\u7528\u200b\u4e00\u4e2a\u200b<code>using</code></p> C++<pre><code>using std::cin, std::cout; // error\nusing std::cin; using std::cout; // ok\n</code></pre>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#library-string-type-string","title":"Library <code>string</code> type (<code>string</code>\u200b\u7c7b\u578b\u200b)","text":"<p><code>string</code> is a <code>variable-length</code> sequence of characters.</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>using std::string</code></li> </ul>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#defining-and-initializing-strings-string","title":"Defining and Initializing strings <code>string</code>\u200b\u7684\u200b\u5b9a\u4e49\u200b\u4e0e\u200b\u521d\u59cb\u5316","text":"<p>\u200b\u521d\u59cb\u5316\u200b <code>string</code>\u200b\u7684\u200b\u65b9\u5f0f\u200b</p> C++<pre><code>string s1; // defalut initialization; s1 is the empty string \u200b\u9ed8\u8ba4\u200b\u521d\u59cb\u5316\u200b\nstring s2 = s1; // s2 is a copy of s1 \u200b\u62f7\u8d1d\u200b\u521d\u59cb\u5316\u200b\nstring s3 = \"hiya\"; // s3 is a copy of the string literal \u200b\u5b57\u7b26\u4e32\u200b\u5b57\u200b\u9762\u503c\u200b\u521d\u59cb\u5316\u200b\nstring s4(10, 'c'); // s4 is cccccccccc \n</code></pre> <p>\u200b\u6ce8\u610f\u200b<code>s3</code>\u200b\u5e76\u200b\u4e0d\u200b\u5305\u542b\u200b\u6700\u540e\u200b\u5b57\u7b26\u4e32\u200b\u5b57\u200b\u9762\u503c\u200b\u7684\u200b<code>\\0</code>\u200b\u7ed3\u675f\u7b26\u200b</p> <p>\u200b\u6ce8\u610f\u200b<code>=</code>\u200b\u548c\u200b<code>()</code>\u200b\u521d\u59cb\u5316\u200b\u662f\u200b\u4e0d\u200b\u4e00\u6837\u200b\u7684\u200b</p> C++<pre><code>string s3 = \"hiya\";\nstring s3(hiya);\n</code></pre> <ul> <li><code>=</code>\u200b\u662f\u200b<code>copy initialization</code> \u200b\u62f7\u8d1d\u200b\u521d\u59cb\u5316\u200b</li> <li><code>()</code>\u200b\u662f\u200b<code>direct initializaiton</code> \u200b\u76f4\u63a5\u200b\u521d\u59cb\u5316\u200b</li> </ul> Ways to Initialize a <code>string</code>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#operations-on-strings-string","title":"Operations on strings <code>string</code>\u200b\u7684\u200b\u64cd\u4f5c","text":"<code>string</code> Operations <ul> <li><code>os</code>: output streams</li> <li><code>is</code>: input steams</li> </ul> <p><code>&gt;&gt;</code> \u200b\u548c\u200b <code>&lt;&lt;</code></p> C++<pre><code>int main() {\n    string s;\n    cin &gt;&gt; s; // \u200b\u8bfb\u5165\u200b\u7684\u200b\u65f6\u5019\u200b\u4f1a\u200b\u5ffd\u7565\u200b\u6240\u6709\u200b\u524d\u7f6e\u200b\u7684\u200b\u7a7a\u767d\u200b,\u200b\u76f4\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u8bfb\u5165\u200b\u7684\u200b\u7a7a\u767d\u200b\n    cout &lt;&lt; s &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>\u200b\u548c\u200b\u5185\u7f6e\u200b\u7c7b\u578b\u200b\u7684\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u4e00\u6837\u200b\u5904\u7406\u200b</p> <ul> <li>\u200b\u8fd4\u56de\u200b\u7684\u200b\u4e5f\u200b\u662f\u200b\u5de6\u200b\u64cd\u4f5c\u6570\u200b</li> <li><code>&gt;&gt;</code> \u200b\u8fd4\u56de\u200b<code>std::istream</code></li> <li><code>&lt;&lt;</code>\u200b\u8fd4\u56de\u200b <code>std::ostream</code></li> <li>\u200b\u4f7f\u7528\u200b<code>&gt;&gt;</code>\u200b\u8bfb\u5165\u200b\u4f1a\u200b\u5ffd\u7565\u200b\u7a7a\u683c\u200b</li> </ul> <p><code>getline()</code></p> C++<pre><code>std::istream&amp; getline(std::istream&amp; is, std::string&amp; str); // \u200b\u51fd\u6570\u200b\u7b7e\u540d\u200b\n</code></pre> <ul> <li>\u200b\u6ce8\u610f\u200b<code>getline()</code>\u200b\u5e76\u975e\u200b<code>string</code>\u200b\u7684\u200b\u6210\u5458\u200b\u51fd\u6570\u200b\uff0c\u200b\u800c\u662f\u200b\u81ea\u7531\u200b\u51fd\u6570\u200b\u3002</li> </ul> <p><code>getline</code> \u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\u6d41\u200b\u548c\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u3002\u200b\u5b83\u4f1a\u200b\u4ece\u200b\u8f93\u5165\u200b\u6d41\u4e2d\u200b\u8bfb\u53d6\u200b\u5185\u5bb9\u200b\uff0c\u200b\u76f4\u5230\u200b\u9047\u5230\u200b\u7b2c\u4e00\u4e2a\u200b\u6362\u884c\u7b26\u200b\uff08\u200b\u5305\u62ec\u200b\u8be5\u200b\u6362\u884c\u7b26\u200b\uff09\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u8bfb\u53d6\u200b\u7684\u200b\u5185\u5bb9\u200b\uff08\u200b\u4e0d\u200b\u5305\u542b\u200b\u6362\u884c\u7b26\u200b\u672c\u8eab\u200b\uff09\u200b\u5b58\u50a8\u200b\u5230\u200b\u6307\u5b9a\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u53c2\u6570\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5f53\u200b <code>getline</code> \u200b\u9047\u5230\u200b\u6362\u884c\u7b26\u200b\u65f6\u200b\uff0c\u200b\u65e0\u8bba\u200b\u5b83\u200b\u662f\u200b\u8f93\u5165\u200b\u4e2d\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u8fd8\u662f\u200b\u5176\u4ed6\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5b57\u7b26\u200b\uff0c\u200b\u90fd\u200b\u4f1a\u200b\u7acb\u5373\u200b\u505c\u6b62\u200b\u8bfb\u53d6\u200b\u5e76\u200b\u8fd4\u56de\u200b\u3002 \u200b\u5982\u679c\u200b\u8f93\u5165\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u5c31\u662f\u200b\u6362\u884c\u7b26\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6700\u7ec8\u200b\u5b58\u50a8\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u5c06\u200b\u662f\u200b\u4e00\u4e2a\u200b\u200b\u200b\u200b\u7a7a\u200b\u5b57\u7b26\u4e32\u200b\u200b\u200b\u3002</p> C++<pre><code>int main() {\n    string line;\n    while (getline(cin, line))\n        cout &lt;&lt; line &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p><code>empty()</code> and <code>size()</code> </p> <p>\u200b\u57fa\u672c\u529f\u80fd\u200b</p> <ul> <li><code>empty()</code> \u200b\u8fd4\u56de\u200b<code>bool</code>\u200b\u503c\u200b\uff0c\u200b\u5224\u65ad\u200b\u8be5\u200b<code>string</code>\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b</li> <li><code>size()</code>\u200b\u8fd4\u56de\u200b<code>string::size_type</code>\u200b\u503c\u200b\uff0c\u200b\u8ba1\u7b97\u200b\u8be5\u200b<code>string</code>\u200b\u7684\u200b\u957f\u5ea6\u200b</li> <li>\u200b\u4f7f\u7528\u200b<code>string::size_type</code>\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b\u4e0e\u200b\u673a\u5668\u200b\u65e0\u5173\u200b</li> <li>\u200b\u4f46\u200b\u53ef\u4ee5\u200b\u80af\u5b9a\u200b\u7684\u200b\u65f6\u5019\u200b\u5176\u200b\u4e00\u5b9a\u200b\u662f\u200b\u4e00\u4e2a\u200b\u65e0\u200b\u7b26\u53f7\u200b\u7c7b\u578b\u200b<ul> <li>\u200b\u8981\u200b\u6ce8\u610f\u200b\u548c\u200b<code>int</code>\u200b\u8ba1\u7b97\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c<code>int</code>\u200b\u4f1a\u200b\u88ab\u200b\u5f3a\u5236\u200b\u8f6c\u6362\u200b\u4e3a\u200b<code>unsigned int</code></li> </ul> </li> </ul> <p>Comparing <code>string</code>: ==, !=, &gt;, &gt;=, &lt;. &lt;= </p> <ul> <li>\u200b\u5927\u5c0f\u5199\u200b\u654f\u611f\u200b</li> <li>\u200b\u6309\u7167\u200b\u5b57\u5178\u200b\u5e8f\u200b\u6bd4\u8f83\u200b</li> <li>\u200b\u6bd4\u8f83\u200b\u7684\u200b\u57fa\u672c\u200b\u89c4\u5219\u200b</li> <li>\u200b\u82e5\u200b\u4e24\u200b\u5b57\u7b26\u4e32\u200b\u957f\u5ea6\u200b\u4e0d\u540c\u200b\uff0c\u200b\u4e14\u200b\u8f83\u200b\u77ed\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\u5747\u200b\u4e0e\u200b\u8f83\u957f\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u5bf9\u5e94\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5b57\u7b26\u200b\u76f8\u540c\u200b\uff0c\u200b\u5219\u200b\u8f83\u200b\u77ed\u200b\u5b57\u7b26\u4e32\u200b\u5c0f\u4e8e\u200b\u8f83\u957f\u200b\u5b57\u7b26\u4e32\u200b\u3002</li> <li>\u200b\u82e5\u200b\u4e24\u200b\u5b57\u7b26\u4e32\u200b\u5728\u200b\u4efb\u610f\u200b\u5bf9\u5e94\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u7684\u200b\u5b57\u7b26\u200b\u5b58\u5728\u200b\u5dee\u5f02\u200b\uff0c\u200b\u5219\u200b\u5b57\u7b26\u4e32\u200b\u6bd4\u8f83\u200b\u7684\u200b\u7ed3\u679c\u200b\u7531\u200b\u9996\u4e2a\u200b\u4e0d\u540c\u200b\u5b57\u7b26\u200b\u7684\u200b\u6bd4\u8f83\u200b\u7ed3\u679c\u200b\u51b3\u5b9a\u200b\u3002</li> </ul> <p>string\u200b\u7c7b\u200b\u7684\u200b\u8d4b\u503c\u200b\u4e0e\u200b<code>+</code> </p> <ul> <li><code>string</code>\u200b\u53ef\u4ee5\u200b\u548c\u200b<code>bulit-in</code>\u200b\u7c7b\u578b\u200b\u4e00\u6837\u200b\u76f4\u63a5\u200b\u7528\u200b\u4e00\u4e2a\u200bstring\u200b\u7ed9\u200b\u53e6\u200b\u4e00\u4e2a\u200bstring\u200b\u8d4b\u503c\u200b</li> </ul> C++<pre><code>string s1 = \"happy\", s2;\ns2 = s1; // now, s1 and s2 are \"happy\";\n</code></pre> <ul> <li><code>string</code>\u200b\u7c7b\u200b\u5141\u8bb8\u200b<code>+</code>\u200b\u548c\u200b<code>+=</code>\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u548c\u200b\u5185\u7f6e\u200b\u7c7b\u578b\u200b\u4fdd\u6301\u200b\u4e00\u6837\u200b\u7684\u200b\u903b\u8f91\u200b</li> </ul> C++<pre><code>string s1 = \"happy\", s2 = \"world\";\nstring s3 = s1 + s2; // now s3 is \"happyworld\";\ns1 += s2; // now s1 is \"happyworld\";\n</code></pre> <ul> <li><code>string</code>\u200b\u7c7b\u200b\u4e0e\u200b\u5b57\u7b26\u4e32\u200b\u5b57\u200b\u9762\u503c\u200b\u7684\u200b\u52a0\u6cd5\u200b(\u200b\u6ce8\u610f\u200b)</li> <li>\u200b\u5fc5\u987b\u200b\u6709\u200b\u4e00\u4e2a\u200b\u64cd\u4f5c\u6570\u200b\u4e3a\u200b<code>string</code>\u200b\u624d\u200b\u5408\u6cd5\u200b</li> </ul> C++<pre><code>string s4 = s1 + \", \"; // ok\nstring s5 = \"hello\" + \", \"; // error: no string operand\nstring s6 = s1 + \", \" + \"world\"; // ok\nstring s7 = \"hello\" + \", \" + s2; // error\n</code></pre> <p><code>s7</code>\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u7684\u200b\u539f\u56e0\u200b\u4e3a\u200b\uff0c\u200b\u5176\u200b\u5b9e\u9645\u4e0a\u200b\u53ef\u4ee5\u200b\u8ba4\u4e3a\u200b\u662f\u200b\u5982\u4e0b\u200b\u4e24\u200b\u90e8\u5206\u200b\u7684\u200b\u7ec4\u5408\u200b</p> C++<pre><code>string s7 = (\"hello\" + \", \") + s2; \n</code></pre> <p>\u200b\u800c\u200b\u7b2c\u4e00\u200b\u90e8\u5206\u200b\u662f\u200b\u4e24\u4e2a\u200b\u5b57\u200b\u9762\u503c\u200b\u76f8\u52a0\u200b\uff0c\u200b\u5176\u200b\u64cd\u4f5c\u200b\u975e\u6cd5\u200b</p>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#dealing-with-the-characters-in-a-string","title":"Dealing with the Characters in a <code>string</code>","text":"<p>C++\u200b\u4ece\u200bC\u200b\u6807\u51c6\u200b\u5e93\u200b\u7ee7\u627f\u200b\u800c\u6765\u200b\u7684\u200b\u5e93\u200b\uff0c\u200b\u4e00\u822c\u200b\u4f1a\u200b\u4f7f\u7528\u200b<code>c+name</code>\u200b\u7684\u200b\u540d\u5b57\u200b\u547d\u540d\u200b\u4e14\u200b\u79fb\u53bb\u200b\u540e\u7f00\u200b<code>.h</code>\uff0c\u200b\u540c\u65f6\u200b\u5176\u200b\u6240\u6709\u200b\u5185\u5bb9\u200b\u90fd\u200b\u4f4d\u4e8e\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b<code>std</code>\u200b\u4e2d\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b<code>.h</code>\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5bfc\u5165\u200b\uff0c\u200b\u5219\u200b\u4e0d\u200b\u4fdd\u8bc1\u200b\u6240\u6709\u200b\u7684\u200b\u51fd\u6570\u200b\\\u200b\u53d8\u91cf\u200b\u4f4d\u4e8e\u200b<code>std</code>\u200b\u7684\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b\u5185\u200b\u3002\u200b\u6240\u4ee5\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u6240\u6709\u200b\u4ece\u200bC\u200b\u7ee7\u627f\u200b\u800c\u6765\u200b\u7684\u200b\u5e93\u200b\uff0c\u200b\u90fd\u200b\u5e94\u8be5\u200b\u6309\u7167\u200b<code>cname</code>\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5bfc\u5165\u200b\u3002</p> <code>cctype</code>Functions C11\u200b\u7279\u6027\u200b        \u200b\u8303\u56f4\u200bfor\u200b\u5faa\u73af\u200b    <p><code>C11</code> --- <code>Range-Based for</code></p> C++<pre><code>for (declaration : expression)\nstatement;\n</code></pre> <p>\u200b\u5bf9\u4e8e\u200b<code>string</code>\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u5982\u4e0b\u200b\u65b9\u5f0f\u200b\u904d\u5386\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b</p> C++<pre><code>stirng str(\"some string\");\nfor (auto c : str)\ncout &lt;&lt; c &lt;&lt; endl;\n</code></pre> <p>\u200b\u4e00\u4e2a\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u4f8b\u5b50\u200b</p> C++<pre><code>string s(\"Hello World!!!\");  // \u200b\u5b9a\u4e49\u200b\u5b57\u7b26\u4e32\u200bs\u200b\u5e76\u200b\u521d\u59cb\u5316\u200b\n// punct_cnt\u200b\u7684\u200b\u7c7b\u578b\u200b\u4e0e\u200bs.size()\u200b\u8fd4\u56de\u200b\u7c7b\u578b\u200b\u76f8\u540c\u200b\uff08\u200b\u53c2\u89c1\u200b\u7b2c\u200b2.5.3\u200b\u8282\u200b\u7b2c\u200b70\u200b\u9875\u200b\uff09\ndecltype(s.size()) punct_cnt = 0;  // \u200b\u6807\u70b9\u200b\u8ba1\u6570\u5668\u200b\u521d\u59cb\u5316\u200b\n\n// \u200b\u7edf\u8ba1\u200b\u5b57\u7b26\u4e32\u200bs\u200b\u4e2d\u200b\u7684\u200b\u6807\u70b9\u7b26\u53f7\u200b\u6570\u91cf\u200b\nfor (auto c : s)        // \u200b\u904d\u5386\u200bs\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n if (ispunct(c))     // \u200b\u82e5\u200b\u5f53\u524d\u200b\u5b57\u7b26\u200b\u662f\u200b\u6807\u70b9\u7b26\u53f7\u200b\n     ++punct_cnt;    // \u200b\u6807\u70b9\u200b\u8ba1\u6570\u5668\u200b\u81ea\u589e\u200b\n\n// \u200b\u683c\u5f0f\u5316\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\ncout &lt;&lt; punct_cnt &lt;&lt; \" punctuation characters in \" &lt;&lt; s &lt;&lt; endl;\n</code></pre> <ul> <li>\u200b\u4f7f\u7528\u200b<code>decltype</code>\u200b\u63a8\u65ad\u200b\u8868\u8fbe\u5f0f\u200b<code>s.size()</code>\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\u7c7b\u578b\u200b<code>string::size_tyep</code></li> </ul> <p>\u200b\u4f7f\u7528\u200b<code>reference</code>\u200b\u548c\u200b\u8303\u56f4\u200bfor\u200b\u5faa\u73af\u200b\u4fee\u6539\u200bstring\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b</p> C++<pre><code>string str(\"hello world\");\nfor (auto &amp;c : str)\n    c = toupper(c);\ncout &lt;&lt; str &lt;&lt; endl; \n\n// The output of this code is \nHELLO WORLD\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\u70b9\u200b</p> <ul> <li>\u200b\u867d\u7136\u200b\u770b\u4e0a\u53bb\u200b\u662f\u200b<code>c</code>\u200b\u6bcf\u6b21\u200b\u91cd\u65b0\u200b\u7ed1\u5b9a\u200b\u4e86\u200b<code>str[i]</code>\uff0c\u200b\u4f46\u200b\u5f15\u7528\u200b\u662f\u200b\u4e0d\u200b\u652f\u6301\u200b\u91cd\u65b0\u200b\u7ed1\u5b9a\u200b\u7684\u200b\uff0c\u200b\u6240\u6709\u200b\u5176\u5b9e\u200b\u662f\u200b   C++<pre><code>{\n    auto &amp;c = str[0];\n    ....\n}\n{\n    auto &amp;c = str[1];\n    .....\n}\n.....\n</code></pre></li> </ul> <p>\u200b\u6bcf\u6b21\u200b\u8fed\u4ee3\u200b\u7684\u200b<code>c</code>\u200b\u90fd\u200b\u662f\u200b\u5168\u65b0\u200b\u7684\u200b<code>c</code></p>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#library-vector-template-vector","title":"Library <code>vector</code> template (<code>vector</code>\u200b\u6a21\u677f\u200b)","text":"<ul> <li><code>vector</code> is a collection of objects, all of which have the same type.</li> </ul> C++<pre><code>#include &lt;vector&gt;\nusing std::vector;\n</code></pre> <p><code>vector</code>\u200b\u662f\u200b\u6a21\u677f\u200b(class template)\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5982\u4e0b\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u5b9e\u4f8b\u200b\u5316\u200b(instantiation)</p> C++<pre><code>vector&lt;int&gt; ivec; // ivec holds objects of type int\nvector&lt;Sales_item&gt; Sales_vec; // Sales_vec holds objects of type Sales_item\nvector&lt;vector&lt;string&gt;&gt; file; // vector whose elemnets are vectors\n</code></pre> <ul> <li> <p>\u200b\u6ce8\u610f\u200b<code>vector</code>\u200b\u662f\u200b\u6a21\u677f\u200b(template)\u200b\u4f46\u200b<code>vector&lt;int&gt;</code>\u200b\u662f\u200b\u7c7b\u578b\u200b(type)</p> </li> <li> <p>\u200b\u6ce8\u610f\u200b\u7531\u4e8e\u200b<code>reference</code>\u200b\u5e76\u975e\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4e0d\u200b\u5b58\u5728\u200b\u4f7f\u7528\u200b\u5f15\u7528\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7684\u200b<code>vector</code></p> </li> <li><code>vector</code>\u200b\u652f\u6301\u200b\u53d8\u200b\u957f\u200b</li> </ul> <p>\u200b\u4e00\u4e2a\u200b\u65e7\u200b\u6807\u51c6\u200b\u548c\u200b\u65b0\u200b\u6807\u51c6\u200b\u7684\u200b\u7ec6\u5fae\u200b\u5dee\u8ddd\u200b</p> C++<pre><code>// \u200b\u4f7f\u7528\u200bvector\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u53e6\u200b\u4e00\u4e2a\u200bvector\u200b\u7684\u200b\u533a\u522b\u200b\nvector&lt;vector&lt;int&gt; &gt;; // \u200b\u65e7\u200b\u6807\u51c6\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u7a7a\u683c\u200b\nvector&lt;vector&lt;int&gt;&gt; ; // C++11\u200b\u4e4b\u540e\u200b\u5e76\u200b\u4e0d\u200b\u5f3a\u5236\u200b\u8981\u6c42\u200b\n</code></pre>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#defining-and-initializing-vectors-vector","title":"Defining and Initializing vectors \u200b\u5b9a\u4e49\u200b\u548c\u200b\u521d\u59cb\u5316\u200b<code>vector</code>","text":"C++<pre><code>vector&lt;string&gt; svec; // \u200b\u9ed8\u8ba4\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u5168\u7a7a\u200b\n</code></pre> C++<pre><code>vector&lt;int&gt; ivec;\nvector&lt;int&gt; ivec2(ivec); // \u200b\u62f7\u8d1d\u200b\u521d\u59cb\u5316\u200b\nvector&lt;string&gt; svec(ivec2); // error: \u200b\u7c7b\u578b\u200b\u4e0d\u200b\u5339\u914d\u200b\n</code></pre> C++<pre><code>// C++11\nvector&lt;string&gt; articles = {\"a\", \"an\", \"the\"}; // \u200b\u5217\u8868\u200b\u521d\u59cb\u5316\u200b\nvector&lt;string&gt; articlse{\"a\", \"an\", \"the\"}; // ok\nvector&lt;string&gt; articlse(\"a\", \"an\", \"the\"); // error: \u200b\u4e0d\u80fd\u200b\u4f7f\u7528\u200b()\u200b\u8fdb\u884c\u200b\u5217\u8868\u200b\u521d\u59cb\u5316\u200b\n</code></pre> C++<pre><code>// \u200b\u521b\u5efa\u200b\u542b\u6709\u200b\u6307\u5b9a\u200b\u521d\u59cb\u200b\u5bb9\u91cf\u200b\u548c\u200b\u521d\u59cb\u200b\u5185\u5bb9\u200b\u7684\u200bvector\nvector&lt;int&gt; ivec(10, -1); // \u200b\u5341\u4e2a\u200b\u5143\u7d20\u200b\uff0c\u200b\u6ca1\u4e2a\u200b\u5143\u7d20\u200b\u90fd\u200b\u662f\u200b-1\nvector&lt;string&gt; svec(10, \"hi!\"); // \u200b\u5341\u4e2a\u200b\u5143\u7d20\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u90fd\u200b\u662f\u200bhi!\n</code></pre> C++<pre><code>// \u200b\u521b\u5efa\u200b\u6307\u5b9a\u200b\u521d\u59cb\u200b\u5bb9\u91cf\u200b\u4f46\u200b\u4e0d\u200b\u6307\u5b9a\u200b\u521d\u59cb\u200b\u5185\u5bb9\u200b\u7684\u200bvector\nvector&lt;int&gt; ivec(10); // \u200b\u5341\u4e2a\u200b\u5143\u7d20\u200b\uff0c\u200b\u5168\u90fd\u200b\u662f\u200b0\nvector&lt;string&gt; svec(10); // \u200b\u5341\u4e2a\u200b\u5143\u7d20\u200b\uff0c\u200b\u5168\u90fd\u200b\u662f\u200b\u7a7a\u200b\u5b57\u7b26\u4e32\u200b\n</code></pre> <ul> <li>\u200b\u90e8\u5206\u200b\u7c7b\u200b\u9700\u8981\u200b\u660e\u786e\u200b\u7684\u200b\u663e\u793a\u200b\u521d\u59cb\u5316\u200b\u624d\u200b\u53ef\u4ee5\u200b</li> </ul> <p>\u200b\u6ce8\u610f\u200b\u8fd9\u4e2a\u200b\u521d\u59cb\u5316\u200b\u662f\u200b\u975e\u6cd5\u200b\u7684\u200b</p> C++<pre><code>vector&lt;int&gt; vi = 10; // error: must use direct initialization to supply a size\n</code></pre> \u200b\u603b\u7ed3\u200b\uff1a<code>vector</code>\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u65b9\u6cd5","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#adding-elements-to-a-vector","title":"Adding Elements to a vector","text":"<p><code>push_back()</code>\u200b\u64cd\u4f5c\u200b</p> C++<pre><code>vector&lt;int&gt; v2;\nfor (int i = 0; i &lt; 100; i++) {\n    v2.push_back(i);\n}\n</code></pre> \u200b\u63d0\u793a\u200b        vector\u200b\u652f\u6301\u200b\u52a8\u6001\u200b\u6dfb\u52a0\u200b\u5143\u7d20\u200b\u7684\u200b\u672c\u8d28\u200b\u662f\u200b\u652f\u6301\u200b\u52a8\u6001\u200b\u6269\u5bb9\u200b\uff0c\u200b\u800c\u200b\u52a8\u6001\u200b\u6269\u5bb9\u200b\u5c31\u8981\u200b\u7528\u200b\u7a0b\u5e8f\u5458\u200b\u80fd\u591f\u200b\u628a\u63e1\u200bvector\u200b\u5927\u5c0f\u200b\u7684\u200b\u53d8\u5316\u200b\u3002              \u200b\u7279\u522b\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\uff1a\u200b\u5728\u200b\u8303\u56f4\u200bfor\u200b\u5faa\u73af\u200b\u4e2d\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u4f7f\u7528\u200bpush_back()\u200b\u52a8\u6001\u200b\u6269\u5bb9\u200b\uff01\u200b\u5177\u4f53\u200b\u539f\u56e0\u200b\u89c1\u200bp188 Lterative Statements","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#other-vector-operations","title":"Other <code>vector</code> Operations","text":"<code>vector</code> Operations <p>\u200b\u6ce8\u610f\u200b\u548c\u200b<code>string</code>\u200b\u7c7b\u200b\u4e00\u6837\u200b<code>size()</code>\u200b\u8fd4\u56de\u200b\u7684\u200b\u7c7b\u578b\u200b\u5e76\u975e\u200b\u662f\u200b\u5355\u7eaf\u200b\u7684\u200b<code>int</code>\u200b\u6216\u8005\u200b\u5176\u4ed6\u200b\u5185\u7f6e\u200b\u7c7b\u578b\u200b\u800c\u662f\u200b<code>vector&lt;T&gt;::size_type</code> </p> \u200b\u91cd\u8981\u200b \u200b\u4e00\u822c\u6765\u8bf4\u200b\u8fd9\u91cc\u200b\u7684\u200b\u6a21\u677f\u200b\u7c7b\u578b\u200b\u4e0d\u80fd\u200b\u7701\u7565\u200b\uff01            \u200b\u82f1\u6587\u200b\u539f\u6587\u200b\u4e3a\u200b\uff1aTo use size_type, we must name the type in which it is defined. A vector type always includes its element type.      <p>\u200b\u5728\u200b\u5927\u90e8\u5206\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b<code>[]</code>+\u200b\u4e0b\u200b\u6807\u7684\u200b\u65b9\u5f0f\u200b\u8bbf\u95ee\u200b<code>vector</code>\u200b\u5185\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u4f46\u200b\u8981\u200b\u6ce8\u610f\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u5e76\u200b\u4e0d\u4f1a\u200b\u8fdb\u884c\u200b\u52a8\u6001\u200b\u6269\u5bb9\u200b\uff0c\u200b\u9700\u8981\u200b\u52a8\u6001\u200b\u6269\u5bb9\u200b\u53ea\u80fd\u200b\u4f7f\u7528\u200b<code>push_back()</code>\u200b\u6216\u8005\u200b\u624b\u52a8\u200b\u8c03\u6574\u200b<code>vector</code>\u200b\u7684\u200b\u5927\u5c0f\u200b(resize)\u3002</p> C++<pre><code>vector&lt;int&gt; ivec;\nfor (decltype(ivec.size()) ix = 0; ix &lt; 10; ix++) ivec[ix] = ix; // error\nfor (decltype(ivec.size()) ix = 0; ix &lt; 10; ix++) ivec.push_back(ix); // ok\n</code></pre>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#introducing-iterators","title":"Introducing Iterators(\u200b\u5f15\u5165\u200b\u8fed\u4ee3\u200b\u5668\u200b)","text":"<p>\u200b\u8fed\u4ee3\u200b\u5668\u200b\u4e0e\u200b\u6307\u9488\u200b</p> <ul> <li>\u200b\u90fd\u200b\u662f\u200b\u95f4\u63a5\u200b\u8bbf\u95ee\u200b\u5143\u7d20\u200b</li> <li>\u200b\u5728\u200b\u5982\u4e0b\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\u90fd\u200b\u662f\u200b\u6709\u6548\u200b\u7684\u200b</li> <li>\u200b\u6307\u5411\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b</li> <li>\u200b\u6307\u5411\u200b\u4e00\u4e2a\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u540e\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b</li> <li>\u200b\u4f46\u200b\u8fed\u4ee3\u200b\u5668\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u6307\u5411\u200b\u7a7a\u200b\uff0c\u200b\u800c\u200b\u6307\u9488\u200b\u53ef\u4ee5\u200b\u6307\u5411\u200b\u7a7a\u200b</li> </ul>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#using-iterators","title":"Using Iterators","text":"<p>\u200b\u4e00\u822c\u200b\u83b7\u53d6\u200b\u8fed\u4ee3\u200b\u5668\u200b\u5e76\u200b\u4e0d\u200b\u901a\u8fc7\u200b\u53d6\u200b\u5730\u5740\u200b\u83b7\u5f97\u200b\uff0c\u200b\u800c\u662f\u200b\u901a\u8fc7\u200b\u542b\u6709\u200b\u8fed\u4ee3\u200b\u5668\u200b\u7684\u200b\u5bb9\u5668\u200b\u63d0\u4f9b\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6bd4\u5982\u8bf4\u200b<code>begin()</code>\u200b\u548c\u200b<code>end()</code></p> C++<pre><code>vector&lt;int&gt; v;\nauto b = v.begin();\nauto e = v.end();\n// b and e have the same tyep\n</code></pre> \u200b\u63d0\u793a\u200b      \u200b\u6ce8\u610f\u200bbegin()\u200b\u8fd4\u56de\u200b\u7684\u200b\u662f\u200b\u6307\u5411\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u8fed\u4ee3\u200b\u5668\u200b\uff0c\u200b\u800c\u200bend()\u200b\u8fd4\u56de\u200b\u7684\u200b\u662f\u200b\u6307\u5411\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u8fed\u4ee3\u200b\u5668\u200b\u3002              \u200b\u5982\u679c\u200b\u5bb9\u5668\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u5219\u200bbegin()\u200b\u548c\u200bend()\u200b\u8fd4\u56de\u200b\u76f8\u540c\u200b\u7684\u200b\u8fed\u4ee3\u200b\u5668\u200b\uff0c\u200b\u5747\u200b\u4e3a\u200boff-the-end iterators    Standard Container Iterator Operations <p>\u200b\u4e00\u4e2a\u200b\u4e60\u60ef\u200b\u95ee\u9898\u200b</p> <p>\u200b\u539f\u6587\u200b</p> <p>Programmers coming to C++ from C or Java might be surprised that we used != rather than &lt; in our for loops such as the one above and in the one on page 94. C++ programmers use != as a matter of habit. They do so for the same reason that they use iterators rather than subscripts: This coding style applies equally well to various kinds of containers provided by the library. As we\u2019ve seen, only a few library types, vector and string being among them, have the subscript operator. Similarly, all of the library containers have iterators that define the == and != operators. Most of those iterators do not have the &lt; operator. By routinely using iterators and !=, we don\u2019t have to worry about the precise type of container we\u2019re processing.</p> <p>\u200b\u7b80\u5355\u200b\u6765\u8bf4\u200b\u5c31\u662f\u200bC++\u200b\u7a0b\u5e8f\u200b\u591a\u200b\u4f7f\u7528\u200b<code>!=</code>\u200b\u800c\u200b\u975e\u200b<code>&lt;</code>\u200b\u6765\u200b\u4f5c\u4e3a\u200bfor\u200b\u5faa\u73af\u200b\u5224\u65ad\u200b\u7684\u200b\u6761\u4ef6\u200b\uff0c\u200b\u539f\u56e0\u200b\u4e3a\u200bC++\u200b\u7a0b\u5e8f\u5458\u200b\u591a\u200b\u4e60\u60ef\u200b\u4f7f\u7528\u200b\u8fed\u4ee3\u200b\u5668\u800c\u975e\u200b\u4e0b\u6807\u200b\uff08\u200b\u5927\u90e8\u5206\u200b\u5bb9\u5668\u200b\u5176\u5b9e\u200b\u6ca1\u6709\u200b\u4e0b\u6807\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u4f46\u200b\u90fd\u200b\u6709\u200b\u8fed\u4ee3\u200b\u5668\u200b\uff09\uff0c\u200b\u800c\u200b\u5927\u90e8\u5206\u200b\u8fed\u4ee3\u200b\u5668\u200b\u5e76\u200b\u4e0d\u200b\u652f\u6301\u200b<code>&lt;</code>\u200b\u8fd0\u7b97\u7b26\u200b\uff0c\u200b\u4f46\u200b\u90fd\u200b\u652f\u6301\u200b<code>!=</code>\u200b\u8fd0\u7b97\u7b26\u200b\u3002</p> <p>\u200b\u5173\u4e8e\u200b<code>begin()</code>\u200b\u548c\u200b<code>end()</code>\u200b\u7684\u200b\u7c7b\u578b\u200b</p> <ul> <li>\u200b\u82e5\u539f\u200b\u5bb9\u5668\u200b\u4e0d\u200b\u542b\u200b<code>const</code>\u200b\u5219\u200b\u8fed\u4ee3\u200b\u5668\u200b\u7c7b\u578b\u200b\u4e5f\u200b\u4e0d\u200b\u542b\u200b</li> <li>\u200b\u5426\u5219\u200b\u8fed\u4ee3\u200b\u4e5f\u200b\u4f1a\u200b\u662f\u200b\u5e26\u200b<code>const</code></li> </ul> C++<pre><code>vecotr&lt;int&gt; v;\nconst vector&lt;int&gt; cv;\nauto it1 = v.begin(); // it1 has type vecotr&lt;int&gt;::iterator\nauto it2 = cv.begin();// it2 has type vecotr&lt;int&gt;::const_iterator\n</code></pre> C11\u200b\u7279\u6027\u200b        \u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bcbegin()\u200b\u548c\u200bcend()\u200b\u66ff\u6362\u200bbegin()\u200b\u548c\u200bend()\u200b\u6765\u200b\u4fdd\u8bc1\u200b\u8fed\u4ee3\u200b\u5668\u200b\u4e00\u5b9a\u200b\u662f\u200bconst\u200b\u4fee\u9970\u200b\u7684\u200b    C++<pre><code>auto it3 = v.cbegin(); // its has tyep vector&lt;int&gt;::const_iterator\n</code></pre> <p>\u200b\u8fed\u4ee3\u200b\u5668\u200b\u548c\u200b<code>.</code>\u200b\u6210\u5458\u200b\u8fd0\u7b97\u7b26\u200b\u7684\u200b\u4f18\u5148\u7ea7\u200b\u95ee\u9898\u200b</p> C++<pre><code>(*it).empty(); // \u200b\u5148\u89e3\u200b\u5f15\u7528\u200b\u518d\u200b\u4f7f\u7528\u200bempty()\n*it.empty(); //\u200b\u5148\u200b\u4f7f\u7528\u200bempty()\u200b\u518d\u89e3\u200b\u5f15\u7528\u200b error\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u7bad\u5934\u200b<code>-&gt;</code>\u200b\u8fd0\u7b97\u7b26\u200b</p> C++<pre><code>for (auto it = text.cbegin(); it != text.cend() &amp;&amp; !it-&gt;empty(); it++)\n    cout &lt;&lt; *it &lt;&lt; endl;\n</code></pre> \u200b\u91cd\u8981\u200b        \u200b\u4efb\u4f55\u200b\u53ef\u80fd\u200b\u6539\u53d8\u200b vector \u200b\u5927\u5c0f\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff08\u200b\u5982\u200b push_back\uff09\u200b\u90fd\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u6307\u5411\u200b\u8be5\u200b vector \u200b\u7684\u200b\u6240\u6709\u200b\u8fed\u4ee3\u200b\u5668\u200b\u5931\u6548\u200b\u3002              \u200b\u5982\u679c\u200b\u5faa\u73af\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u4e86\u200b\u8fed\u4ee3\u200b\u5668\u200b\uff0c\u200b\u5c31\u200b\u7edd\u4e0d\u80fd\u200b\u5411\u200b\u8be5\u200b\u8fed\u4ee3\u200b\u5668\u6240\u200b\u6307\u5411\u200b\u7684\u200b\u5bb9\u5668\u200b\u6dfb\u52a0\u200b\u5143\u7d20\u200b\u3002","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#iterator-arithmetic","title":"Iterator Arithmetic(\u200b\u8fed\u4ee3\u200b\u5668\u200b\u7b97\u672f\u200b)","text":"Operations Supported by vector and string Iterators \ud83d\udca1 \u200b\u8fed\u4ee3\u200b\u5668\u200b\u7684\u200b\u5dee\u200b <p><code>iter1 - iter2</code>\u200b\u5176\u503c\u200b\u7c7b\u578b\u200b\u4e3a\u200b<code>difference_type</code>\u200b\u8868\u9762\u200b\u7684\u200b\u662f\u200b\u7b2c\u4e00\u4e2a\u200b\u8fed\u4ee3\u200b\u5668\u200b\u9700\u8981\u200b\u7ecf\u8fc7\u200b\u591a\u5c11\u200b\u6b21\u200b<code>++</code>\u200b\u6216\u8005\u200b<code>--</code>\u200b\u64cd\u4f5c\u200b\u624d\u80fd\u200b\u8fbe\u5230\u200b\u7b2c\u4e8c\u4e2a\u200b\u8fed\u4ee3\u200b\u5668\u200b</p> <ul> <li><code>difference_type</code>\u200b\u662f\u200b\u6709\u200b\u7b26\u53f7\u200b\u7c7b\u578b\u200b</li> </ul> \ud83d\udcbb \u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b \u200b\u4f7f\u7528\u200b\u8fed\u4ee3\u200b\u5668\u200b\u5b9e\u73b0\u200b\u4e8c\u5206\u200b\u67e5\u627e\u200b C++<pre><code>// text must be sorted\n// beg and end will denote the range we're searching\nauto beg = text.begin(), end = text.end();\nauto mid = text.begin() + (end - beg) / 2;  // original midpoint\n\n// while there are still elements to look at and we haven't yet found 'sought'\nwhile (mid != end &amp;&amp; *mid != sought) {\n    if (sought &lt; *mid) {      // is the element we want in the first half?\n        end = mid;            // if so, adjust the range to ignore the second half\n    } else {                  // the element we want is in the second half\n        beg = mid + 1;        // start looking with the element just after mid\n    }\n    mid = beg + (end - beg) / 2;  // new midpoint\n}\n</code></pre>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#arrays","title":"Arrays(\u200b\u6570\u7ec4\u200b)","text":"<p>\u200b\u6570\u7ec4\u200b\u662f\u4ece\u200b<code>c</code>\u200b\u7ee7\u627f\u200b\u800c\u6765\u200b\u7684\u200b\uff0c\u200b\u6027\u8d28\u200b\u5927\u90e8\u5206\u200b\u76f8\u540c\u200b\u3002</p> \u26a1 \u200b\u63d0\u793a\u200b \u200b\u5982\u679c\u200b\u4e0d\u80fd\u200b\u786e\u5207\u200b\u77e5\u9053\u200b\u8981\u200b\u591a\u5c11\u200b\u5143\u7d20\u200b\uff0c\u200b\u4f7f\u7528\u200bvector","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#defining-and-initializing-built-in-arrays","title":"Defining and Initializing Built-in Arrays","text":"<p>Arrays are a compound type</p> <p>\u200b\u6570\u7ec4\u200b\u4e00\u822c\u200b\u6309\u7167\u200b<code>a[d]</code>\u200b\u7684\u200b\u6837\u5b50\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u5176\u4e2d\u200b<code>a</code>\u200b\u4e3a\u200b\u6570\u7ec4\u200b\u7c7b\u578b\u200b\uff0c<code>d</code>\u200b\u4e3a\u200b\u6570\u7ec4\u200b\u5bb9\u91cf\u200b\u3002\u200b\u6ce8\u610f\u200b<code>d</code>\u200b\u5fc5\u987b\u200b\u662f\u200b\u5f97\u200b\u5728\u200b\u7f16\u8bd1\u200b\u671f\u95f4\u200b\u5c31\u200b\u80fd\u200b\u786e\u5b9a\u200b\u7684\u200b\u5e38\u91cf\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\u5b9e\u73b0\u200b</p> <ul> <li> <p>\u200b\u4f7f\u7528\u200b<code>constexpr</code>\u200b\u5b9a\u4e49\u200b\u53d8\u91cf\u200b\uff0c\u200b\u5f3a\u5236\u200b\u5176\u200b\u5728\u200b\u7f16\u8bd1\u200b\u671f\u200b\u786e\u5b9a\u200b\u503c\u200b   C++<pre><code>constexpr v = 100;\nint arr[v]; // ok\n</code></pre></p> </li> <li> <p>\u200b\u4f7f\u7528\u200b<code>const</code>\u200b\u5e76\u7528\u200b\u5b57\u200b\u9762\u503c\u200b\u521d\u59cb\u5316\u200b\u8be5\u200b\u53d8\u91cf\u200b   C++<pre><code>const int N = 110;\nint arr[N]; // ok\nconst int N1 = rand(); \nint arr1[N1]; // error\n</code></pre></p> </li> </ul> \u274c \u200b\u5b57\u7b26\u200b\u6570\u7ec4\u200b\u521d\u59cb\u5316\u200b\u95ee\u9898\u200b \u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\u5b57\u200b\u9762\u503c\u200b\u521d\u59cb\u5316\u200b\u5b57\u7b26\u200b\u6570\u7ec4\u200b\u5343\u4e07\u200b\u8981\u200b\u8bb0\u5f97\u200b\u6700\u540e\u200b\u7684\u200b\\0\uff0c\u200b\u8fd9\u548c\u7528\u200b\u5176\u200b\u521d\u59cb\u5316\u200bstring\u200b\u4e0d\u200b\u4e00\u6837\u200b C++<pre><code>const char str[6] = \"Daniel\"; // error: no space for the null!\n</code></pre> \u274c \u200b\u4e0d\u200b\u5141\u8bb8\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u590d\u5236\u200b\u7ed9\u200b/\u200b\u8d4b\u503c\u200b\u7ed9\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b C++<pre><code>int a[] = {0, 1, 2};\nint a2[] = a;// error: cannot initialize one array with another\na2 = a; // error: cannot assign one array to another\n</code></pre> \ud83d\udd0d \u200b\u6570\u7ec4\u200b\u3001\u200b\u6307\u9488\u200b\u3001\u200b\u5f15\u7528\u200b \u200b\u901a\u5e38\u200b\u65b9\u6848\u200b\u662f\u4ece\u200b\u6570\u7ec4\u200b\u540d\u5b57\u200b\u5f00\u59cb\u200b\u4ece\u5185\u200b\u5f80\u5916\u200b\u89e3\u8bfb\u200b\u7c7b\u578b\u200b      C++<pre><code>int &amp;refs[10]; // error: no arrays of references\n// \u200b\u6570\u7ec4\u200b\u5185\u200b\u7684\u200b\u5143\u7d20\u200b\u5fc5\u987b\u200b\u662f\u200b\u5bf9\u8c61\u200b\nint *ptrs[10]; // ok: \u200b\u5b58\u653e\u200b\u4e86\u200b10\u200b\u4e2a\u200bint*\u200b\u7684\u200b\u6570\u7ec4\u200b\n// \u200b\u6570\u7ec4\u200b\u672c\u8eab\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u5f15\u7528\u200b\nint (*Parray)[10] = &amp;arr; // ok: \u200b\u6307\u5411\u200b\u4e00\u4e2a\u200b\u5b58\u6709\u200b10\u200b\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200bint\u200b\u6570\u7ec4\u200b\nint (&amp;arrRef)[10] = arr; // ok: \u200b\u5bf9\u200b\u4e00\u4e2a\u200bint\u200b\u6570\u7ec4\u200b\u7684\u200b\u5f15\u7528\u200b \n</code></pre> C++<pre><code>int *(&amp;arry)[10] = ptrs; \n// array ---&gt; \u200b\u540d\u5b57\u200b\n// &amp; ---&gt; \u200b\u5f15\u7528\u200b\n// [10] ---&gt;\u200b\u6570\u7ec4\u200b\n// int * ---&gt;int\u200b\u6307\u9488\u200b\n// \u200b\u7ec4\u5408\u200b\u8d77\u6765\u200b\u5c31\u662f\u200b\uff1aarry\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f15\u7528\u200b\uff0c\u200b\u5bf9\u200b\u4e00\u4e2a\u200b\u5bb9\u91cf\u200b\u4e3a\u200b10\u200b\u7ed9\u200bint *\u200b\u7c7b\u578b\u200b\u7684\u200b\u6570\u7ec4\u200b\u7684\u200b\u5f15\u7528\u200b\u3002\n</code></pre>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#accessing-the-elements-of-array","title":"Accessing the Elements of Array","text":"<ul> <li>\u200b\u652f\u6301\u200b<code>[]</code>\u200b\u8bbf\u95ee\u200b</li> <li>\u200b\u4f46\u200b\u7f16\u8bd1\u5668\u200b\u4e0d\u200b\u4fdd\u8bc1\u200b\u8bbf\u95ee\u200b\u8303\u56f4\u200b\u7684\u200b\u5408\u7406\u6027\u200b\uff0c\u200b\u9700\u8981\u200b\u7a0b\u5e8f\u5458\u200b\u81ea\u5df1\u200b\u4fdd\u8bc1\u200b\uff01</li> <li>\u200b\u652f\u6301\u200b<code>\u200b\u8303\u56f4\u200bfor</code>\u200b\u5faa\u73af\u200b</li> </ul>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#pointers-and-arrays","title":"Pointers and Arrays","text":"<p>C++\u200b\u6bd5\u7adf\u200b\u662f\u4ece\u200bC\u200b\u53d1\u5c55\u200b\u800c\u200b\u6765\u200b\uff0c\u200b\u4e5f\u200b\u7ee7\u627f\u200b\u4e86\u200b\u6307\u9488\u200b\u548c\u200b\u6570\u7ec4\u200b\u7684\u200b\u5173\u7cfb\u200b</p> <ul> <li>\u200b\u6570\u7ec4\u540d\u200b\u4e3a\u200b\u6307\u5411\u200b\u6570\u7ec4\u200b\u9996\u200b\u5143\u7d20\u200b\u7684\u200b\u5730\u5740\u200b</li> </ul> C++<pre><code>string nums = {\"one\", \"two\", \"three\"};\nstring *p1 = &amp;nums[0];\n// \u200b\u4e0e\u200b\u4e0b\u9762\u200b\u662f\u200b\u7b49\u6548\u200b\u7684\u200b\nstring *p2 = nums;\n</code></pre> \ud83d\udd04 \u200b\u6570\u7ec4\u200b\u81ea\u52a8\u200b\u63a8\u5bfc\u200b\u7c7b\u578b\u200b auto\u200b\u548c\u200bdecltype\u200b\u5728\u200b\u5bf9\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u5bf9\u8c61\u200b\u7684\u200b\u7c7b\u578b\u200b\u63a8\u5bfc\u200b\u4e0a\u200b\u7684\u200b\u4e0d\u540c\u200b C++<pre><code>auto sa1(nums); // sa1\u200b\u7684\u200b\u7c7b\u578b\u200b\u662f\u200b string *\ndecltype(nums) sa2; // sa2\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u4e09\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200bstring\u200b\u6570\u7ec4\u200b\n</code></pre> <ul> <li><code>[]</code>\u200b\u64cd\u4f5c\u200b\u672c\u8d28\u200b\u662f\u200b\u6307\u9488\u200b\u8fd0\u7b97\u200b</li> <li>\u200b\u5373\u200b\u662f\u200b\u6307\u9488\u200b\u8fd0\u7b97\u200b\u7684\u200b\u8bed\u6cd5\u200b\u7cd6\u200b\u7f62\u4e86\u200b</li> </ul> C++<pre><code>string one = nums[0];\n// \u200b\u7b49\u4ef7\u200b\u4e8e\u200b\nstring one = *(nums);\nstring two = nums[1];\n//\u200b\u7b49\u4ef7\u200b\u4e8e\u200b\nstring tow = *(nums + 1);\n</code></pre> \ud83d\udd04 C11 \u200b\u5f15\u5165\u200b\u4e86\u200bbegin()\u200b\u548c\u200bend()\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b C++<pre><code>int ia[] = {0,1,2,3,4,5,6,7,8,9}; // ia is an array of ten ints \nint *beg = begin(ia); // pointer to the first element in ia \nint *last = end(ia); // pointer one past the last element in ia\n</code></pre> <p>\u200b\u548c\u200b\u8fed\u4ee3\u200b\u5668\u200b\u7684\u200b<code>begin()</code>\u200b\u548c\u200b<code>end()</code>\u200b\u884c\u4e3a\u200b\u4e00\u81f4\u200b\uff0c<code>begin()</code>\u200b\u8fd4\u56de\u200b\u6307\u5411\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u6307\u9488\u200b\uff0c<code>end()</code>\u200b\u8fd4\u56de\u200b\u6307\u5411\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u6307\u9488\u200b\u3002</p> \ud83d\udca1 \u200b\u63d0\u793a\u200b \u200b\u6570\u7ec4\u200b\u7684\u200b\u7d22\u5f15\u200b\u53ef\u4ee5\u200b\u662f\u200b\u8d1f\u6570\u200b\uff0c\u200b\u800c\u200bvector\u200b\u548c\u200bstring\u200b\u4e0d\u200b\u53ef\u4ee5\u200b C++<pre><code>int *p = &amp;ia[2]; // p points to the element indexed by 2 \nint j = p[1]; // p[1] is equivalent to *(p + 1), \n             // p[1] is the same element as ia[3] \nint k = p[-2]; // p[-2] is the same element as ia[0]\n</code></pre> <p>\u200b\u539f\u56e0\u200b\u5728\u4e8e\u200b\u6570\u7ec4\u200b\u7684\u200b\u4e0b\u6807\u200b\u5143\u7d20\u200b\u662f\u200b\u6307\u9488\u200b\u8fd0\u7b97\u200b\uff0c\u200b\u5176\u200b\u7531\u200bC++\u200b\u51b3\u5b9a\u200b\uff0c\u200b\u800c\u200b<code>vector</code>\u200b\u548c\u200b<code>string</code>\u200b\u7531\u200b\u5176\u5e93\u200b\u51b3\u5b9a\u200b\uff0c\u200b\u800c\u200b\u5e93\u5185\u200b\u89c4\u5b9a\u200b\u4e86\u200b\u7d22\u5f15\u200b\u5fc5\u987b\u200b\u662f\u975e\u200b\u8d1f\u6570\u200b\u3002</p>","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#interfacing-to-older-code","title":"Interfacing to Older Code","text":"<p>\u200b\u4efb\u4f55\u200b\u4ee5\u200b<code>\\0</code>\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u5b57\u7b26\u200b\u6570\u7ec4\u200b\uff0c\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5f53\u4f5c\u200b\u5b57\u7b26\u4e32\u200b\u5b57\u200b\u9762\u503c\u200b\u4f7f\u7528\u200b</p> <ul> <li>\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8be5\u200b\u6570\u7ec4\u200b\u521d\u59cb\u5316\u200bstring</li> <li>\u200b\u53ef\u4ee5\u200b\u4f5c\u4e3a\u200b\u64cd\u4f5c\u6570\u200b\u4e0e\u200bstring\u200b\u8fdb\u884c\u200b\u52a0\u51cf\u200b\u64cd\u4f5c\u200b</li> </ul> <p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b<code>c_str()</code>\u200b\u51fd\u6570\u200b\u5c06\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b<code>string</code>\u200b\u7684\u200b<code>C-style</code>\u200b\u98ce\u683c\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u4f46\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u5176\u6709\u200b\u5982\u4e0b\u200b\u6ce8\u610f\u4e8b\u9879\u200b</p> <ul> <li>\u200b\u8fd4\u56de\u200b\u7684\u200b\u7c7b\u578b\u200b\u4e3a\u200b<code>const char *</code></li> <li>\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8be5\u200b\u6307\u9488\u200b\u4fee\u6539\u200b<code>string</code>\u200b\u7684\u200b\u5185\u5bb9\u200b</li> <li>\u200b\u5982\u679c\u200b<code>string</code>\u200b\u5185\u5bb9\u200b\u53d1\u751f\u200b\u4fee\u6539\u200b\uff0c\u200b\u8be5\u200b\u6307\u9488\u200b\u5c06\u4f1a\u200b\u65e0\u6548\u200b</li> </ul> <p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200barray\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200bvector</p> <p>\u200b\u4f7f\u7528\u200b<code>begin()</code>\u200b\u548c\u200b<code>end()</code>\u200b\u4e24\u4e2a\u200b\u6307\u9488\u200b\u786e\u5b9a\u200barray\u200b\u7684\u200b\u6709\u6548\u200b\u8303\u56f4\u200b</p> C++<pre><code>int int_arr[] = {0, 1, 2, 3, 4, 5};  \n// ivec has six elements; each is a copy of the corresponding element in \nint_arr vector&lt;int&gt; ivec(begin(int_arr), end(int_arr));\n</code></pre> <p>\u200b\u5f53\u7136\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u6309\u200b\u5982\u4e0b\u200b\u65b9\u6cd5\u200b\u4f7f\u7528\u200b\u6570\u7ec4\u200b\u7684\u200b\u67d0\u200b\u4e00\u90e8\u5206\u200b\u521d\u59cb\u5316\u200bvector</p> C++<pre><code>// copies three elements: int_arr[1], int_arr[2], int_arr[3] \nvector&lt;int&gt; subVec(int_arr + 1, int_arr + 4);\n</code></pre> \ud83d\udd39 \u200b\u98ce\u683c\u200b\u5efa\u8bae\u200b \u200b\u73b0\u4ee3\u200bc++\u200b\u7a0b\u5e8f\u5458\u200b\u4e0d\u200b\u5e94\u8be5\u200b\u4f7f\u7528\u200bC-style\u200b\u7684\u200b\u6570\u7ec4\u200b\u800c\u200b\u5e94\u8be5\u200b\u4f7f\u7528\u200bstring,\u200b\u4e0d\u200b\u5e94\u8be5\u200b\u4f7f\u7528\u200b\u539f\u751f\u200b\u6570\u7ec4\u200b\u548c\u200b\u6307\u9488\u200b\u800c\u200b\u5e94\u8be5\u200b\u4f7f\u7528\u200bvector\u200b\u548c\u200b\u8fed\u4ee3\u200b\u5668","tags":["C++"]},{"location":"note/C%2B%2B%20Language/Strings%20Vectors%20and%20Arrays/#multidimensional-arrays","title":"Multidimensional Arrays(\u200b\u591a\u7ef4\u200b\u6570\u7ec4\u200b)","text":"<p>\u200b\u5e76\u200b\u6ca1\u6709\u200b\u5565\u200b\u591a\u7ef4\u200b\u6570\u7ec4\u200b\uff0c\u200b\u6709\u200b\u7684\u200b\u53ea\u6709\u200b\u6570\u7ec4\u200b\u5d4c\u5957\u200b\u3002</p> \ud83d\udca1 \u200b\u63d0\u793a\u200b \u200b\u8303\u56f4\u200bfor\u200b\u5faa\u73af\u200b\u7684\u200b&amp; \u200b\u5faa\u73af\u200b\u5c42\u7ea7\u200b \u200b\u63a7\u5236\u53d8\u91cf\u200b\u7c7b\u578b\u200b \u200b\u539f\u56e0\u200b \u200b\u6700\u200b\u5916\u5c42\u200b \u200b\u5f15\u7528\u200b\uff08<code>auto &amp;</code>\uff09 \u200b\u907f\u514d\u200b\u5916\u5c42\u200b\u6570\u7ec4\u200b\u9000\u5316\u200b\u4e3a\u200b\u6307\u9488\u200b\u3002 \u200b\u4e2d\u95f4\u5c42\u200b\uff08\u200b\u5982\u200b\u6709\u200b\uff09 \u200b\u5f15\u7528\u200b\uff08<code>auto &amp;</code>\uff09 \u200b\u4fdd\u6301\u200b\u5d4c\u5957\u200b\u6570\u7ec4\u200b\u7ed3\u6784\u200b\uff0c\u200b\u786e\u4fdd\u200b\u5185\u5c42\u200b\u53ef\u200b\u904d\u5386\u200b\u3002 \u200b\u6700\u200b\u5185\u5c42\u200b \u200b\u53ef\u200b\u5f15\u7528\u200b\u6216\u503c\u200b\uff08<code>auto</code>\uff09 \u200b\u6700\u200b\u5185\u5c42\u200b\u662f\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b<code>int</code>\uff09\uff0c\u200b\u662f\u5426\u200b\u5f15\u7528\u200b\u53d6\u51b3\u4e8e\u200b\u662f\u5426\u200b\u9700\u8981\u200b\u4fee\u6539\u200b\u5143\u7d20\u200b\u3002 C++<pre><code>int cube[2][3][4];\nfor (auto &amp;layer : cube)       // \u200b\u5f15\u7528\u200b\uff1a\u200b\u907f\u514d\u200b\u9000\u5316\u200b\u4e3a\u200bint(*)[3][4]\n    for (auto &amp;row : layer)    // \u200b\u5f15\u7528\u200b\uff1a\u200b\u907f\u514d\u200b\u9000\u5316\u200b\u4e3a\u200bint*\n        for (auto &amp;elem : row) // \u200b\u53ef\u200b\u5f15\u7528\u200b\u6216\u503c\u200b\uff08int&amp;\u200b\u6216\u200bint\uff09\n            elem = 0;          // \u200b\u4fee\u6539\u200b\u5143\u7d20\u200b\n</code></pre> <p>\u200b\u4f46\u200b\u5982\u4e0b\u200b\u4ee3\u7801\u200b\u5c31\u200b\u9519\u8bef\u200b\u4e86\u200b</p> C++<pre><code>for (auto row : ia) // row\u200b\u9000\u5316\u200b\u4e3a\u200bint*\n    for (auto col : row) // \u200b\u975e\u6cd5\u200b\uff1aint*\u200b\u4e0d\u80fd\u200b\u7528\u4e8e\u200b\u8303\u56f4\u200bfor\n</code></pre>","tags":["C++"]},{"location":"note/Machine%20Learning/Linear-model/","title":"Chapter 3 \u200b\u7ebf\u6027\u200b\u6a21\u578b","text":"<p>\u200b\u7ebf\u6027\u200b\u6a21\u578b\u200b\u7684\u200b\u57fa\u672c\u200b\u6837\u5f0f\u200b\u4e0e\u200b\u5411\u91cf\u200b\u5f62\u5f0f\u200b</p> \\[ \\begin{align*} \\text{\u200b\u57fa\u672c\u200b\u5f62\u5f0f\u200b} &amp;: f(\\textbf{x})=w_1x_1+w_2x_2+\\dots+w_dx_d+b \\\\ \\text{\u200b\u5411\u91cf\u200b\u5f62\u5f0f\u200b} &amp;: f(\\textbf{x})=\\textbf{w}^{T}\\textbf{x}+b \\end{align*} \\]","tags":["\u673a\u5668\u5b66\u4e60"]},{"location":"note/Machine%20Learning/Linear-model/#linear-regression","title":"\u7ebf\u6027\u200b\u56de\u5f52\u200b(Linear regression)","text":"<p>\u200b\u7ebf\u6027\u200b\u56de\u5f52\u200b\u7684\u200b\u76ee\u7684\u200b</p> <p>\u200b\u7ebf\u6027\u200b\u56de\u5f52\u200b\u7684\u200b\u76ee\u7684\u200b\u4e3a\u200b\u8bd5\u56fe\u200b\u5b66\u4e60\u200b\u4e00\u4e2a\u200b\u7ebf\u6027\u200b\u6a21\u578b\u200b\u4ee5\u200b\u5c3d\u53ef\u80fd\u200b\u51c6\u786e\u200b\u5730\u200b\u9884\u6d4b\u200b\u5b9e\u9645\u200b\u503c\u200b\u7684\u200b\u8f93\u51fa\u200b</p> <p>\\(f(x_i)=wx_i+b\\ \\ \u200b\u4f7f\u5f97\u200bf(x_i)\\approx y_i\\)</p> <p>\u200b\u6c42\u89e3\u200b\u6a21\u578b\u200b</p> <p>\u200b\u57fa\u4e8e\u200b\u5747\u65b9\u200b\u8bef\u5dee\u200b\u6700\u5c0f\u5316\u200b\u6c42\u89e3\u200b\u6a21\u578b\u200b\u7684\u200b\u65b9\u6cd5\u200b\u79f0\u4e3a\u200b\u6700\u5c0f\u200b\u4e8c\u200b\u4e58\u6cd5\u200b</p> \\[ \\begin{align*} (w^*,b^*) &amp;=\\arg_{(w,b)}\\min\\sum_{i=1}^m(f(x_i)-y_i)^2 \\\\ &amp;=\\arg_{(w,b)}\\min\\sum_{i=1}^m(y_i-wx_i-b)^2 \\\\ \\end{align*} \\] <p>\u200b\u5747\u200b\u65b9\u6839\u200b\u8bef\u5dee\u200b\u7684\u200b\u51e0\u4f55\u200b\u610f\u4e49\u200b\uff1a\u200b\u5bf9\u5e94\u200b\u4e86\u200b\u5e38\u7528\u200b\u7684\u200b\u6b27\u51e0\u91cc\u5fb7\u200b\u8ddd\u79bb\u200b </p> <p>\u200b\u6559\u6750\u200b\u5dee\u5f02\u200b</p> <p>\u200b\u8fd9\u200b\u672c\u4e66\u200b\u91c7\u7528\u200b\u7684\u200b\u51f8\u51fd\u6570\u200b\u5b9a\u4e49\u200b\u4e0e\u200b\u540c\u6d4e\u200b\u5b9a\u4e49\u200b\u7684\u200b\u51f8\u51fd\u6570\u200b\u76f8\u53cd\u200b\uff0c\\(x^2\\)\u200b\u4e3a\u200b\u51f8\u51fd\u6570\u200b\u800c\u200b\u975e\u200b\u51f9\u200b\u51fd\u6570\u200b</p> <p>\u200b\u53c2\u6570\u4f30\u8ba1\u200b:\u200b\u6c42\u89e3\u200b\u53c2\u6570\u200b<code>w*</code>\u200b\u548c\u200b<code>b*</code>\u200b\u4f7f\u5f97\u200b \\(\\sum_{i=1}^m(y_i - w x_i - b)^2\\) \u200b\u6700\u5c0f\u200b\uff0c\u200b\u5176\u200b\u8fc7\u7a0b\u200b\u5982\u4e0b\u200b </p> \\[ \\begin{align*} \\frac{\\partial{E}_{(w,b)}}{\\partial{w}}=2(w\\sum_{i=1}^mx_i^2-\\sum_{i=1}^m(y_i-b)x_i) \\\\ \\frac{\\partial{E}_{(w,b)}}{\\partial{b}}=2(mb-\\sum_{i=1}^m(y_i-wx_i)) \\end{align*} \\] <p>\u200b\u51f8\u51fd\u6570\u200b\u7684\u200b\u6027\u8d28\u200b</p> <p>\u200b\u51fd\u6570\u200b \\(f: \\mathbb{R}^n \\to \\mathbb{R}\\)\u200b\u662f\u200b\u51f8\u51fd\u6570\u200b\uff0c\u200b\u5982\u679c\u200b\u5bf9\u200b\u4efb\u610f\u200b \\(\\mathbf{x}, \\mathbf{y} \\in \\mathbb{R}^n \\) \u200b\u548c\u200b \\( \\theta \\in [0, 1] \\)\uff0c\u200b\u6ee1\u8db3\u200b\uff1a</p> \\[ \\begin{align*} f(\\theta \\mathbf{x} + (1-\\theta) \\mathbf{y}) \\leq \\theta f(\\mathbf{x}) + (1-\\theta) f(\\mathbf{y}) \\end{align*} \\] <p>\u200b\u76f4\u89c2\u200b\u4e0a\u200b\uff0c\u200b\u8fde\u63a5\u200b\u51fd\u6570\u200b\u56fe\u50cf\u200b\u4e0a\u200b\u4efb\u610f\u200b\u4e24\u70b9\u200b\u7684\u200b\u7ebf\u6bb5\u200b\u4f4d\u4e8e\u200b\u51fd\u6570\u200b\u56fe\u50cf\u200b\u4e0a\u65b9\u200b\u3002</p> <p>\u200b\u82e5\u200b\\(f\\)\u200b\u53ef\u5fae\u200b\uff0c\u200b\u5219\u200b\\(f\\)\u200b\u662f\u200b\u51f8\u51fd\u6570\u200b\u7684\u200b\u5145\u8981\u6761\u4ef6\u200b\u662f\u200b\uff1a</p> \\[ \\begin{align*} f(\\mathbf{y}) \\geq f(\\mathbf{x}) + \\nabla f(\\mathbf{x})^\\top (\\mathbf{y} - \\mathbf{x}), \\quad \\forall \\mathbf{x}, \\mathbf{y}. \\end{align*} \\] <ul> <li>\u200b\u975e\u200b\u51f8\u51fd\u6570\u200b\uff1a\u200b\u68af\u5ea6\u200b\u4e3a\u200b\u96f6\u200b\u53ef\u80fd\u200b\u662f\u200b\u978d\u70b9\u200b\u6216\u200b\u5c40\u90e8\u200b\u6781\u503c\u200b\uff08\u200b\u5982\u200b \\(f(x) = x^3\\) \u200b\u5728\u200b \\(x=0\\) \u200b\u5904\u200b\uff09\u3002</li> <li>\u200b\u4e25\u683c\u200b\u51f8\u51fd\u6570\u200b\uff1a\u200b\u82e5\u200b $f$ \u200b\u4e25\u683c\u51f8\u200b\uff0c\u200b\u68af\u5ea6\u200b\u4e3a\u200b\u96f6\u200b\u7684\u200b\u70b9\u200b\u662f\u200b\u552f\u4e00\u200b\u7684\u200b\u5168\u5c40\u200b\u6700\u5c0f\u503c\u200b\u3002</li> </ul> <p>\u200b\u57fa\u4e8e\u200b\u4e0a\u8ff0\u200b\u7406\u8bba\u200b\uff0c\u200b\u6c42\u89e3\u200b\u53c2\u6570\u200b\\(w^*\\)\u200b\u548c\u200b\\(b^*\\)\u200b\u53ea\u200b\u9700\u8981\u200b\u4ee4\u200b\u4e0a\u9762\u200b\u7684\u200b\u5f0f\u5b50\u200b\u4e3a\u200b\u96f6\u200b\u5373\u53ef\u200b----&gt; \u200b\u6700\u4f18\u200b\u89e3\u200b\u7684\u200b\u95ed\u5f0f\u200b(closed-form)\u200b\u89e3\u200b</p> <p>\u200b\u5148\u89e3\u200b\u5173\u4e8e\u200b<code>b</code>\u200b\u7684\u200b\u5f0f\u5b50\u200b </p> \\[ \\begin{align*} 2(mb-\\sum_{i=1}^m(y_i-wx_i))=0 \\\\ b^*=\\frac{1}{m}\\sum_{i=1}^m(y_i-wx_i) \\end{align*} \\] <p>\u200b\u5728\u200b\u8ba1\u7b97\u200b\u5173\u4e8e\u200b<code>w</code>\u200b\u7684\u200b\u5f0f\u5b50\u200b</p> \\[ \\begin{align*} 2(w\\sum_{i=1}^mx_i^2-\\sum_{i=1}^m(y_i-b)x_i)=0 \\\\ w\\sum_{i=1}^mx_i^2=\\sum_{i=1}^m(y_i-b)x_i \\\\ w=\\frac{\\sum_{i=1}^m(y_i-b)x_i}{\\sum_{i=1}^mx_i^2}  \\end{align*} \\] <p>\u200b\u5c06\u200b\u4e0a\u9762\u200b\u6c42\u5f97\u200b\u7684\u200b<code>b*</code>\u200b\u5e26\u5165\u200b\u5373\u53ef\u200b\u6c42\u200b\u51fa\u200b<code>w*</code></p> <p>TO-DO-List \u200b\u8fd9\u91cc\u200b\u6ca1\u200b\u63a8\u5b8c\u200b</p>","tags":["\u673a\u5668\u5b66\u4e60"]}]}