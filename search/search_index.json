{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\\u3001\\u3002\\uFF0C\\uFF0E\\uFF1F\\uFF01\\uFF1B]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p> \u200b\u5bfc\u822a\u200b\u680f\u200b</p> <p></p> <ul> <li> \u200b\u57fa\u4e8e\u200bMaterial for MkDocs\u200b\u7f8e\u5316\u200b</li> <li> \u200b\u5982\u9047\u200b\u9875\u9762\u200b\u5361\u987f\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b\u79d1\u5b66\u200b\u4e0a\u7f51\u200b</li> <li> <p> \ud835\udd59\ud835\udd52\ud835\udd67\ud835\udd56 \ud835\udd52 \ud835\udd58\ud835\udd60\ud835\udd60\ud835\udd55 \ud835\udd65\ud835\udd5a\ud835\udd5e\ud835\udd56 !   === \"Mac/PC\u200b\u7aef\u200b\"</p> <p>\u200b\u8bf7\u200b\u5728\u200b\u4e0a\u65b9\u200b\u6807\u7b7e\u200b\u9009\u62e9\u200b\u5206\u7c7b\u200b/\u200b\u5de6\u4fa7\u200b\u76ee\u5f55\u200b\u9009\u62e9\u200b\u6587\u7ae0\u200b</p> </li> </ul> \u200b\u79fb\u52a8\u200b\u7aef\u200b <p>\u200b\u8bf7\u200b\u70b9\u51fb\u200b\u5de6\u4e0a\u89d2\u200b\u56fe\u6807\u200b\u9009\u62e9\u200b\u5206\u7c7b\u200b\u548c\u200b\u6587\u7ae0\u200b</p> </li> </ul> <ol> <li> <p>\u200b\u4eba\u200b\u751f\u957f\u200b\u6068\u200b\u6c34\u957f\u4e1c\u200b\u00a0\u21a9</p> </li> <li> <p>All-problems-in-computer-science-can-be-solved-by-another-level-of-indirection\u00a0\u21a9</p> </li> </ol>"},{"location":"tag/","title":"\u5206\u7c7b","text":""},{"location":"tag/#tags","title":"Tags","text":""},{"location":"tag/#tag:ai","title":"AI","text":"<ul> <li>            Games          </li> </ul>"},{"location":"tag/#tag:algorithm","title":"Algorithm","text":"<ul> <li>            ListQuestions          </li> <li>            N\u200b\u7687\u540e\u200b\u95ee\u9898\u200b--\u200b\u91cd\u70b9\u200b\u5728\u4e8e\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u95ee\u9898\u200b          </li> <li>            \u200b\u4e8c\u5206\u200b\u7b54\u6848\u200b\u6cd5\u200b(\u203c\ufe0f\u200b\u91cd\u8981\u200b\u6280\u5de7\u200b)          </li> <li>            \u200b\u4e8c\u53c9\u6811\u200b          </li> <li>            \u200b\u524d\u7f00\u200b\u6811\u200b\uff08\u200b\u5b57\u5178\u200b\u6811\u200b\uff09          </li> <li>            \u200b\u5355\u8c03\u200b\u6808\u200b\u4e0e\u200b\u76f8\u5173\u200b\u4e60\u9898\u200b          </li> <li>            \u200b\u5355\u8c03\u200b\u961f\u5217\u200b          </li> <li>            \u200b\u5929\u5b57\u7b2c\u4e00\u53f7\u200b\u6280\u5de7\u200b-\u200b\u901a\u8fc7\u200b\u6570\u636e\u91cf\u200b\u63a8\u6d4b\u200b\u89e3\u6cd5\u200b          </li> <li>            \u200b\u5bf9\u6570\u200b\u5668\u200b\u6253\u8868\u200b\u627e\u200b\u89c4\u5f8b\u200b\u6280\u5de7\u200b          </li> <li>            \u200b\u5dee\u5206\u200b          </li> <li>            \u200b\u5e38\u89c1\u200b\u9012\u5f52\u200b\u95ee\u9898\u200b          </li> <li>            \u200b\u5e76\u200b\u67e5\u96c6\u200b(\u200b\u4e0d\u200b\u76f8\u4ea4\u200b\u96c6\u200b)          </li> <li>            \u200b\u6570\u636e\u7ed3\u6784\u200b\u8bbe\u8ba1\u200b\u4e60\u9898\u200b          </li> <li>            \u200b\u6700\u5927\u516c\u7ea6\u6570\u200b\u95ee\u9898\u200b\u548c\u200b\u540c\u4f59\u200b\u539f\u7406\u200b          </li> <li>            \u200b\u6784\u5efa\u200b\u524d\u7f00\u200b\u4fe1\u606f\u200b\u7684\u200b\u6280\u5de7\u200b-\u200b\u89e3\u51b3\u200b\u5b50\u200b\u6570\u7ec4\u200b\u76f8\u5173\u200b\u95ee\u9898\u200b          </li> <li>            \u200b\u6d2a\u6c34\u200b\u586b\u5145\u200b\u7b97\u6cd5\u200b          </li> <li>            \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u4e0e\u200b\u76f8\u5173\u200b\u4e60\u9898\u200b          </li> </ul>"},{"location":"tag/#tag:c-primer","title":"C++ Primer","text":"<ul> <li>            Class          </li> <li>            Expressions          </li> <li>            Function          </li> <li>            Statement          </li> <li>            Strings Vectors and Arrays          </li> </ul>"},{"location":"tag/#tag:cmake","title":"CMake","text":"<ul> <li>            CMake Tutorial          </li> </ul>"},{"location":"tag/#tag:cs168","title":"CS168","text":"<ul> <li>            Application          </li> <li>            Beyond Client-Server          </li> <li>            Datacenters          </li> <li>            Discussion          </li> <li>            End-to-End          </li> <li>            Introduction to the Internet          </li> <li>            Project          </li> <li>            Routing          </li> <li>            Special Topics          </li> <li>            Transport          </li> </ul>"},{"location":"tag/#tag:cs188","title":"CS188","text":"<ul> <li>            Bayes Nets          </li> <li>            Decision Networks and VPIs          </li> <li>            Discussion          </li> <li>            GSPs          </li> <li>            Games          </li> <li>            HMMs          </li> <li>            Introduction to Artificial Intelligence          </li> <li>            MDPs          </li> <li>            ML          </li> <li>            RL          </li> <li>            Search          </li> </ul>"},{"location":"tag/#tag:cs61a","title":"CS61A","text":"<ul> <li>            Projects          </li> <li>            Week 1          </li> <li>            Week 2          </li> <li>            Week 3          </li> <li>            Week 4          </li> <li>            Week 5          </li> <li>            Week 6          </li> <li>            Week 7          </li> </ul>"},{"location":"tag/#tag:cs61b","title":"CS61B","text":"<ul> <li>            Discussion          </li> <li>            Labs          </li> <li>            Projects          </li> <li>            Week 1          </li> <li>            Week 11          </li> <li>            Week 12          </li> <li>            Week 13          </li> <li>            Week 14          </li> <li>            Week 15          </li> <li>            Week 2          </li> <li>            Week 3          </li> <li>            Week 4          </li> <li>            Week 5          </li> <li>            Week 6          </li> <li>            Week 7          </li> <li>            Week 8          </li> <li>            Week 9          </li> </ul>"},{"location":"tag/#tag:cs61c","title":"CS61C","text":"<ul> <li>            CS61C Discussion          </li> <li>            CS61C Labs          </li> <li>            CS61C Projects          </li> <li>            Week 11          </li> <li>            Week 12          </li> <li>            Week 13          </li> <li>            Week 14          </li> <li>            Week 15          </li> <li>            Week 2          </li> <li>            Week 3          </li> <li>            Week 4          </li> <li>            Week 5          </li> <li>            Week 6          </li> <li>            Week 7          </li> <li>            Week 8          </li> <li>            Week 9          </li> <li>            Weeks 1          </li> </ul>"},{"location":"tag/#tag:cs70","title":"CS70","text":"<ul> <li>            Discussion          </li> <li>            Homeworks          </li> <li>            Week 0          </li> <li>            Week 1          </li> </ul>"},{"location":"tag/#tag:nju-\u7f16\u8bd1\u539f\u7406","title":"NJU \u200b\u7f16\u8bd1\u200b\u539f\u7406","text":"<ul> <li>            Overview          </li> </ul>"},{"location":"tag/#tag:operating-system-internals-and-design","title":"Operating System Internals and Design","text":"<ul> <li>            \u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u6982\u8ff0\u200b          </li> <li>            \u200b\u8ba1\u7b97\u673a\u7cfb\u7edf\u200b\u6982\u8ff0\u200b          </li> <li>            \u200b\u8fdb\u7a0b\u200b\u63cf\u8ff0\u200b\u548c\u200b\u63a7\u5236\u200b          </li> </ul>"},{"location":"tag/#tag:tips","title":"Tips","text":"<ul> <li>            \u200b\u4e8c\u5206\u200b\u7b54\u6848\u200b\u6cd5\u200b(\u203c\ufe0f\u200b\u91cd\u8981\u200b\u6280\u5de7\u200b)          </li> <li>            \u200b\u5929\u5b57\u7b2c\u4e00\u53f7\u200b\u6280\u5de7\u200b-\u200b\u901a\u8fc7\u200b\u6570\u636e\u91cf\u200b\u63a8\u6d4b\u200b\u89e3\u6cd5\u200b          </li> <li>            \u200b\u5bf9\u6570\u200b\u5668\u200b\u6253\u8868\u200b\u627e\u200b\u89c4\u5f8b\u200b\u6280\u5de7\u200b          </li> </ul>"},{"location":"tag/#tag:compete","title":"compete","text":"<ul> <li>            2025-6-12(Div 2)          </li> <li>            leetcode\u200b\u5468\u8d5b\u200b 454          </li> </ul>"},{"location":"tag/#tag:makefile","title":"makefile","text":"<ul> <li>            Makefile          </li> </ul>"},{"location":"tag/#tag:\u6742\u8c08","title":"\u6742\u8c08","text":"<ul> <li>            CMake Tutorial          </li> <li>            Makefile          </li> <li>            \u200b\u5e38\u7528\u200bvscode\u200b\u5feb\u6377\u952e\u200b          </li> </ul>"},{"location":"tag/#tag:\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60","title":"\u674e\u5b8f\u6bc5\u200b-\u200b\u673a\u5668\u200b\u5b66\u4e60","text":"<ul> <li>            \u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5\u200b          </li> </ul>"},{"location":"tag/#tag:\u7ebf\u6027\u4ee3\u6570\u5165\u95e8","title":"\u7ebf\u6027\u4ee3\u6570\u200b\u5165\u95e8","text":"<ul> <li>            \u200b\u7ebf\u6027\u200b\u6620\u5c04\u200b\u4e0e\u200b\u77e9\u9635\u200b          </li> </ul>"},{"location":"tag/#tag:\u8003\u7814\u653f\u6cbb","title":"\u8003\u7814\u200b\u653f\u6cbb","text":"<ul> <li>            \u200b\u653f\u6cbb\u200b\u77e5\u8bc6\u70b9\u200b          </li> <li>            \u200b\u9519\u9898\u200b\u672c\u200b          </li> </ul>"},{"location":"tag/#tag:\u8003\u7814\u82f1\u8bed","title":"\u8003\u7814\u200b\u82f1\u8bed","text":"<ul> <li>            \u200b\u5386\u5e74\u200b\u771f\u9898\u200b\u7cbe\u8bfb\u200b\u7b14\u8bb0\u200b          </li> </ul>"},{"location":"CS/Algorithm/Beginner/Binary%20Search%20on%20Answer/","title":"\u4e8c\u5206\u200b\u7b54\u6848\u200b\u6cd5\u200b(\u203c\ufe0f\u200b\u91cd\u8981\u200b\u6280\u5de7\u200b)","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u5728\u200b\u89e3\u51b3\u200b\u6700\u4f18\u5316\u200b\u95ee\u9898\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e38\u5e38\u200b\u9700\u8981\u200b\u5728\u200b\u6ee1\u8db3\u200b\u7279\u5b9a\u200b\u7ea6\u675f\u200b\u7684\u200b\u6761\u4ef6\u200b\u4e0b\u200b\uff0c\u200b\u5bfb\u627e\u200b\u6700\u5927\u200b\u6216\u200b\u6700\u5c0f\u200b\u7684\u200b\u53ef\u884c\u200b\u89e3\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <ul> <li> <p>\u200b\u5982\u4f55\u200b\u6700\u5c0f\u5316\u200b\u5b8c\u6210\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u7684\u200b\u6700\u5927\u200b\u8017\u65f6\u200b\uff1f</p> </li> <li> <p>\u200b\u5982\u4f55\u200b\u6700\u5927\u5316\u200b\u5728\u200b\u8d44\u6e90\u200b\u9650\u5236\u200b\u4e0b\u200b\u7684\u200b\u6700\u5c0f\u200b\u6536\u76ca\u200b\uff1f</p> </li> </ul> <p>\u200b\u8fd9\u200b\u7c7b\u200b\u95ee\u9898\u200b\u7684\u200b\u89e3\u200b\u901a\u5e38\u200b\u5177\u6709\u200b\u5355\u8c03\u200b\u6027\u200b\u2014\u2014\u200b\u5373\u200b\u5982\u679c\u200b\u67d0\u4e2a\u200b\u503c\u200b x \u200b\u53ef\u884c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6240\u6709\u200b\u5927\u4e8e\u200b\uff08\u200b\u6216\u200b\u5c0f\u4e8e\u200b\uff09x \u200b\u7684\u200b\u503c\u200b\u4e5f\u200b\u4e00\u5b9a\u200b\u53ef\u884c\u200b\uff08\u200b\u6216\u200b\u4e0d\u200b\u53ef\u884c\u200b\uff09\u3002\u200b\u4e8c\u5206\u200b\u7b54\u6848\u200b\u6cd5\u200b\uff08Binary Search on Answer\uff09 \u200b\u6b63\u662f\u200b\u5229\u7528\u200b\u8fd9\u4e00\u200b\u7279\u6027\u200b\uff0c\u200b\u5c06\u200b\u6c42\u89e3\u200b\u95ee\u9898\u200b\u8f6c\u5316\u200b\u4e3a\u200b\u9a8c\u8bc1\u200b\u95ee\u9898\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e8c\u5206\u200b\u641c\u7d22\u200b\u5feb\u901f\u200b\u903c\u8fd1\u200b\u6700\u4f18\u200b\u89e3\u200b\uff0c\u200b\u5c06\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4ece\u200b O(n) \u200b\u6216\u200b\u66f4\u200b\u9ad8\u200b \u200b\u4f18\u5316\u200b\u81f3\u200b O(log N)\uff0c\u200b\u6210\u4e3a\u200b\u5904\u7406\u200b\u6700\u4f18\u5316\u200b\u95ee\u9898\u200b\u7684\u200b\u9ad8\u6548\u200b\u7b97\u6cd5\u200b\u8303\u5f0f\u200b\u3002</p>","tags":["Algorithm","Tips"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/","title":"\u4e8c\u53c9\u6811","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u5728\u200b\u8ba1\u7b97\u673a\u79d1\u5b66\u200b\u9886\u57df\u200b\uff0c\u200b\u4e8c\u53c9\u6811\u200b\uff08Binary Tree\uff09 \u200b\u662f\u200b\u6700\u200b\u57fa\u7840\u200b\u4e14\u200b\u5f3a\u5927\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u4e4b\u4e00\u200b\u3002\u200b\u5b83\u200b\u4ee5\u200b\u5c42\u6b21\u5316\u200b\u5206\u652f\u200b\u7ed3\u6784\u200b\u6a21\u62df\u200b\u4e86\u200b\u73b0\u5b9e\u200b\u4e16\u754c\u200b\u4e2d\u200b\u5927\u91cf\u200b\u5b58\u5728\u200b\u7684\u200b\u5206\u6cbb\u200b\u5173\u7cfb\u200b\uff0c\u200b\u6210\u4e3a\u200b\u7b97\u6cd5\u200b\u8bbe\u8ba1\u200b\u4e2d\u200b\u9012\u5f52\u200b\u601d\u7ef4\u200b\u7684\u200b\u5b8c\u7f8e\u200b\u8f7d\u4f53\u200b\u3002\u200b\u4ece\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u6587\u4ef6\u200b\u7ba1\u7406\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\u7d22\u5f15\u200b\u4f18\u5316\u200b\uff0c\u200b\u4ece\u200b\u6e38\u620f\u200b\u51b3\u7b56\u6811\u200b\u5230\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\uff0c\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u53d8\u4f53\u200b\u548c\u200b\u5e94\u7528\u200b\u65e0\u5904\u4e0d\u5728\u200b\u3002</p> <p>\u200b\u57fa\u7840\u200b\u9636\u6bb5\u200b\u53ea\u200b\u5305\u62ec\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5\u200b\u4e0e\u200b\u9012\u5f52\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u524d\u4e2d\u200b\u540e\u5e8f\u200b(\u200b\u9012\u5f52\u200b\u4e0e\u975e\u200b\u9012\u5f52\u200b\u5b9e\u73b0\u200b)\u200b\u4e0e\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u91cd\u8981\u200b\u6570\u5b66\u200b\u7ed3\u8bba\u200b\u3002</p> \u200b\u76f8\u5173\u200b\u4e60\u9898\u200b <p>bfs\u200b\u7684\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b</p> <p>\u200b\u952f\u9f7f\u72b6\u200b\u904d\u5386\u200b</p> <p>\u200b\u6700\u5927\u200b\u7279\u6b8a\u200b\u5bbd\u5ea6\u200b</p> <p>\u200b\u6700\u5927\u200b\u6df1\u5ea6\u200b</p> <p>\u200b\u6700\u5c0f\u200b\u6df1\u5ea6\u200b</p> <p>\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b</p> <p>\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b</p> <p>\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\u548c\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u8fd8\u539f\u200b\u4e8c\u53c9\u6811\u200b</p> <p>\u200b\u5224\u65ad\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b</p> <p>\u200b\u6c42\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u8282\u70b9\u200b\u4e2a\u6570\u200b</p> <p>\u200b\u666e\u901a\u200b\u4e8c\u53c9\u6811\u200b\u4e0a\u200b\u6c42\u89e3\u200bLCA</p> <p>\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b\u4e0a\u200b\u6c42\u89e3\u200bLCA</p> <p>\u200b\u6536\u96c6\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b<code>k</code>\u200b\u7684\u200b\u6240\u6709\u200b\u8def\u5f84\u200b</p> <p>\u200b\u5224\u65ad\u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811\u200b</p> <p>\u200b\u5224\u65ad\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b</p> <p>\u200b\u4fee\u526a\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b</p> <p>\u200b\u4e8c\u53c9\u6811\u200b\u4e0a\u200b\u7684\u200b\u6253\u5bb6\u52ab\u820d\u200b\u95ee\u9898\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_2","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5","text":"<p>\u200b\u57fa\u672c\u53c2\u6570\u200b</p> <p>\u200b\u6df1\u5ea6\u200b\u4e0e\u200b\u9ad8\u5ea6\u200b</p> <p>\u200b\u8282\u70b9\u200b\u7684\u200b\u9ad8\u5ea6\u200b(height):\u200b\u4ece\u6839\u200b\u8282\u70b9\u200b\u5230\u200b\u8be5\u200b\u8282\u70b9\u200b\u7ecf\u8fc7\u200b\u7684\u200b\u8fb9\u6570\u200b\u3002 \u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u6df1\u5ea6\u200b(depth):\u200b\u4ece\u200b\u8ddd\u79bb\u200b\u8be5\u200b\u8282\u70b9\u200b\u6700\u8fdc\u200b\u7684\u200b\u53f6\u200b\u8282\u70b9\u200b\u5230\u200b\u8be5\u200b\u8282\u70b9\u200b\u6240\u200b\u9700\u8981\u200b\u7ecf\u8fc7\u200b\u7684\u200b\u8fb9\u6811\u200b\u3002 \u200b\u6ce8\u610f\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200b\u9898\u200b\u3001\u200b\u6559\u6750\u200b\u5bf9\u4e8e\u200b\u6839\u53f6\u200b\u8282\u70b9\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u3001\u200b\u6df1\u5ea6\u200b\u4ece\u200b0\u200b\u8fd8\u662f\u200b\u4ece\u200b1\u200b\u5f00\u59cb\u200b\u5e76\u200b\u4e0d\u200b\u7edf\u4e00\u200b\u3002 \u200b\u4f46\u200b\u4e00\u822c\u800c\u8a00\u200b\uff0c\u200b\u8bf4\u6839\u200b\u8282\u70b9\u200b\u7684\u200b\u6df1\u5ea6\u200b\u4e3a\u200b0\uff0c\u200b\u53f6\u5b50\u200b\u8282\u70b9\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u4e3a\u200b0</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_3","title":"\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5c42\u5e8f\u200b\u904d\u5386","text":"<p>\u200b\u4e3b\u8981\u200b\u4ecb\u7ecd\u200b\u4f7f\u7528\u200b<code>\u200b\u961f\u5217\u200b</code>\u200b\u4e00\u6b21\u200b\u904d\u5386\u200b\u4e00\u5c42\u200b\u7684\u200b\u89e3\u6cd5\u200b</p> <p>\u200b\u5173\u4e8e\u200b\u961f\u5217\u200b</p> <p>\u200b\u82e5\u200b\u6bd4\u8d5b\u200b\u4e14\u200b\u961f\u5217\u200b\u53ef\u80fd\u200b\u662f\u200b\u7b97\u6cd5\u200b\u7684\u200b\u74f6\u9888\u200b\u5c3d\u91cf\u200b\u7528\u200b\u9759\u6001\u200b\u6570\u7ec4\u200b\u5b9e\u73b0\u200b\u7684\u200b\u7248\u672c\u200b\uff0c\u200b\u5426\u5219\u200b\u7528\u200bstl\u200b\u5e93\u4e2d\u200b\u7684\u200b\u961f\u5217\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_4","title":"\u952f\u9f7f\u5f62\u200b\u5c42\u5e8f\u200b\u904d\u5386","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b</p> <p>leetcode 103.\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u952f\u9f7f\u5f62\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b</p> \u200b\u7b97\u6cd5\u200b\u63d0\u793a\u200b <p>\u200b\u8fd9\u9053\u9898\u200b\u548c\u200b\u4e0a\u200b\u4e00\u9053\u200b\u9898\u200b\u601d\u8def\u200b\u4e0a\u200b\u4e00\u81f4\u200b\uff0c\u200b\u53ea\u662f\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u6bcf\u8f6e\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u7684\u200b\u52a0\u5165\u200b\u987a\u5e8f\u200b\u8981\u200b\u4ea4\u66ff\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b \u200b\u65b9\u6cd5\u200b1\uff0c\u200b\u6309\u7167\u200b\u4e0a\u9898\u200b\u89e3\u6cd5\u200b\u65b9\u6cd5\u200b\u4e8c\u200b\uff1a\u200b\u5148\u200b\u6536\u96c6\u200blist\u200b\u518d\u200b\u628a\u200b\u5de6\u53f3\u200b\u8282\u70b9\u200b\u52a0\u5165\u200b\u961f\u5217\u200b C++<pre><code>// \u200b\u65b9\u6cd5\u200b\u4e00\u200b\uff1a\u200b\u5b8c\u5168\u200b\u6309\u7167\u200b\u4e0a\u9898\u200b\u7684\u200b\u505a\u6cd5\u200b\uff0c\u200b\u53ea\u662f\u200b\u5728\u200b\u8bfb\u5165\u200b\u7b54\u6848\u200b\u7684\u200b\u65f6\u5019\u200b\u5224\u65ad\u200b\u4e00\u4e0b\u200b\n// \u200b\u662f\u200b\u4ece\u5de6\u5f80\u53f3\u200b\u7684\u200b\u8bfb\u200b\u8fd8\u662f\u200b\u4ece\u53f3\u5f80\u200b\u5de6\u8bfb\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u4ece\u200b\u53f3\u5f80\u200b\u5de6\u8bfb\u200b\uff0c\u200b\u5c31\u200b\u53cd\u8f6c\u200b\u4e00\u200b\n//\u200b\u4e0b\u200b`list`\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5176\u4ed6\u200b\u4ec0\u4e48\u200b\u90fd\u200b\u4e0d\u200b\u9700\u8981\u200b\u6539\u200b\n// false \u200b\u8868\u793a\u200b \u200b\u4ece\u200b\u5de6\u200b \u200b\u5f80\u53f3\u200b\u8bfb\u5165\u200b\n// true \u200b\u8868\u793a\u200b \u200b\u4ece\u53f3\u200b\u5f80\u200b\u5de6\u200b\u8bfb\u5165\u200b\nbool flag = false; \n......;\nif (flag) reserve(list.begin(), list.end());\nflag = !flag;\nans.push_back(list);\n</code></pre> C++<pre><code>// reverse == false, \u200b\u5de6\u200b -&gt; \u200b\u53f3\u200b\uff0c l....r-1, \u200b\u6536\u96c6\u200bsize\u200b\u4e2a\u200b\n// reverse == true,  \u200b\u53f3\u200b -&gt; \u200b\u5de6\u200b\uff0c r-1....l, \u200b\u6536\u96c6\u200bsize\u200b\u4e2a\u200b\n// \u200b\u5de6\u200b -&gt; \u200b\u53f3\u200b, i = i + 1\n// \u200b\u53f3\u200b -&gt; \u200b\u5de6\u200b, i = i - 1\nfor (int i = reverse ? r - 1 : l, j = reverse ? -1 : 1, k = 0; k &lt; size; i += j, k++) {\n    list.push_back(q[i]-&gt;val);\n}\n// \u200b\u52a0\u5165\u200b\u5de6\u53f3\u200b\u8282\u70b9\u200b\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_5","title":"\u6700\u5927\u200b\u7279\u6b8a\u200b\u5bbd\u5ea6","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_6","title":"\u524d\u5e8f\u200b\u904d\u5386\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316","text":"<p>\u200b\u5e8f\u5217\u5316\u200b\u4e0e\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b</p> <p>\u200b\u5e8f\u5217\u5316\u200b\u662f\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u6570\u636e\u7ed3\u6784\u200b\u6216\u8005\u200b\u5bf9\u8c61\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u8fde\u7eed\u200b\u7684\u200b\u6bd4\u7279\u200b\u4f4d\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8fdb\u800c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u8f6c\u6362\u200b\u540e\u200b\u7684\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u6216\u8005\u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u200b\u4f20\u8f93\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u673a\u200b\u73af\u5883\u200b\uff0c\u200b\u91c7\u53d6\u200b\u76f8\u53cd\u200b\u65b9\u5f0f\u200b\u91cd\u6784\u200b\u5f97\u5230\u200b\u539f\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u524d\u5e8f\u200b\u5e8f\u5217\u200b\u548c\u200b\u540e\u5e8f\u200b\u5e8f\u5217\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5b8c\u6210\u200b\u5e8f\u5217\u5316\u200b\u4f46\u200b\u4e2d\u5e8f\u200b\u5e8f\u5217\u200b\u5e76\u200b\u4e0d\u80fd\u200b\u552f\u4e00\u200b\u786e\u5b9a\u200b\u897f\u200b\u5e8f\u5217\u5316\u200b\u7684\u200b\u7ed3\u679c\u200b</p> <p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b</p> <p>leetcode297.\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b</p> <p>\u200b\u64cd\u4f5c\u200b\u5012\u200b\u662f\u200b\u7b80\u5355\u200b\u8fd9\u9053\u9898\u200b\u611f\u89c9\u200b\u4e0d\u662f\u200b\u7b97\u6cd5\u200b\u9898\u200b\u662f\u200b<code>coding</code>\u200b\u80fd\u529b\u200b\u6d4b\u8bd5\u9898\u200b</p> <ul> <li>\u200b\u5bf9\u200b\u8be5\u200b\u4e8c\u53c9\u6811\u200b\u8fdb\u884c\u200b\u4e00\u6b21\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b</li> <li>\u200b\u5bf9\u4e8e\u200b\u975e\u7a7a\u200b\u8282\u70b9\u200b<code>x</code>\u200b\u8bb0\u5f55\u200b\u5176\u4e3a\u200b\u5b57\u7b26\u4e32\u200b<code>x,</code> </li> <li>\u200b\u5bf9\u4e8e\u200b\u7a7a\u200b\u8282\u70b9\u200b\u8bb0\u5f55\u200b\u4e3a\u200b<code>#,</code> </li> <li>\u200b\u6ce8\u610f\u200b\u67d0\u4e00\u200b\u8282\u70b9\u200b\u82e5\u200b\u5176\u200b\u5de6\u53f3\u200b\u5b50\u6811\u4e3a\u200b\u7a7a\u200b\u4e5f\u200b\u9700\u8981\u200b\u8bb0\u5f55\u200b\u4e3a\u200b<code>#,</code> </li> </ul> <p>\u200b\u7f16\u7801\u200b\u6280\u5de7\u200b</p> <p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>istringstream</code>\u200b\u7c7b\u578b\u200b\u628a\u200b\u5b57\u7b26\u4e32\u200b\u8f6c\u5316\u200b\u4e3a\u6d41\u200b\u8f93\u51fa\u200b\uff0c\u200b\u8fdb\u800c\u200b\u53ef\u4ee5\u200b\u7528\u200b&gt;&gt;\u200b\u76f4\u63a5\u200b\u8fc7\u6ee4\u200b\u7a7a\u683c\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>// \u200b\u611f\u89c9\u200b\u8fd9\u9053\u9898\u200b\u8003\u200b\u8bed\u6cd5\u200b\uff1f\nclass Codec {\npublic:\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        if (!root) return \"# \";\n        return to_string(root-&gt;val) + \" \" + serialize(root-&gt;left) + serialize(root-&gt;right);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        istringstream iss(data); // \u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\u6d41\u200b\u7b80\u5316\u200b\u89e3\u6790\u200b\n        return buildTree(iss);\n    }\n\nprivate:\n    TreeNode* buildTree(istringstream &amp;iss) {\n        string val;\n        iss &gt;&gt; val; // \u200b\u81ea\u52a8\u200b\u8df3\u8fc7\u200b\u7a7a\u683c\u200b\n        if (val == \"#\") return nullptr;\n        TreeNode* node = new TreeNode(stoi(val)); // \u200b\u5904\u7406\u200b\u591a\u4f4d\u6570\u200b\n        node-&gt;left = buildTree(iss);\n        node-&gt;right = buildTree(iss);\n        return node;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_7","title":"\u5c42\u5e8f\u200b\u904d\u5386\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b</p> <p>leetcode297.\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_8","title":"\u901a\u8fc7\u200b\u5148\u5e8f\u200b\u904d\u5386\u200b\u548c\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u590d\u539f\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b</p> <p>leetcode105.\u200b\u4ece\u524d\u200b\u5e8f\u200b\u904d\u5386\u200b\u4e0e\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b</p> <p>\u200b\u5173\u952e\u200b\u601d\u8def\u200b</p> <ul> <li>\u200b\u901a\u8fc7\u200b<code>\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b</code>\u200b\u786e\u5b9a\u200b\u6839\u200b\u8282\u70b9\u200b</li> <li>\u200b\u901a\u8fc7\u200b<code>\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b</code>\u200b\u786e\u5b9a\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b</li> <li>\u200b\u9012\u5f52\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u5c31\u200b\u80fd\u200b\u8fd8\u539f\u200b\u51fa\u539f\u200b\u4e8c\u53c9\u6811\u200b</li> </ul> <p>\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u5173\u952e\u200b\u662f\u200b\u7406\u89e3\u200b\u8fd9\u4e2a\u200b\u8fb9\u754c\u200b\u56fe\u200b </p> <p>\u200b\u989d\u5916\u200b\u7ec3\u4e60\u200b</p> <p>\u200b\u8fd8\u6709\u200b\u4e24\u4e2a\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u9898\u76ee\u200b\uff0c\u200b\u4f46\u200b\u8981\u200b\u6ce8\u610f\u200b\u5982\u679c\u200b\u5355\u7eaf\u200b\u901a\u8fc7\u200b\u524d\u5e8f\u200b\u548c\u200b\u540e\u5e8f\u200b\u662f\u200b\u65e0\u6cd5\u200b\u552f\u4e00\u200b\u8fd8\u539f\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\uff01</p> <p>leetcode106.\u200b\u4ece\u4e2d\u200b\u5e8f\u200b\u904d\u5386\u200b\u548c\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\u6784\u9020\u200b\u4e8c\u53c9\u6811\u200b</p> <p>leetcode889.\u200b\u6839\u636e\u200b\u524d\u5e8f\u200b\u904d\u5386\u200b\u548c\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\u590d\u539f\u200b\u4e8c\u53c9\u6811\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_9","title":"\u5224\u65ad\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b</p> <p>leetcode958.\u200b\u4e8c\u53c9\u6811\u200b\u5b8c\u5168\u6027\u200b\u7684\u200b\u9a8c\u8bc1\u200b</p> <p>\u200b\u7b97\u6cd5\u200b\u6b65\u9aa4\u200b</p> <ul> <li> <p>\u200b\u4f7f\u7528\u200b<code>\u200b\u5c42\u5e8f\u200b\u904d\u5386\u200b</code></p> </li> <li> <p>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u9f50\u5168\u200b\uff0c\u200b\u5219\u200b\u65e0\u9700\u200b\u5904\u7406\u200b\u904d\u5386\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5373\u53ef\u200b</p> </li> <li>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u6709\u53f3\u5b50\u200b\u6811\u200b\uff0c\u200b\u800c\u200b\u5de6\u5b50\u200b\u6811\u200b\u7f3a\u5931\u200b\u5219\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b<code>false</code></li> <li>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u7f3a\u5c11\u200b\u53f3\u200b\u5b69\u5b50\u200b\uff0c\u200b\u5219\u200b\u8bb0\u5f55\u200b\u4e4b\u200b\uff0c\u200b\u904d\u5386\u200b\u4e4b\u540e\u200b\u7684\u200b\u8282\u70b9\u200b</li> <li>\u200b\u5982\u679c\u200b\u4e4b\u540e\u200b\u904d\u5386\u200b\u7684\u200b\u8282\u70b9\u200b\u4e0d\u5168\u200b\u4e3a\u200b\u53f6\u5b50\u200b\u8282\u70b9\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b<code>false</code></li> <li>\u200b\u5426\u5219\u200b \u200b\u8fd4\u56de\u200b<code>true</code></li> </ul>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_10","title":"\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u8282\u70b9\u200b\u4e2a\u6570","text":"<p>\u200b\u6d4b\u8bd5\u200b\u94fe\u63a5\u200b</p> <p>leetcode222.\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u8282\u70b9\u200b\u4e2a\u6570\u200b</p> <p>\u200b\u5982\u679c\u200b\u4e0d\u200b\u8003\u8651\u200b\u4efb\u4f55\u200b\u7279\u6027\u200b\uff0c\u200b\u904d\u5386\u200b\u4e00\u8fb9\u200b\u4e8c\u53c9\u6811\u200b\u7ecf\u8fc7\u200bO(N) \u200b\u7684\u200b\u65f6\u95f4\u200b\u5c31\u200b\u80fd\u200b\u83b7\u5f97\u200b\u7b54\u6848\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u96be\u5ea6\u200b\u4e3a\u200b<code>Easy</code>\u3002\u200b\u4f46\u200b\u4eba\u200b\u80af\u5b9a\u200b\u8fd8\u662f\u200b\u5f97\u200b\u6709\u70b9\u200b\u8ffd\u6c42\u200b\u7684\u200b\u5566\u200b\uff0c\u200b\u5982\u4f55\u200b\u5728\u200b<code>&lt; O(N)</code>\u200b\u7684\u200b\u65f6\u95f4\u200b\u5185\u200b\u83b7\u5f97\u200b\u8282\u70b9\u200b\u6570\u76ee\u200b\u5462\u200b\uff1f</p> \u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\u7279\u6027\u200b <p>\u200b\u4e00\u4e2a\u200b\u5b8c\u5168\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u5fc5\u7136\u200b\u662f\u200b\u7531\u200b\u4e00\u4e2a\u200b<code>\u200b\u6ee1\u4e8c\u200b\u53c9\u5b50\u200b\u6811\u200b</code>\u200b\u548c\u200b\u4e00\u4e2a\u200b<code>\u200b\u5b8c\u5168\u200b\u4e8c\u200b\u53c9\u5b50\u200b\u6811\u200b</code>\u200b\u6216\u200b<code>\u200b\u6ee1\u4e8c\u200b\u53c9\u5b50\u200b\u6811\u200b</code>\u200b\u6784\u6210\u200b</p> \u200b\u7b97\u6cd5\u200b\u56fe\u89e3\u200b \u200b\u5bf9\u4e8e\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\uff0c\u200b\u68c0\u67e5\u200b\u5176\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u6700\u200b\u5de6\u200b\u8282\u70b9\u200b\u662f\u5426\u200b\u80fd\u200b\u5230\u8fbe\u200b\u6574\u68f5\u6811\u200b\u7684\u200b\u6700\u5e95\u5c42\u200b \u200b\u5982\u679c\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5de6\u5b50\u200b\u6811\u200b\u662f\u200b\u6ee1\u200b\u4e8c\u53c9\u6811\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8ba1\u7b97\u200b\u5de6\u5b50\u200b\u6811\u200b\u8282\u70b9\u200b\u6570\u200b(<code>2^(h-level)</code>)\uff0c\u200b\u7136\u540e\u200b\u9012\u5f52\u200b\u5904\u7406\u200b\u53f3\u5b50\u200b\u6811\u200b \u200b\u5982\u679c\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u8bf4\u660e\u200b\u53f3\u5b50\u200b\u6811\u200b\u662f\u200b\u6ee1\u200b\u4e8c\u53c9\u6811\u200b(\u200b\u4f46\u5c11\u200b\u4e00\u5c42\u200b)\uff0c\u200b\u76f4\u63a5\u200b\u8ba1\u7b97\u200b\u53f3\u5b50\u200b\u6811\u200b\u8282\u70b9\u200b\u6570\u200b(<code>2^(h-level-1)</code>)\uff0c\u200b\u7136\u540e\u200b\u9012\u5f52\u200b\u5904\u7406\u200b\u5de6\u5b50\u200b\u6811","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#lca","title":"\u666e\u901a\u200b\u4e8c\u53c9\u6811\u200b\u6c42\u200bLCA\u200b\u95ee\u9898","text":"<p>LAC\u200b\u95ee\u9898\u200b</p> <p>LCA\u200b\u95ee\u9898\u200b(Lowest Common Ancestor\uff0c \u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148\u200b)</p> <p>\u200b\u5176\u4e2d\u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148\u200b\u7684\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\uff1a\u201c\u200b\u5bf9\u4e8e\u200b\u6709\u200b\u6839\u6811\u200b T \u200b\u7684\u200b\u4e24\u4e2a\u200b\u8282\u70b9\u200b p\u3001q\uff0c\u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148\u200b\u8868\u793a\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b x\uff0c\u200b\u6ee1\u8db3\u200b x \u200b\u662f\u200b p\u3001q \u200b\u7684\u200b\u7956\u5148\u200b\u4e14\u200b x \u200b\u7684\u200b\u6df1\u5ea6\u200b\u5c3d\u53ef\u80fd\u200b\u5927\u200b\uff08\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u5b83\u200b\u81ea\u5df1\u200b\u7684\u200b\u7956\u5148\u200b\uff09\u3002\u201d</p> <p>\u200b\u5206\u7c7b\u200b\u8ba8\u8bba\u200b</p> <ul> <li><code>p</code>\u200b\u6216\u8005\u200b<code>q</code>\u200b\u5305\u542b\u200b\u4e8e\u200b\u53e6\u200b\u4e00\u9897\u200b\u6811\u4e2d\u200b</li> <li>\u200b\u5219\u200b\u4e3a\u200b<code>p</code>\u200b\u6216\u8005\u200b<code>q</code> \uff08\u200b\u7236\u200b\u8282\u70b9\u200b\uff09</li> <li><code>p</code>\u200b\u548c\u200b<code>q</code>\u200b\u5206\u200b\u5c5e\u4e8e\u200b\u4e24\u9897\u200b\u6811\u200b</li> </ul> <p>\u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b</p> <ul> <li>\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u662f\u200b<code>p</code>\u200b\u6216\u8005\u200b<code>q</code>\u200b\u6216\u8005\u200b<code>\u200b\u7a7a\u200b</code> \u200b\u5219\u200b\u8fd4\u56de\u200b\u8be5\u200b\u8282\u70b9\u200b</li> <li>\u200b\u5426\u5219\u200b\u9012\u5f52\u200b\u904d\u5386\u200b\u8be5\u200b\u8282\u70b9\u200b\u7684\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b</li> <li>\u200b\u5982\u679c\u200b\u5de6\u5b50\u200b\u6811\u200b\u8fd4\u56de\u200b\u4e86\u200b<code>nullpter</code>\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u7ed3\u679c\u200b</li> <li>\u200b\u53cd\u6b63\u200b\u82e5\u53f3\u5b50\u200b\u6811\u200b\u8fd4\u56de\u200b\u4e86\u200b<code>nullpter</code>\u200b\u5219\u200b\u8fd4\u56de\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u7ed3\u679c\u200b</li> <li>\u200b\u5982\u679c\u200b\u90fd\u200b\u975e\u7a7a\u200b\u5219\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u662f\u200b<code>p\u3001q</code>\u200b\u7684\u200b\u6700\u8fd1\u200b\u516c\u5171\u200b\u7956\u5148\u200b</li> </ul> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        // \u200b\u5982\u679c\u200b\u627e\u5230\u200bp\u3001q\u200b\u6216\u8005\u200b\u8282\u70b9\u200b\u4e3a\u200b\u7a7a\u5219\u200b\u8fd4\u56de\u200b\n        if (root == nullptr || root == p || root == q) return root;\n        // \u200b\u5de6\u6811\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\n        TreeNode *l = lowestCommonAncestor(root-&gt;left, p, q); \n        // \u200b\u53f3\u6811\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\n        TreeNode *r = lowestCommonAncestor(root-&gt;right, p, q);\n\n        // \u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u5404\u6709\u200bp\u200b\u6216\u8005\u200bq\uff0c\u200b\u5219\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u4e3a\u200b\u516c\u5171\u200b\u7956\u5148\u200b\n        if (l != nullptr &amp;&amp; r != nullptr) return root;\n        // \u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u90fd\u200b\u6ca1\u200b\u627e\u5230\u200b\uff0c\u200b\u8fd4\u56de\u200b\u7a7a\u200b\n        if (l == nullptr &amp;&amp; r == nullptr) return nullptr;\n        // \u200b\u5426\u5219\u200b\uff0c\u200b\u8fd4\u56de\u200bp\u200b\u6216\u8005\u200bq\u200b\u5bf9\u5e94\u200b\u60c5\u51b5\u200b1\n        return l != nullptr ? l : r;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#lca_1","title":"\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200bLCA\u200b\u95ee\u9898","text":"<p>\u200b\u548c\u200b\u4e0a\u200b\u4e00\u9053\u200b\u9898\u200b\u4e00\u6837\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u91cc\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u5176\u200b\u5de6\u5b50\u200b\u6811\u200b&lt;\u200b\u6839\u200b\u8282\u70b9\u200b&lt;\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u7279\u6027\u200b\uff0c\u200b\u4e00\u6b21\u200b\u7b5b\u9009\u200b\u51fa\u200b\u4e0d\u5c11\u200b\u70b9\u200b\u3002</p> <ul> <li>\u200b\u5982\u679c\u200b<code>root == p</code>\u200b\u6216\u8005\u200b<code>root == q</code>\u200b\u5219\u200b\u76f4\u63a5\u200b\u5c31\u662f\u200b\u7b54\u6848\u200b</li> <li>\u200b\u5982\u679c\u200b<code>root.val &gt; max(p.val, q.val)</code> <code>p\u200b\u548c\u200bq</code>\u200b\u5fc5\u7136\u200b\u4f4d\u4e8e\u200b<code>root-&gt;left</code>\u200b\u4e2d\u200b</li> <li>\u200b\u5982\u679c\u200b<code>root.val &lt; min(p.val, q.val)</code> <code>p\u200b\u548c\u200bq</code>\u200b\u5fc5\u7136\u200b\u4f4d\u4e8e\u200b<code>root-&gt;right</code>\u200b\u4e2d\u200b</li> <li>\u200b\u5982\u679c\u200b<code>root.val</code>\u200b\u4f4d\u4e8e\u200b<code>p.val</code>\u200b\u548c\u200b<code>q.val</code>\u200b\u76f4\u63a5\u200b\uff0c\u200b\u5219\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b<code>root</code>\u200b\u4e3a\u200b\u7b54\u6848\u200b</li> </ul> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        while (root-&gt;val != p-&gt;val &amp;&amp; root-&gt;val != q-&gt;val) {\n            if (min(p-&gt;val, q-&gt;val) &lt; root-&gt;val &amp;&amp; root-&gt;val &lt; max(p-&gt;val, q-&gt;val)) break;\n            root = root-&gt;val &lt; min(p-&gt;val, q-&gt;val) ? root-&gt;right : root-&gt;left;\n        }\n        return root;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#k","title":"\u6536\u96c6\u200b\u8def\u5f84\u200b\u548c\u200b\u4e3a\u200bk\u200b\u7684\u200b\u8def\u5f84","text":"\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; pathSum(TreeNode* root, int targetSum) {\n        if (root == nullptr) return {};\n        target = targetSum;\n        dfs(root, 0);\n        return ans;\n    }\nprivate:\n    vector&lt;int&gt; path;\n    vector&lt;vector&lt;int&gt;&gt; ans;\n    int target = 0;\n    void dfs(TreeNode *root, int sum) {\n        path.push_back(root-&gt;val); // \u200b\u5c06\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u52a0\u5165\u200b\u8def\u5f84\u200b\n        if (root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) {\n            if ((sum + root-&gt;val) == target) {\n                ans.push_back(path); // \u200b\u627e\u5230\u200b\u4e00\u6761\u200b\u8def\u5f84\u200b\uff0c\u200b\u52a0\u5165\u200b\u7b54\u6848\u200b\n            }\n        }\n        if (root-&gt;left != nullptr) {\n            dfs(root-&gt;left, sum + root-&gt;val); // \u200b\u9012\u5f52\u200b\u5de6\u5b50\u200b\u6811\u200b\n            path.pop_back();\n        }\n        if (root-&gt;right != nullptr) {\n            dfs(root-&gt;right, sum + root-&gt;val); // \u200b\u9012\u5f52\u200b\u53f3\u5b50\u200b\u6811\u200b\n            path.pop_back();\n        }\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_11","title":"\u5224\u65ad\u200b\u4e00\u4e2a\u200b\u6811\u200b\u662f\u5426\u200b\u4e3a\u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u5e73\u8861\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u7279\u6027\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n        hight(root);\n        return balance;\n    }\nprivate:\n    bool balance = true;\n    int hight(TreeNode *root) {\n        // \u200b\u5982\u679c\u200b\u5df2\u7ecf\u200b\u4e0d\u200b\u5e73\u8861\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\n        // \u200b\u7a7a\u200b\u8282\u70b9\u200b\u8fd4\u56de\u200b0\n        if (!balance || root == nullptr) return 0;\n\n        // \u200b\u9012\u5f52\u8ba1\u7b97\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\n        int l_size = hight(root-&gt;left);\n        // \u200b\u9012\u5f52\u8ba1\u7b97\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\n        int r_size = hight(root-&gt;right);\n\n        // \u200b\u5224\u65ad\u200b\u5de6\u53f3\u200b\u5b50\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u5dee\u200b\n        if (abs(l_size - r_size) &gt; 1) balance = false;\n        // \u200b\u8fd4\u56de\u200b\u6811\u200b\u7684\u200b\u9ad8\u5ea6\u200b\n        return max(l_size, r_size) + 1;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Binary%20Tree/#_12","title":"\u5224\u65ad\u200b\u4e00\u4e2a\u200b\u6811\u200b\u662f\u5426\u200b\u4e3a\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/DateStructureDesign/","title":"\u6570\u636e\u7ed3\u6784\u200b\u8bbe\u8ba1\u200b\u4e60\u9898","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u5728\u200b\u8ba1\u7b97\u673a\u79d1\u5b66\u200b\u4e2d\u200b\uff0c\u200b\u6570\u636e\u7ed3\u6784\u200b\u8bbe\u8ba1\u200b\u662f\u200b\u7b97\u6cd5\u200b\u4e0e\u200b\u5de5\u7a0b\u200b\u5b9e\u8df5\u200b\u7684\u200b\u6865\u6881\u200b\uff0c\u200b\u5b83\u200b\u4e0d\u4ec5\u200b\u662f\u200b\u5b58\u50a8\u200b\u6570\u636e\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u66f4\u662f\u200b\u9ad8\u6548\u200b\u89e3\u51b3\u95ee\u9898\u200b\u7684\u200b\u65b9\u6cd5\u8bba\u200b\u3002\u200b\u65e0\u8bba\u662f\u200b\u8bbe\u8ba1\u200b\u4e00\u4e2a\u200b\u9ad8\u6027\u80fd\u200b\u7f13\u5b58\u200b\u3001\u200b\u5b9e\u73b0\u200b\u5b9e\u65f6\u200b\u63a8\u8350\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u8fd8\u662f\u200b\u6784\u5efa\u200b\u5206\u5e03\u5f0f\u200b\u6570\u636e\u5e93\u200b\uff0c\u200b\u5408\u7406\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u9009\u62e9\u200b\u76f4\u63a5\u200b\u5f71\u54cd\u200b\u7cfb\u7edf\u200b\u7684\u200b\u541e\u5410\u91cf\u200b\u3001\u200b\u54cd\u5e94\u200b\u65f6\u95f4\u200b\u548c\u200b\u8d44\u6e90\u200b\u6d88\u8017\u200b\u3002</p> <p>\u200b\u76f8\u5173\u200b\u4e60\u9898\u200b</p> <p><code>setAll</code>\u200b\u529f\u80fd\u200b\u7684\u200b\u54c8\u5e0c\u200b\u8868\u200b</p> <p>\u200b\u5b9e\u73b0\u200b<code>LRU</code>\u200b\u7ed3\u6784\u200b</p> <p>\u200b\u63d2\u200b\u5220\u200b\u968f\u200b\\(O(1)\\)\u200b\u7684\u200b\u7ed3\u6784\u200b</p> <p>\u200b\u63d2\u200b\u5220\u200b\u968f\u200b\\(O(1)\\)\u200b\u7684\u200b\u7ed3\u6784\u200b\u52a0\u5f3a\u7248\u200b</p> <p>\u200b\u5feb\u901f\u200b\u83b7\u5f97\u200b\u6570\u636e\u6d41\u200b\u7684\u200b\u4e2d\u4f4d\u6570\u200b </p> <p>\u200b\u6700\u5927\u200b\u9891\u7387\u200b\u6808\u200b</p> <p>\u200b\u5168\u662f\u200bO(1)\u200b\u7684\u200b\u7ed3\u6784\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/DateStructureDesign/#setall","title":"<code>setAll</code>\u200b\u529f\u80fd\u200b\u7684\u200b\u54c8\u5e0c\u200b\u8868","text":"<p>\u200b\u8bbe\u8ba1\u200b\u601d\u8def\u200b</p> <ul> <li> <p>\u200b\u5c06\u200b <code>key-value</code>\u200b\u6539\u6210\u200b<code>key - pair&lt;value, time&gt;</code> </p> </li> <li> <p>\u200b\u8bbe\u7f6e\u200b\u4e09\u4e2a\u200b\u5168\u5c40\u53d8\u91cf\u200b<code>setAllTime</code> \u200b\u548c\u200b <code>setAllValue</code> \u200b\u4e0e\u200b <code>cnt</code></p> </li> <li>\u200b\u6bcf\u6b21\u200b\u52a0\u5165\u200b\u52a0\u5165\u200b\u4e00\u5bf9\u200b<code>key-value</code> <code>cnt++</code> ,\u200b\u5e76\u4e14\u200b\u5c06\u200b<code>time = cnt</code></li> <li>\u200b\u6bcf\u6b21\u200b\u6267\u884c\u200b<code>setAll</code>\u200b\u7684\u200b\u65f6\u5019\u200b\u8bbe\u7f6e\u200b<code>setAllTime = cnt</code> \u200b\u548c\u200b <code>setAllValue = \u200b\u8981\u200b\u4fee\u6539\u200b\u7684\u200b\u503c\u200b</code> ,\u200b\u5e76\u4e14\u200b<code>cnt++</code><ul> <li>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u200b\u4e00\u6b65\u200b\u5e76\u200b\u4e0d\u4f1a\u200b\u4fee\u6539\u200b<code>key-value</code></li> </ul> </li> <li>\u200b\u6267\u884c\u200b<code>get()</code>\u200b\u64cd\u4f5c\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u68c0\u67e5\u200b<code>time</code>\u200b\u4e0e\u200b<code>setAllTime</code>\u200b\u82e5\u200b<code>time &lt; setAllTime</code>\u200b\u5219\u200b\u4fee\u6539\u200b<code>value = setAllvalue</code>\u200b\u5426\u5219\u200b\u76f4\u63a5\u200b\u83b7\u5f97\u200b\u503c\u200b</li> </ul>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/DateStructureDesign/#lru","title":"\u5b9e\u73b0\u200b<code>LRU</code>\u200b\u7ed3\u6784","text":"<p>\u200b\u8bbe\u8ba1\u200b\u601d\u8def\u200b</p> <p>\u200b\u53cc\u5411\u200b\u94fe\u8868\u200b + \u200b\u54c8\u5e0c\u200b\u8868\u200b</p> <p></p> <ul> <li>\u200b\u63d2\u5165\u200b<code>key-value</code>\u200b\u7684\u200b\u65f6\u5019\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b<code>\u200b\u53cc\u5411\u200b\u94fe\u8868\u200b\u8282\u70b9\u200b</code> ,\u200b\u5e76\u4e14\u200b<code>value</code>\u200b\u4e3a\u200b\u6307\u5411\u200b\u8be5\u200b\u8282\u70b9\u200b\u7684\u200b\u6307\u9488\u200b</li> <li>\u200b\u5229\u7528\u200b\u5168\u5c40\u200b\u6307\u9488\u200b<code>head</code>\u200b\u548c\u200b<code>tail</code>\u200b\u5b9a\u4f4d\u200b\u94fe\u8868\u200b\u7684\u200b\u5934\u200b\u8282\u70b9\u200b\u548c\u200b\u5c3e\u200b\u8282\u70b9\u200b</li> <li>\u200b\u6bcf\u6b21\u200b\u6dfb\u52a0\u200b\u3001\u200b\u4fee\u6539\u200b\u3001\u200b\u67e5\u8be2\u200b\u65f6\u5019\u200b\u5c06\u200b\u5bf9\u5e94\u200b\u8282\u70b9\u200b\u79fb\u52a8\u200b\u5230\u200b<code>tail</code>\u200b\u7684\u200b\u540e\u9762\u200b\uff0c\u200b\u5e76\u200b\u8ba9\u200b<code>tail</code>\u200b\u6307\u5411\u200b\u8be5\u200b\u8282\u70b9\u200b</li> <li><code>tail</code>\u200b\u6307\u5411\u200b\u7684\u200b\u6c38\u8fdc\u200b\u662f\u200b\u6700\u65b0\u200b\u88ab\u200b\u64cd\u4f5c\u200b\u7684\u200b\u6570\u636e\u200b</li> <li><code>head</code>\u200b\u6307\u5411\u200b\u6c38\u8fdc\u200b\u662f\u200b\u6700\u6700\u200b\u65e7\u200b\u672a\u200b\u88ab\u200b\u4f7f\u7528\u200b\u7684\u200b\u6570\u636e\u200b</li> <li>\u200b\u5bb9\u91cf\u200b\u4e0d\u591f\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u91ca\u653e\u200b<code>head</code>\u200b\u5bf9\u5e94\u200b\u7684\u200b\u8282\u70b9\u200b\uff0c\u200b\u5e76\u200b\u79fb\u52a8\u200b<code>head = head-&gt;next</code>,\u200b\u540c\u65f6\u200b\u53bb\u9664\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b<code>k-v</code>\u200b\u5bf9\u200b</li> </ul>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/DateStructureDesign/#o1","title":"O(1)\u200b\u65f6\u95f4\u200b\u63d2\u5165\u200b\u3001\u200b\u5220\u9664\u200b\u548c\u200b\u83b7\u53d6\u200b\u968f\u673a\u200b\u5143\u7d20","text":"<p>\u200b\u8bbe\u8ba1\u200b\u601d\u8def\u200b</p> <ul> <li>\u200b\u80af\u5b9a\u200b\u4f1a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u54c8\u5e0c\u200b\u8868\u200b\uff0c\u200b\u540c\u65f6\u200b\u7533\u8bf7\u200b\u4e00\u4e2a\u200b\u52a8\u6001\u200b\u6570\u7ec4\u200b(vector)\u200b\u5b58\u200b\u8f93\u5165\u200b\u7684\u200b\u6570\u636e\u200b</li> <li>\u200b\u54c8\u5e0c\u200b\u8868\u200b\u4e3a\u4e86\u200b\u53bb\u200b\u91cd\u200b</li> <li>\u200b\u52a8\u6001\u200b\u6570\u7ec4\u200b\u4e3a\u4e86\u200brandom\u200b\u64cd\u4f5c\u200b</li> <li>\u200b\u8003\u8651\u200b<code>remove</code>\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5982\u679c\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u5220\u9664\u200b\u54c8\u5e0c\u200b\u8868\u200b\u7684\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u5bf9\u200b\u6570\u7ec4\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u5904\u7406\u200b\uff0c\u200b\u7a7a\u4f59\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5c06\u4f1a\u200b\u8d8a\u6765\u8d8a\u200b\u591a\u200b\u4ece\u800c\u200b\u5341\u5206\u200b\u5f71\u54cd\u200b<code>random</code>\u200b\u64cd\u4f5c\u200b</li> <li>\u200b\u89e3\u51b3\u529e\u6cd5\u200b\uff1a\u200b\u4f7f\u7528\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u8986\u76d6\u200b\u88ab\u200b<code>remove</code>\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u540c\u65f6\u200b\u66f4\u65b0\u200b\u54c8\u5e0c\u200b\u8868\u200b\u8bb0\u5f55\u200b\u5373\u53ef\u200b</li> </ul>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/","title":"\u5dee\u5206","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u5728\u200b\u7b97\u6cd5\u200b\u548c\u200b\u6570\u636e\u5904\u7406\u200b\u4e2d\u200b\uff0c\u200b\u5dee\u5206\u200b\uff08Difference Array\uff09 \u200b\u662f\u200b\u4e00\u79cd\u200b\u7528\u4e8e\u200b\u9ad8\u6548\u200b\u5904\u7406\u200b\u533a\u95f4\u200b\u66f4\u65b0\u200b\u7684\u200b\u6280\u672f\u200b\u3002\u200b\u5b83\u200b\u901a\u8fc7\u200b\u5c06\u200b\u539f\u59cb\u200b\u6570\u7ec4\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5c06\u200b\u533a\u95f4\u200b\u64cd\u4f5c\u200b\uff08\u200b\u5982\u200b\u6279\u91cf\u200b\u589e\u51cf\u200b\uff09\u200b\u8f6c\u5316\u200b\u4e3a\u200b\u5355\u70b9\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4ece\u800c\u200b\u5c06\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4ece\u200b O(n) \u200b\u4f18\u5316\u200b\u81f3\u200b O(1)\uff0c\u200b\u7279\u522b\u200b\u9002\u7528\u200b\u4e8e\u200b\u9891\u7e41\u200b\u533a\u95f4\u200b\u4fee\u6539\u200b+\u200b\u6700\u7ec8\u200b\u67e5\u8be2\u200b\u7684\u200b\u573a\u666f\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#_2","title":"\u4e00\u7ef4\u200b\u5dee\u5206\u200b\u4e0e\u200b\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206","text":"<p>\u200b\u76f8\u5173\u200b\u4e60\u9898\u200b</p> <p>leetcode 1109.\u200b\u822a\u73ed\u200b\u9884\u8ba2\u200b\u7edf\u8ba1\u200b</p> <p>\u200b\u6d1b\u8c37\u200bP4231 \u200b\u4e09\u6b65\u200b\u5fc5\u6740\u200b</p> <p>\u200b\u6d1b\u8c37\u200bP5026 Lycanthropy</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#_3","title":"\u4e00\u7ef4\u200b\u5dee\u5206","text":"<p>\u200b\u5047\u8bbe\u200b\u8981\u200b\u5728\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u7684\u200b[left, right]\u200b\u4e0a\u200b\u8fdb\u884c\u200bn\u200b\u6b21\u200b\u64cd\u4f5c\u200b</p> <ul> <li>\u200b\u53ea\u200b\u5728\u200b<code>left</code>\u200b\u4f4d\u7f6e\u200b\u52a0\u200b<code>x</code>\u200b\u800c\u200b\u5728\u200b<code>right + 1</code>\u200b\u4f4d\u7f6e\u200b\u51cf\u200b<code>x</code></li> <li>\u200b\u76f8\u5f53\u4e8e\u200b\u6807\u8bb0\u200b\u4f5c\u7528\u200b\u8303\u56f4\u200b</li> <li>\u200b\u901a\u8fc7\u200b\u524d\u7f00\u200b\u548c\u200b\u8fd8\u539f\u200b\u51fa\u200b\u771f\u6b63\u200b\u7684\u200b\u7ed3\u679c\u200b</li> </ul> <p>\u200b\u5177\u4f53\u200b\u63a8\u5bfc\u200b\u8fc7\u7a0b\u200b\u5982\u200b\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206\u200b</p> <p>\u200b\u5c40\u9650\u6027\u200b</p> <p>\u200b\u6ce8\u610f\u200b\u4e00\u7ef4\u200b\u5dee\u5206\u200b\u65e0\u6cd5\u200b\u5b9e\u73b0\u200b\u5728\u200b\u64cd\u4f5c\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u67e5\u8be2\u200b\u7684\u200b\u64cd\u4f5c\u200b</p> <p>\u200b\u60f3\u8981\u200b\u5b9e\u73b0\u200b\u67e5\u8be2\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u8003\u200b<code>advanced</code>\u200b\u6807\u7b7e\u200b\u4e0b\u200b\u7684\u200b<code>segment tree(\u200b\u7ebf\u6bb5\u200b\u6811\u200b)</code></p> \u200b\u4e00\u7ef4\u200b\u5dee\u5206\u200b\u6a21\u677f\u200b C++<pre><code>arr[left] += x;\narr[right + 1] -= y;\n\nfor (int i = 1; i &lt; arr.size(); i++) arr[i] += arr[i - 1];\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#_4","title":"\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206","text":"<p>\u200b\u63d0\u9192\u200b</p> <p>\u200b\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206\u200b\u5728\u200b\u9762\u8bd5\u200b\u4e2d\u200b\u5e76\u200b\u4e0d\u200b\u5e38\u89c1\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u6bd4\u8d5b\u200b\u4e2d\u200b\u8fd8\u662f\u200b\u6bd4\u8f83\u200b\u5e38\u89c1\u200b\u7684\u200b</p> <p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u4e00\u200b\u5f00\u59cb\u200b1-n\u200b\u8303\u56f4\u200b\u4e0a\u200b\u7684\u200b\u6570\u5b57\u200b\u90fd\u200b\u662f\u200b0\u3002\u200b\u63a5\u4e0b\u6765\u200b\u4e00\u5171\u200b\u6709\u200bm\u200b\u4e2a\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6bcf\u6b21\u200b\u64cd\u4f5c\u200b\uff1al-r\u200b\u8303\u56f4\u200b\u4e0a\u200b\u4f9d\u6b21\u200b\u52a0\u4e0a\u200b\u9996\u9879\u200bs\u3001\u200b\u672b\u9879\u200be\u3001\u200b\u516c\u5dee\u200bd\u200b\u7684\u200b\u6570\u5217\u200b \u200b\u6700\u7ec8\u200b1-n\u200b\u8303\u56f4\u200b\u4e0a\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u6570\u5b57\u200b\u90fd\u200b\u8981\u200b\u6b63\u786e\u200b\u5f97\u5230\u200b</p> <p>\u200b\u5177\u4f53\u200b\u7684\u200b\u63a8\u5bfc\u200b\u8fc7\u7a0b\u200b\u5982\u4e0b\u200b(\u200b\u901a\u8fc7\u200b\u6700\u7ec8\u200b\u72b6\u6001\u200b\u53cd\u63a8\u200b\u53c2\u6570\u200b)</p> <p></p> \u200b\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206\u200b\u6a21\u677f\u200b C++<pre><code>// \u200b\u7b49\u5dee\u6570\u5217\u200b\u5dee\u5206\u200b\u6a21\u677f\u200b\nvoid set(int l, int r, int s ,int e, int d) {\n    arr[l] += s;\n    arr[l + 1] += d - s;\n    arr[r + 1] -= d + e;\n    arr[r + 2] += e;\n}\n\nvoid build() {\n    // \u200b\u4e24\u6b21\u200b\u524d\u7f00\u200b\u548c\u200b\n    for (int i = 1; i &lt;= n; i++) arr[i] += arr[i - 1];\n    for (int i = 1; i &lt;= n; i++) arr[i] += arr[i - 1];\n}\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#_5","title":"\u4e8c\u7ef4\u200b\u524d\u7f00\u200b\u548c","text":"<p>\u200b\u53c2\u8003\u200b\u4e60\u9898\u200b</p> <p> leetcode 304.\u200b\u4e8c\u7ef4\u200b\u533a\u57df\u200b\u548c\u200b\u68c0\u7d22\u200b-\u200b\u77e9\u9635\u200b\u4e0d\u53ef\u200b\u53d8\u200b(\u200b\u4e8c\u7ef4\u200b\u524d\u7f00\u200b\u548c\u200b\u6a21\u677f\u200b) leetcode 1139.\u200b\u6700\u5927\u200b\u4ee5\u200b1\u200b\u4e3a\u200b\u8fb9\u754c\u200b\u7684\u200b\u6b63\u65b9\u5f62\u200b </p> <p>\u200b\u8be6\u7ec6\u200b\u7684\u200b\u6570\u5b66\u200b\u63a8\u5bfc\u200b\u89c1\u200bOi-wiki:\u200b\u524d\u7f00\u200b\u548c\u200b&amp;\u200b\u5dee\u5206\u200b</p> <p>\u200b\u4e8c\u7ef4\u200b\u524d\u7f00\u200b\u548c\u200b\u7684\u200b\u65f6\u7a7a\u200b\u590d\u6742\u5ea6\u200b</p> <p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\\(O(nm)\\) \u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\\(O(nm)\\)</p> \u200b\u4e00\u4e2a\u200b\u5c0f\u200b\u6280\u5de7\u200b <p>\u200b\u5982\u679c\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u548c\u200b\u539f\u200b\u6570\u7ec4\u200b\u4e00\u822c\u200b\u5927\u5c0f\u200b\u7684\u200b<code>sum</code>\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5219\u200b\u5355\u72ec\u200b\u8ba8\u8bba\u200b\u7b2c\u200b<code>0</code>\u200b\u884c\u200b\u548c\u200b\u7b2c\u200b<code>0</code>\u200b\u5217\u200b\u8fb9\u754c\u6761\u4ef6\u200b \u200b\u4f46\u662f\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u5982\u56fe\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6269\u5927\u200b<code>sum</code>\u200b\u6570\u7ec4\u200b\u907f\u514d\u200b\u8fb9\u754c\u6761\u4ef6\u200b\u7684\u200b\u8ba8\u8bba\u200b  </p> <p>\u200b\u4e00\u5f20\u200b\u56fe\u200b\u4e86\u89e3\u200b\u4e8c\u7ef4\u200b\u524d\u7f00\u200b\u548c\u200b</p> <p></p> \u200b\u4e8c\u7ef4\u200b\u524d\u7f00\u200b\u548c\u200b\u6a21\u677f\u200b C++<pre><code>class NumMatrix {\npublic:\n    NumMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int n = matrix.size();\n        int m = matrix[0].size();\n        // \u200b\u8bbe\u7f6e\u200bsum\u200b\u5927\u5c0f\u200b\u4e3a\u200b(n + 1, m + 1)\u200b\u907f\u514d\u200b\u8fb9\u754c\u200b\u8ba8\u8bba\u200b\n        sum.resize(n + 1, vector&lt;int&gt;(m + 1));\n\n        for (int a = 1, c = 0; c &lt; n; a++, c++) {\n            for (int b = 1, d = 0; d &lt; m; b++, d++) {\n                // \u200b\u5c06\u200bmatrix\u200b\u7684\u200b\u5143\u7d20\u200b\u5bf9\u5e94\u200b\u7684\u200b\u62f7\u8d1d\u200b\u8fdb\u200bsum\n                // a -&gt; c + 1\n                // b -&gt; d + 1\n                sum[a][b] = matrix[c][d];\n            }\n        }\n\n        for (int i = 1; i &lt;= n; i++) \n            for (int j = 1; j &lt;= m; j++)\n                // \u200b\u524d\u7f00\u200b\u548c\u200b\u7b49\u4e8e\u200b \u200b\u4e0a\u200b + \u200b\u5de6\u200b + \u200b\u81ea\u5df1\u200b - \u200b\u5de6\u200b\u4e0a\u200b\n                sum[i][j] += sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1];\n    }\n\n    int sumRegion(int a, int b, int c, int d) {\n        // a \u200b\u5b50\u200b\u77e9\u9635\u200b\u5de6\u4e0a\u89d2\u200b\u884c\u200b\u7d22\u5f15\u200b\n        // b \u200b\u5b50\u200b\u77e9\u9635\u200b\u5de6\u4e0a\u89d2\u200b\u5217\u200b\u7d22\u5f15\u200b\n        // c \u200b\u5b50\u200b\u77e9\u9635\u200b\u53f3\u4e0b\u89d2\u200b\u884c\u200b\u7d22\u5f15\u200b\n        // d \u200b\u5b50\u200b\u77e9\u9635\u200b\u53f3\u4e0b\u89d2\u200b\u5217\u200b\u7d22\u5f15\u200b\n        // [c + 1][d + 1]\u200b\u4e3a\u200b\u5927\u200b\u77e9\u5f62\u200b\n        // [c + 1][b]\u200b\u4e3a\u200b\u4e0a\u65b9\u200b\u5c0f\u200b\u77e9\u9635\u200b\n        // [a][d + 1]\u200b\u4e3a\u200b\u5de6\u4fa7\u200b\u5c0f\u200b\u77e9\u5f62\u200b\n        // [a][b]\u200b\u4e3a\u200b\u591a\u200b\u51cf\u200b\u7684\u200b\u5c0f\u200b\u77e9\u9635\u200b\n        return sum[c + 1][d + 1] - sum[c + 1][b] - sum[a][d + 1] + sum[a][b];\n    }\nprivate:\n    vector&lt;vector&lt;int&gt;&gt; sum;\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#1","title":"\u6700\u5927\u200b\u4ee5\u200b1\u200b\u4e3a\u200b\u8fb9\u754c\u200b\u7684\u200b\u6b63\u65b9\u5f62\u200b(\u200b\u524d\u7f00\u200b\u548c\u200b\u89e3\u6cd5\u200b)","text":"<p>\u200b\u57fa\u672c\u200b\u6d41\u7a0b\u200b\uff1a\u200b\u679a\u4e3e\u200b\u6240\u6709\u200b\u6b63\u65b9\u5f62\u200b\\(O(n*m*min(n, m))\\),\u200b\u9a8c\u8bc1\u200b\u6bcf\u4e2a\u200b\u6b63\u65b9\u5f62\u200b\u662f\u5426\u662f\u200b\u6ee1\u8db3\u8981\u6c42\u200b\u7684\u200b\u6b63\u65b9\u5f62\u200b\u3002</p> <p>\u200b\u679a\u4e3e\u200b\u8fc7\u7a0b\u200b\u65e0\u6cd5\u200b\u4f18\u5316\u200b\uff0c\u200b\u53ea\u80fd\u200b\u4f18\u5316\u200b\u9a8c\u8bc1\u200b\u8fc7\u7a0b\u200b.</p> \u200b\u4f18\u5316\u200b\u65b9\u6848\u200b <p>\u200b\u5bf9\u4e8e\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u6b63\u65b9\u5f62\u200b(a,b)-(c,d)\u200b\u53ef\u4ee5\u200b\u8ba1\u7b97\u200b\u5176\u200b\u524d\u7f00\u200b\u548c\u200b\u6c42\u5f97\u200b\u5728\u200b\u5176\u4e2d\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\u4e4b\u200b\u548c\u200b\uff0c\u200b\u82e5\u200b\u51cf\u53bb\u200b\u5176\u200b\u5185\u90e8\u200b(a+1, b+1)-(c-1,d-1)\u200b\u7684\u200b\u5c0f\u200b\u6b63\u65b9\u5f62\u200b\u5143\u7d20\u200b\u4e4b\u200b\u548c\u200b\uff0c\u200b\u5219\u200b\u5269\u4e0b\u200b\u7684\u200b\u5c31\u662f\u200b\u8fb9\u4e0a\u200b\u90a3\u200b\u4e00\u5708\u200b\u5143\u7d20\u200b\u4e4b\u200b\u548c\u200b\u3002\u200b\u6b64\u65f6\u200b\u53ea\u200b\u9700\u8981\u200b\u5224\u65ad\u200b\u5176\u200b\u662f\u5426\u200b\u7b49\u4e8e\u200b\u5468\u957f\u200b\u5373\u53ef\u200b\u3002 \u200b\u5982\u56fe\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>// \u200b\u8003\u8651\u200b\u590d\u7528\u200b\u539f\u200b\u6570\u7ec4\u200b\u5219\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(nm*min(n,m)) \u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200bO(1)\nclass Solution {\npublic:\n    int largest1BorderedSquare(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n\n        // \u200b\u6784\u5efa\u200b\u524d\u7f00\u200b\u548c\u200b\u6570\u7ec4\u200b\n        // \u200b\u81ea\u5df1\u200b+\u200b\u5de6\u200b+\u200b\u4e0a\u200b-\u200b\u5de6\u200b\u4e0a\u200b\n        for (int i = 0; i &lt; n; i++)\n            for (int j = 0; j &lt; m; j++)\n                grid[i][j] += Get(grid, i, j - 1) + Get(grid, i - 1, j) - Get(grid, i - 1, j - 1);\n        // \u200b\u4e0d\u200b\u542b\u6709\u200b1\n        if (sum(grid, 0, 0, n - 1, m - 1) == 0) return 0;\n\n        // \u200b\u5916\u5708\u200b\u5168\u4e3a\u200b1\u200b\u7684\u200b\u8fb9\u957f\u200b\n        int ans = 1;\n        for (int a = 0; a &lt; n; a++) {\n            for (int b = 0; b &lt; m; b++) {\n                // \u200b\u4e0a\u9762\u200b\u4e24\u4e2a\u200bfor\u200b\u5faa\u73af\u200b\u4e3a\u200b\u679a\u4e3e\u200b\u5de6\u4e0a\u89d2\u200b\u70b9\u200b\u7684\u200b\u53ef\u80fd\u6027\u200b\n                for (int c = a + ans, d = b + ans, k = ans + 1; c &lt; n &amp;&amp; d &lt; m; c++, d++, k++) {\n                    // \u200b\u4e0a\u9762\u200b\u8fd9\u4e2a\u200b\u5faa\u73af\u200b\u4e3a\u200b\u679a\u4e3e\u200b\u53ef\u80fd\u200b\u6ee1\u8db3\u200b\u66f4\u957f\u200b\u7b54\u6848\u200b\u7684\u200b\u53f3\u4e0b\u89d2\u200b\u70b9\u200b\n                    // \u200b\u901a\u8fc7\u200b\u76f4\u63a5\u200b+ans\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u51cf\u5c11\u200b\u679a\u4e3e\u200b\u7684\u200b\u4e2a\u6570\u200b\n                    if (sum(grid, a, b, c, d) - sum(grid, a + 1, b + 1, c - 1, d - 1) == ((k - 1) &lt;&lt; 2)) {\n                        ans = k;\n                    }\n                }\n            }\n        }\n        return ans * ans;\n    }\nprivate:\n    // \u200b\u8fb9\u754c\u200b\u5224\u65ad\u200b\n    int Get(vector&lt;vector&lt;int&gt;&gt; &amp;grid, int a, int b) {\n        return (a &lt; 0 || b &lt; 0) ? 0 : grid[a][b];\n    }\n    // \u200b\u6c42\u200b\u7ed9\u5b9a\u200b\u6b63\u65b9\u5f62\u200b(a,b)-(c,d)\u200b\u7684\u200b\u533a\u95f4\u200b\u548c\u200b\n    int sum(vector&lt;vector&lt;int&gt;&gt; &amp;g, int a, int b, int c, int d) {\n        return a &gt; c  ? 0 : (g[c][d] - Get(g, c, b - 1) - Get(g, a - 1, d) + Get(g, a - 1, b - 1));\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#_6","title":"\u4e8c\u7ef4\u200b\u5dee\u5206","text":"<p>\u200b\u53c2\u8003\u200b\u4e60\u9898\u200b</p> <p> \u200b\u6d1b\u8c37\u200bP3397\u200b\u5730\u6bef\u200b(\u200b\u4e8c\u7ef4\u200b\u5dee\u5206\u200b\u6a21\u677f\u200b) leetcode2132.\u200b\u7528\u200b\u90ae\u7968\u200b\u8d34\u6ee1\u200b\u7f51\u683c\u200b\u56fe\u200b </p> <p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u4e00\u7ef4\u200b\u5dee\u5206\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u4e8c\u7ef4\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5982\u679c\u200b\u7ecf\u5386\u200b\u5982\u4e0b\u200b\u64cd\u4f5c\u200b - \u200b\u6bcf\u4e2a\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u6709\u200b\u72ec\u7acb\u200b\u7684\u200b<code>a\u3001b\u3001c\u3001d</code>\u200b\u786e\u5b9a\u200b\u4e24\u4e2a\u200b\u70b9\u200b(a,b)\u200b\u548c\u200b(c,d) - \u200b\u6bcf\u6b21\u200b\u5bf9\u200b\u8be5\u200b\u533a\u57df\u200b\u5185\u200b\u7684\u200b\u6240\u6709\u200b\u6570\u5b57\u200b\u8fdb\u884c\u200b\u4e00\u6b21\u200b<code>+</code>\u200b\u6216\u8005\u200b<code>-</code>\u200b\u67d0\u4e2a\u200b\u6570\u200b\u7684\u200b\u64cd\u4f5c\u200b - \u200b\u95ee\u200b\u6700\u540e\u200b\u7684\u200b\u4e8c\u7ef4\u200b\u6570\u7ec4\u200b\u5e94\u8be5\u200b\u662f\u200b\u5565\u6837\u5b50\u200b\u7684\u200b</p> <p>\u200b\u5c40\u9650\u6027\u200b</p> <p>\u200b\u548c\u200b\u4e00\u7ef4\u200b\u5dee\u5206\u200b\u4e00\u6837\u200b\uff0c\u200b\u4e8c\u7ef4\u200b\u5dee\u5206\u200b\u53ea\u80fd\u200b\u4fdd\u8bc1\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\u6b63\u786e\u200b\u800c\u200b\u4e0d\u80fd\u200b\u5bf9\u200b\u4e2d\u95f4\u72b6\u6001\u200b\u8fdb\u884c\u200b\u67e5\u8be2\u200b\u3002</p> <p>\u200b\u4f5c\u4e3a\u200b\u4e00\u7ef4\u200b\u5dee\u5206\u200b\u7684\u200b\u63a8\u5e7f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5728\u200b\u56db\u4e2a\u200b\u70b9\u200b<code>+\\-</code>\u200b\u5bf9\u4e8e\u200b\u5143\u7d20\u200b\u6765\u200b\u62b5\u6d88\u200b\u8fd9\u6b21\u200b\u64cd\u4f5c\u200b\u5bf9\u200b\u5176\u4ed6\u200b\u8303\u56f4\u200b\u5185\u200b\u6570\u5b57\u200b\u7684\u200b\u5f71\u54cd\u200b\uff0c\u200b\u518d\u200b\u901a\u8fc7\u200b\u4e00\u6b21\u200b\u524d\u7f00\u200b\u548c\u200b\u8ba1\u7b97\u200b\u5f97\u5230\u200b\u6700\u7ec8\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002</p> \u200b\u4e8c\u7ef4\u200b\u5dee\u5206\u200b\u6a21\u677f\u200b C++<pre><code>// \u200b\u64cd\u4f5c\u200b\u4e00\u6b21\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\nvoid add(int a, int b, int c, int d, int v) {\n    diff[a][b] += v; // \u200b\u5de6\u4e0a\u89d2\u200b\u52a0\u200bv\n    diff[c + 1][b] -= v; // \u200b\u5de6\u4e0b\u89d2\u200b\u7684\u200b\u4e0b\u200b\u65b9\u683c\u5b50\u200b-v\n    diff[a][d + 1] -= v; // \u200b\u53f3\u4e0a\u89d2\u200b\u7684\u200b\u53f3\u200b\u65b9\u683c\u5b50\u200b-v\n    diff[c + 1][d + 1] += v; // \u200b\u53f3\u4e0b\u89d2\u200b\u7684\u200b\u4e0b\u200b\u65b9\u683c\u5b50\u200b+v\n}\n// \u200b\u901a\u8fc7\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\u6784\u5efa\u200b\u51fa\u200b\u6700\u7ec8\u200b\u7684\u200b\u7b54\u6848\u200b\nvoid build() {\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= n; j++)\n            diff[i][j] +=diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n}\n</code></pre> <p>\u200b\u53c2\u8003\u200b\u524d\u7f00\u200b\u548c\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u5982\u679c\u200b\u91c7\u7528\u200b\u539f\u200b\u5927\u5c0f\u200b\u7684\u200b\u6570\u7ec4\u200b\u6784\u5efa\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\u5219\u200b\u9700\u8981\u200b\u8fdb\u884c\u200b\u5404\u79cd\u200b\u8fb9\u754c\u200b\u5224\u65ad\u200b\u3002\u200b\u56e0\u4e3a\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\u4f1a\u200b\u90fd\u200b\u56db\u4e2a\u200b\u89d2\u200b\u5468\u56f4\u200b\u7684\u200b\u5143\u7d20\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6240\u4ee5\u200b\u53ea\u200b\u9700\u8981\u200b\u5728\u200b\u539f\u200b\u6570\u7ec4\u200b\u5916\u9762\u200b\u56f4\u200b\u4e00\u5708\u200b<code>0</code>\u200b\u5219\u200b\u65e0\u8bba\u662f\u200b\u8fdb\u884c\u200b<code>add</code>\u200b\u64cd\u4f5c\u200b\u8fd8\u662f\u200b<code>build</code>\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u4e0d\u200b\u9700\u8981\u200b\u8fdb\u884c\u200b\u8fb9\u754c\u200b\u68c0\u67e5\u200b\u4e86\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#p3397","title":"\u6d1b\u8c37\u200bP3397","text":"<p>\u200b\u6a21\u677f\u200b\u9898\u200b\uff0c\u200b\u6ce8\u610f\u200b\u6570\u7ec4\u200b\u5927\u5c0f\u200b\u5373\u53ef\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#_7","title":"\u725b\u5ba2\u200b [\u200b\u6a21\u677f\u200b]\u200b\u4e8c\u7ef4\u200b\u5dee\u5206","text":"<p>\u200b\u6ce8\u610f\u200b\u5982\u679c\u200b\u6570\u7ec4\u200b\u672c\u6765\u200b\u5c31\u200b\u4e0d\u200b\u5168\u4e3a\u200b0,\u200b\u9700\u8981\u200b\u5bf9\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u521d\u59cb\u200b\u5143\u7d20\u200b\u8fdb\u884c\u200b\u4e00\u6b21\u200b\u5355\u72ec\u200b\u7684\u200b<code>add</code>\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6765\u200b\u4fdd\u8bc1\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\u7684\u200b\u6b63\u786e\u6027\u200b</p> \u200b\u53c2\u8003\u200b\u4ee3\u7801\u200b C++<pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\nusing namespace std;\n\nconst int N = 1002;\n// \u200b\u4f7f\u7528\u200blong long\u200b\u9632\u6b62\u200b\u6570\u636e\u200b\u6ea2\u51fa\u200b\narray&lt;array&lt;long long, N&gt;, N&gt; diff;\n\nvoid add(int a,int b, int c, int d, long long v) {\n    diff[a][b] += v;\n    diff[c + 1][d + 1] += v;\n    diff[a][d + 1] -= v;\n    diff[c + 1][b] -= v;\n}\nint main() {\n    int n, m, q;\n    scanf(\"%d %d %d\", &amp;n, &amp;m, &amp;q);\n    for (int i = 1; i &lt;= n; i++) \n        for (int j = 1; j &lt;= m; j++) {\n            int x = 0;\n            scanf(\"%d \", &amp;x);\n            add(i, j, i, j, x);\n        }\n    while (q--) {\n        int a, b, c, d, v;\n        scanf(\"%d %d %d %d %d\", &amp;a, &amp;b, &amp;c, &amp;d, &amp;v);\n        add(a, b, c, d, v);\n    }\n\n    // \u200b\u8fd8\u539f\u200b\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n            printf(\"%lld \", diff[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#_8","title":"\u7528\u200b\u90ae\u7968\u200b\u8d34\u6ee1\u200b\u7f51\u683c\u200b\u56fe","text":"<p>\u200b\u96be\u5ea6\u200b: \u200b\u56f0\u96be\u200b</p> <p>\u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b</p> <p>\u200b\u8981\u200b\u5224\u65ad\u200b\u67d0\u200b\u4e00\u4e2a\u200b\u7a7a\u767d\u200b\u4f4d\u7f6e\u200b<code>0</code>\u200b\u662f\u5426\u200b\u81f3\u5c11\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u5927\u5c0f\u200b\u4e3a\u200b\u90ae\u7968\u200b\u5927\u5c0f\u200b\u4e14\u200b\u5f62\u72b6\u200b\u548c\u200b\u90ae\u7968\u200b\u4e00\u81f4\u200b\u7684\u200b\u76f8\u90bb\u200b\u5168\u96f6\u200b\u533a\u57df\u200b\u5982\u679c\u200b\u542b\u6709\u200b<code>1</code>\u200b\u5219\u200b\u4f1a\u200b\u6709\u200b\u5565\u200b\u4e0d\u540c\u200b\u5462\u200b\uff1f</p> <p>\u200b\u82e5\u80fd\u200b\u627e\u5230\u200b\uff0c\u200b\u80af\u5b9a\u200b\u8981\u200b\u6807\u8bb0\u200b\u8be5\u200b\u533a\u57df\u200b\u7528\u4e8e\u200b\u4e0e\u200b\u539f\u200b\u77e9\u9635\u200b\u5bf9\u6bd4\u200b\u800c\u200b\u5224\u65ad\u200b\u7b54\u6848\u200b\uff0c\u200b\u4f46\u200b\u5982\u4f55\u200b\u6807\u8bb0\u200b\u5462\u200b\uff1f</p> \u200b\u89e3\u6cd5\u200b <p>\u200b\u901a\u8fc7\u200b\u524d\u7f00\u200b\u548c\u200b\u8ba1\u7b97\u200b\u67d0\u4e00\u200b\u533a\u57df\u200b\u662f\u5426\u200b\u4e3a\u200b<code>0</code>\u200b\u8fdb\u800c\u200b\u786e\u8ba4\u200b\u8be5\u200b\u4f4d\u7f6e\u200b\u662f\u5426\u200b\u53ef\u4ee5\u200b\u8d34\u200b\u90ae\u7968\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e0d\u518d\u200b\u539f\u200b\u6570\u7ec4\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u6807\u8bb0\u200b\u3002\u200b\u800c\u662f\u200b\u91c7\u7528\u200b\u4e00\u4e2a\u200b \u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u6bcf\u6b21\u200b\u8d34\u200b\u90ae\u7968\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6700\u7ec8\u200b\u53ea\u200b\u9700\u8981\u200b\u5bf9\u6bd4\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\u548c\u200b\u539f\u200b\u6570\u7ec4\u200b\uff0c\u200b\u82e5\u200b\u5b58\u5728\u200b\u4e24\u8005\u200b\u5747\u200b\u4e3a\u200b<code>0</code>\u200b\u7684\u200b\u683c\u5b50\u200b\u5219\u200b\u8bf4\u660e\u200b\u65e0\u6cd5\u200b\u8d34\u5168\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u4ee3\u7801\u200b C++<pre><code>class Solution {\npublic:\n    typedef vector&lt;vector&lt;int&gt;&gt; vvi;\n    bool possibleToStamp(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int stampHeight, int stampWidth) {\n        int n = grid.size();\n        int m = grid[0].size();\n        vii sum(n + 1, vector&lt;int&gt;(m + 1, 0));\n        vii diff(n + 2, vector&lt;int&gt;(m + 2, 0));\n\n        // \u200b\u8ba1\u7b97\u200b\u524d\u7f00\u200b\u548c\u200b\n        for (int i = 1; i &lt;= n; ++i) {\n            for (int j = 1; j &lt;= m; ++j) {\n                sum[i][j] = grid[i - 1][j - 1] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];\n            }\n        }\n\n        // \u200b\u68c0\u67e5\u200b\u6bcf\u4e2a\u200b\u53ef\u80fd\u200b\u653e\u7f6e\u200b\u90ae\u7968\u200b\u7684\u200b\u533a\u57df\u200b\n        for (int a = 1; a + stampHeight &lt;= n + 1; a++) {\n            for (int b = 1; b + stampWidth&lt;= m + 1; b++) {\n                // \u200b\u6ce8\u610f\u200b\u51cf\u200b1\n                int c = a + stampHeight - 1;\n                int d = b + stampWidth - 1;\n                if (sumRegion(a, b, c, d, sum) == 0) {\n                    // \u200b\u66f4\u65b0\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\n                    diff[a][b] += 1;\n                    diff[a][d + 1] -= 1;\n                    diff[c + 1][b] -= 1;\n                    diff[c + 1][d + 1] += 1;\n                }\n            }\n        }\n\n        // \u200b\u8ba1\u7b97\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\u7684\u200b\u524d\u7f00\u200b\u548c\u200b\n        for (int i = 1; i &lt;= n; ++i) {\n            for (int j = 1; j &lt;= m; ++j) {\n                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n                // \u200b\u6ce8\u610f\u200b\u504f\u79fb\u91cf\u200b\n                if (grid[i - 1][j - 1] == 0 &amp;&amp; diff[i][j] == 0) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\nprivate:\n    int sumRegion(int a,int b,int c,int d, vvi &amp;g) {\n        return g[c][d] - g[a - 1][d] - g[c][b - 1] + g[a - 1][b - 1];\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Difference/#_9","title":"\u79bb\u6563\u200b\u5316\u200b\u6280\u5de7","text":"<p>\u200b\u53c2\u8003\u200b\u4e60\u9898\u200b</p> <p> leetcode LCP74.\u200b\u6700\u5f3a\u200b\u795d\u798f\u200b\u529b\u573a\u200b </p> <p>\u200b\u4e00\u53e5\u200b\u8bdd\u200b\u8bf4\u200b\u6e05\u200b\u79bb\u6563\u200b\u5316\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u7a00\u758f\u200b\u6570\u636e\u200b\u7684\u200b\u6709\u5e8f\u200b\u5173\u7cfb\u200b\u7684\u200b\u4e00\u79cd\u200b\u6620\u5c04\u200b</p> <p>\u200b\u4f8b\u5982\u200bleetcode\u200b\u8fd9\u9053\u9898\u200b\uff0c\u200b\u529b\u573a\u200b\u7684\u200b\u53ef\u80fd\u200b\u8303\u56f4\u200b\u975e\u5e38\u200b\u5927\u200b\u4f46\u200b\u6211\u4eec\u200b\u5e76\u4e0d\u9700\u8981\u200b\u4e00\u4e2a\u200b\u77e9\u5f62\u200b\u8fb9\u957f\u200b\u4e0a\u200b\u7684\u200b\u5168\u90e8\u200b\u6570\u636e\u200b\u53ea\u200b\u9700\u8981\u200b\u56db\u4e2a\u200b\u89d2\u200b\u7684\u200b\u6570\u636e\u200b\u5373\u53ef\u200b\u3002\u200b\u901a\u8fc7\u200b\u5408\u7406\u200b\u7684\u200b\u6620\u5c04\u200b\u53ef\u4ee5\u200b\u7b80\u5355\u200b\u7684\u200b\u628a\u200b\u6570\u636e\u200b\u957f\u5ea6\u200b\u957f\u200b\u4f46\u200b\u5185\u5bb9\u200b\u7a00\u758f\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6570\u636e\u200b\u957f\u5ea6\u200b\u5c0f\u4e14\u200b\u5bc6\u96c6\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u3002</p> <p>\u200b\u7f16\u7801\u200b\u6280\u5de7\u200b</p> <p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b<code>std::erase</code>\u200b\u548c\u200b<code>std::unique</code>\u200b\u5bf9\u200b\u6709\u5e8f\u200b\u6570\u7ec4\u200b\u8fdb\u884c\u200b\u53bb\u200b\u91cd\u200b</p> <p>\u200b\u4f7f\u7528\u200b<code>lower_bound</code>\u200b\u8fd4\u56de\u200b\u6700\u65e9\u200b\u51fa\u73b0\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b\u53c2\u6570\u200b\u7684\u200b\u8fed\u4ee3\u200b\u5668\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int fieldOfGreatestBlessing(vector&lt;vector&lt;int&gt;&gt;&amp; forceField) {\n        // \u200b\u907f\u514d\u51fa\u73b0\u200b0.5\n        vector&lt;long long&gt; xs, ys;\n        for (auto &amp;f : forceField) {\n            long long x = f[0], y = f[1], side = f[2];\n            xs.push_back(2 * x - side); // \u200b\u5de6\u200b\u8fb9\u754c\u200b\n            xs.push_back(2 * x + side); // \u200b\u53f3\u200b\u8fb9\u754c\u200b\n            ys.push_back(2 * y - side); // \u200b\u4e0a\u200b\u8fb9\u754c\u200b\n            ys.push_back(2 * y + side); // \u200b\u4e0b\u200b\u8fb9\u754c\u200b\n        }\n        // \u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u5e76\u200b\u53bb\u200b\u91cd\u200b\n        sort(xs.begin(), xs.end());\n        // unique\u200b\u5c06\u200b\u76f8\u90bb\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b\u79fb\u52a8\u200b\u5230\u200b\u672b\u5c3e\u200b\u5e76\u200b\u8fd4\u56de\u200b\u65b0\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u8fed\u4ee3\u200b\u5668\u200b\n        // erase(it, end)\u200b\u5220\u9664\u200bit-&gt;end\u200b\u7684\u200b\u5143\u7d20\u200b\n        xs.erase(unique(xs.begin(), xs.end()), xs.end());\n        sort(ys.begin(), ys.end());\n        ys.erase(unique(ys.begin(), ys.end()), ys.end());\n\n        // \u200b\u79bb\u6563\u200b\u5316\u200b\n        int n = xs.size(), m = ys.size(), diff[n + 2][m + 2];\n        memset(diff, 0, sizeof diff);\n        for (auto &amp;f : forceField) {\n            long long x = f[0], y = f[1], side = f[2];\n            // +1\u200b\u522b\u5fd8\u4e86\u200b\uff0cdiff\u200b\u662f\u4ece\u200b1\u200b\u5f00\u59cb\u200b\u7684\u200b!\n            int a = lower_bound(xs.begin(), xs.end(), 2 * x - side) - xs.begin() + 1; // \u200b\u5de6\u200b\u8fb9\u754c\u200b\u7684\u200b\u76f8\u5bf9\u200b\u5e8f\u53f7\u200b\n            int c = lower_bound(xs.begin(), xs.end(), 2 * x + side) - xs.begin() + 1; // \u200b\u53f3\u200b\u8fb9\u754c\u200b\u7684\u200b\u76f8\u5bf9\u200b\u5e8f\u53f7\u200b\n            int b = lower_bound(ys.begin(), ys.end(), 2 * y - side) - ys.begin() + 1; // \u200b\u4e0a\u200b\u8fb9\u754c\u200b\u7684\u200b\u76f8\u5bf9\u200b\u5e8f\u53f7\u200b\n            int d = lower_bound(ys.begin(), ys.end(), 2 * y + side) - ys.begin() + 1; // \u200b\u4e0b\u200b\u8fb9\u754c\u200b\u7684\u200b\u76f8\u5bf9\u200b\u5e8f\u53f7\u200b\n            // \u200b\u4e8c\u7ef4\u200b\u5dee\u5206\u200b\n            diff[a][b] += 1;\n            diff[c + 1][d + 1] += 1;\n            diff[c + 1][b] -= 1;\n            diff[a][d + 1] -= 1;\n        }\n\n        // \u200b\u524d\u7f00\u200b\u548c\u200b\u8fd8\u539f\u200b\u5dee\u5206\u200b\u6570\u7ec4\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5e76\u200b\u8ba1\u7b97\u200b\u6700\u5927\u503c\u200b\n        int ans = 0;\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= m; j++) {\n                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n                ans = max(ans, diff[i][j]);\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Disjoined%20Set/","title":"\u5e76\u200b\u67e5\u96c6\u200b(\u200b\u4e0d\u200b\u76f8\u4ea4\u200b\u96c6\u200b)","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u5e76\u200b\u67e5\u96c6\u200b\uff08Disjoint Set Union\uff0cDSU\uff09\u200b\u200b\u662f\u200b\u4e00\u79cd\u200b\u9ad8\u6548\u200b\u5904\u7406\u200b\u4e0d\u200b\u76f8\u4ea4\u200b\u96c6\u5408\u200b\u5408\u5e76\u200b\u53ca\u200b\u67e5\u8be2\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c\u200b\u652f\u6301\u200b\u4e24\u79cd\u200b\u6838\u5fc3\u200b\u64cd\u4f5c\u200b\uff1a</p> <p>\u200b\u200b\u5408\u5e76\u200b\uff08Union\uff09\u200b\u200b\uff1a\u200b\u5c06\u200b\u4e24\u4e2a\u200b\u96c6\u5408\u200b\u5408\u5e76\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u3002 \u200b\u200b\u67e5\u627e\u200b\uff08Find\uff09\u200b\u200b\uff1a\u200b\u786e\u5b9a\u200b\u5143\u7d20\u200b\u5c5e\u4e8e\u200b\u54ea\u4e2a\u200b\u96c6\u5408\u200b\uff08\u200b\u901a\u5e38\u200b\u901a\u8fc7\u200b\u201c\u200b\u4ee3\u8868\u200b\u5143\u200b\u201d\u200b\u6807\u8bc6\u200b\uff09\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u8def\u5f84\u200b\u538b\u7f29\u200b\u548c\u200b\u6309\u200b\u79e9\u200b\u5408\u5e76\u200b\u4f18\u5316\u200b\uff0c\u200b\u5355\u6b21\u200b\u64cd\u4f5c\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u63a5\u8fd1\u200b\u5e38\u6570\u200b\u3002</p> <p>\u200b\u76f8\u5173\u200b\u4f8b\u9898\u200b</p> <p>\u200b\u5e76\u200b\u67e5\u96c6\u200b\u6a21\u677f\u200b</p> <p>\u200b\u5e76\u200b\u67e5\u96c6\u200b\u6a21\u677f\u200b</p> <p>leetcode765.Couples Holding Hands</p> <p>leetcode839.Similar String Groups</p> <p>leetcode200.Number of Islands</p> <p>leetcode947.Most Stones Removed with Same Row or Column</p> <p>leetcode2092.Find All People With Secret </p> <p>leetcode2421.Number of Good Paths </p> <p>leetcode928.Minimize Malware Spread II</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Disjoined%20Set/#_2","title":"\u5e76\u200b\u67e5\u96c6\u200b\u57fa\u672c\u200b\u5185\u5bb9","text":"<p>Warning</p> <p>\u200b\u5e26\u6743\u200b\u5e76\u200b\u67e5\u96c6\u200b\u3001\u200b\u53ef\u200b\u6301\u4e45\u200b\u5316\u200b\u5e76\u200b\u67e5\u96c6\u200b\u3001\u200b\u53ef\u200b\u64a4\u9500\u200b\u5e76\u200b\u67e5\u96c6\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u5907\u6218\u200b\u7b97\u6cd5\u200b\u7ade\u8d5b\u200b\u7684\u200b\u5fc5\u5907\u200b\u5185\u5bb9\u200b\u4f1a\u200b\u5728\u200b<code>intermediate</code>\u200b\u6807\u7b7e\u200b\u4e0b\u9762\u200b\u603b\u7ed3\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Disjoined%20Set/#_3","title":"\u5e76\u200b\u67e5\u96c6\u200b\u6a21\u677f","text":"<p>\u200b\u53c2\u8003\u200b\u6a21\u677f\u200b</p> <p>// find \u200b\u64cd\u4f5c\u200b int find(int i) {     int top = 0;     // \u200b\u7528\u6808\u200b\u6a21\u62df\u200b\u9012\u5f52\u200b     while (i != father[i]) {         stack[top++] = i;         i = father[i];     }</p> Text Only<pre><code>// \u200b\u5c06\u200b\u6cbf\u9014\u200b\u8282\u70b9\u200b\u5168\u90e8\u200b\u6307\u5411\u200b\u6839\u200b\u8282\u70b9\u200b\n// \u200b\u8def\u5f84\u200b\u538b\u7f29\u200b\nwhile (top &gt; 0) father[stack[--top]] = i;\nreturn i;\n</code></pre> <p>}</p> <p>// Union\u200b\u64cd\u4f5c\u200b void Union(int x, int y) {     int fx = find(x);     int fy = find(y);     if (fx != fy) {         // \u200b\u6309\u200b\u79e9\u200b\u5408\u5e76\u200b         if (size[fx] &gt;= size[fy]) {             size[fx] += size[fy];             father[fy] = fx;         } else {             size[fy] += size[fx];             father[fx] = fy;         }     } }</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Disjoined%20Set/#_4","title":"\u76f8\u5173\u200b\u4f8b\u9898","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Disjoined%20Set/#q1couples-holding-hands","title":"Q1:Couples Holding Hands","text":"<p>\u200b\u9898\u76ee\u200b</p> <p><code>n</code> \u200b\u5bf9\u200b\u60c5\u4fa3\u200b\u5750\u5728\u200b\u8fde\u7eed\u200b\u6392\u5217\u200b\u7684\u200b <code>2n</code>\u00a0\u200b\u4e2a\u200b\u5ea7\u4f4d\u200b\u4e0a\u200b\uff0c\u200b\u60f3\u8981\u200b\u7275\u200b\u5230\u200b\u5bf9\u65b9\u200b\u7684\u200b\u624b\u200b\u3002</p> <p>\u200b\u4eba\u200b\u548c\u200b\u5ea7\u4f4d\u200b\u7531\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b <code>row</code> \u200b\u8868\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200b <code>row[i]</code> \u200b\u662f\u200b\u5750\u5728\u200b\u7b2c\u200b <code>i</code> \u200b\u4e2a\u200b\u5ea7\u4f4d\u200b\u4e0a\u200b\u7684\u200b\u4eba\u200b\u7684\u200b ID\u3002\u200b\u60c5\u4fa3\u200b\u4eec\u200b\u6309\u200b\u987a\u5e8f\u200b\u7f16\u53f7\u200b\uff0c\u200b\u7b2c\u4e00\u200b\u5bf9\u200b\u662f\u200b\u00a0<code>(0, 1)</code>\uff0c\u200b\u7b2c\u4e8c\u200b\u5bf9\u200b\u662f\u200b\u00a0<code>(2, 3)</code>\uff0c\u200b\u4ee5\u6b64\u7c7b\u63a8\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u5bf9\u200b\u662f\u200b\u00a0<code>(2n-2, 2n-1)</code>\u3002</p> <p>\u200b\u8fd4\u56de\u200b \u200b\u6700\u5c11\u200b\u4ea4\u6362\u200b\u5ea7\u4f4d\u200b\u7684\u200b\u6b21\u6570\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6bcf\u200b\u5bf9\u200b\u60c5\u4fa3\u200b\u53ef\u4ee5\u200b\u5e76\u80a9\u200b\u5750\u5728\u200b\u4e00\u8d77\u200b\u3002 \u200b\u6bcf\u6b21\u200b\u4ea4\u6362\u200b\u53ef\u200b\u9009\u62e9\u200b\u4efb\u610f\u200b\u4e24\u4eba\u200b\uff0c\u200b\u8ba9\u200b\u4ed6\u4eec\u200b\u7ad9\u200b\u8d77\u6765\u200b\u4ea4\u6362\u200b\u5ea7\u4f4d\u200b\u3002</p> hit \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int minSwapsCouples(vector&lt;int&gt;&amp; row) {\n        build(row.size() / 2);\n        for (int i = 0; i &lt; row.size(); i += 2) Union(row[i] / 2, row[i + 1] / 2);\n        return row.size() / 2 - sets;\n    }\nprivate:\n    static const int N = 32;\n    std::array&lt;int, N&gt; father;\n    int sets = 0; // \u200b\u7edf\u8ba1\u200b\u96c6\u5408\u200b\u6570\u200b\n\n    void build(int m) {\n        for (int i = 0; i &lt; m; ++i) father[i] = i;\n        sets = m;\n    }\n\n    int find(int i) {\n        if (i != father[i]) i = find(father[i]);\n        return father[i];\n    }\n\n    void Union(int x, int y) {\n        int fx = find(x);\n        int fy = find(y);\n        if (fx != fy) {\n            father[fx] = fy;\n            --sets;\n        }\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Disjoined%20Set/#q2similar-string-groups","title":"Q2:Similar String Groups","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Disjoined%20Set/#q3number-of-islands","title":"Q3:Number of Islands","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Disjoined%20Set/#_5","title":"\u603b\u7ed3","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Flood%20Fill/","title":"\u6d2a\u6c34\u200b\u586b\u5145\u200b\u7b97\u6cd5","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u76f8\u5173\u200b\u4f8b\u9898\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Flood%20Fill/#_2","title":"\u6d2a\u6c34\u200b\u586b\u5145\u200b\u7b97\u6cd5\u200b\u7684\u200b\u57fa\u672c\u200b\u5185\u5bb9","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Flood%20Fill/#_3","title":"\u6a21\u677f","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Flood%20Fill/#_4","title":"\u76f8\u5173\u200b\u4e60\u9898","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Flood%20Fill/#_5","title":"\u603b\u7ed3","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/GCD%20and%20Congruence/","title":"\u6700\u5927\u516c\u7ea6\u6570\u200b\u95ee\u9898\u200b\u548c\u200b\u540c\u4f59\u200b\u539f\u7406","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/GCD%20and%20Congruence/#_2","title":"\u6700\u5927\u516c\u7ea6\u6570\u200b\u95ee\u9898","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/GCD%20and%20Congruence/#_3","title":"\u540c\u4f59\u200b\u539f\u7406","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Infer%20by%20data/","title":"\u5929\u5b57\u7b2c\u4e00\u53f7\u200b\u6280\u5de7\u200b-\u200b\u901a\u8fc7\u200b\u6570\u636e\u91cf\u200b\u63a8\u6d4b\u200b\u89e3\u6cd5","text":"","tags":["Algorithm","Tips"]},{"location":"CS/Algorithm/Beginner/ListQuestions/","title":"ListQuestions","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u51e0\u9053\u200b\u6709\u5173\u200b\u94fe\u8868\u200b\u7684\u200b\u7ecf\u5178\u200b\u9898\u76ee\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#_1","title":"\u94fe\u8868\u200b\u9ad8\u9891\u200b\u9898\u76ee","text":"Text Only<pre><code>\u200b\u94fe\u200b\u8868\u9762\u200b\u8bd5\u9898\u200b\u4e00\u822c\u200b\u662f\u200b\u8003\u5bdf\u200b`coding`\u200b\u80fd\u529b\u200b\u800c\u200b\u4e0d\u662f\u200b\u7b97\u6cd5\u200b\u601d\u7ef4\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4e0b\u9762\u200b\u7684\u200b\u94fe\u8868\u200b\u9898\u200b\u4e00\u5b9a\u200b\u8981\u200b\u5168\u90e8\u200b\u638c\u63e1\u200b!\n</code></pre> <p>\u200b\u53c2\u8003\u200b\u4e60\u9898\u200b</p> <p>leetcode 160.\u200b\u76f8\u4ea4\u200b\u94fe\u8868\u200b Easy</p> <p>leetcode 25 K\u200b\u4e2a\u200b\u4e00\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868\u200b Hard</p> <p>leetcode 138.\u200b\u968f\u673a\u200b\u94fe\u8868\u200b\u7684\u200b\u590d\u5236\u200b mid</p> <p>leetcode 234\u200b\u56de\u6587\u200b\u94fe\u8868\u200b easy</p> <p>leetcode 142\u200b\u73af\u5f62\u200b\u94fe\u8868\u200bII mid</p> <p>leetcode 148\u200b\u94fe\u8868\u200b\u6392\u5e8f\u200b(\u200b\u601d\u8def\u200bmid,\u200b\u4ee3\u7801\u200bhard)</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#_2","title":"\u94fe\u8868\u200b\u9898\u200b\u7684\u200b\u6ce8\u610f\u200b\u70b9","text":"<ul> <li>\u200b\u7a7a\u95f4\u200b\u8981\u6c42\u200b\u4e0d\u200b\u4e25\u683c\u200b \u200b\u4f7f\u7528\u200b\u5bb9\u5668\u200b\u5b9e\u73b0\u200b\u5373\u53ef\u200b</li> <li>\u200b\u7a7a\u95f4\u200b\u8981\u6c42\u200b\u4e25\u683c\u200b  \u200b\u8981\u6c42\u200bO(1)\u200b\u7684\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b</li> <li>\u200b\u6700\u200b\u5e38\u7528\u200b\u6280\u5de7\u200b-\u200b\u5feb\u6162\u200b\u6307\u9488\u200b</li> <li>\u200b\u672c\u8d28\u200b\u4e0d\u662f\u200b\u7b97\u6cd5\u200b\u8bbe\u8ba1\u200b\u80fd\u529b\u200b\u800c\u662f\u200bcoding\u200b\u80fd\u529b\u200b</li> <li>\u200b\u94fe\u8868\u200b\u9700\u8981\u200b\u591a\u591a\u200b\u8bad\u7ec3\u200b\u624d\u200b\u53ef\u4ee5\u200b\uff01</li> </ul> <p>\u200b\u63d0\u9192\u200b</p> <p>\u200b\u66f4\u96be\u200b\u7684\u200b\u94fe\u8868\u200b\u9898\u4f1a\u200b\u5728\u200b\u7ea6\u745f\u592b\u200b\u73af\u200b\u4e13\u9898\u200b\u4e2d\u200b\u8bb2\u89e3\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#_3","title":"\u7ecf\u5178\u200b\u9898\u76ee","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#question-1","title":"Question 1 \u200b\u4e24\u4e2a\u200b\u94fe\u8868\u200b\u76f8\u4ea4\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u8282\u70b9","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#question-2","title":"Question 2 \u200b\u6309\u7ec4\u200b\u53cd\u8f6c\u200b\u94fe\u8868","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#question-3","title":"Question 3 \u200b\u590d\u5236\u200b\u5e26\u200b\u968f\u673a\u200b\u6307\u9488\u200b\u7684\u200b\u94fe\u8868","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#question-4","title":"Question 4 \u200b\u5224\u65ad\u200b\u94fe\u8868\u200b\u662f\u5426\u200b\u5b58\u6709\u200b\u56de\u6587\u7ed3\u6784","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#question-5","title":"Question 5 \u200b\u94fe\u8868\u200b\u7b2c\u4e00\u4e2a\u200b\u5165\u200b\u73af\u8282\u200b\u70b9","text":"Floyd\u200b\u5224\u5708\u200b\u7b97\u6cd5\u200b <p>\u200b\u5982\u679c\u200b\u6709\u9650\u200b\u72b6\u6001\u673a\u200b\u3001\u200b\u8fed\u4ee3\u200b\u51fd\u6570\u200b\u6216\u8005\u200b\u94fe\u8868\u200b\u5b58\u5728\u200b\u73af\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4e00\u5b9a\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u8d77\u70b9\u200b\u53ef\u4ee5\u200b\u5230\u8fbe\u200b\u67d0\u4e2a\u200b\u73af\u200b\u7684\u200b\u67d0\u5904\u200b(\u200b\u8fd9\u4e2a\u200b\u8d77\u70b9\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u67d0\u4e2a\u200b\u73af\u4e0a\u200b)\u3002</p> <p>\u200b\u521d\u59cb\u72b6\u6001\u200b\u4e0b\u200b\uff0c\u200b\u5047\u8bbe\u200b\u5df2\u77e5\u200b\u67d0\u4e2a\u200b\u8d77\u70b9\u200b\u8282\u70b9\u200b\u4e3a\u200b\u8282\u70b9\u200bS\u3002\u200b\u73b0\u8bbe\u200b\u4e24\u4e2a\u200b\u6307\u9488\u200bt\u200b\u548c\u200bh\uff0c\u200b\u5c06\u200b\u5b83\u4eec\u200b\u5747\u200b\u6307\u5411\u200bS\u3002</p> <p>\u200b\u63a5\u7740\u200b\uff0c\u200b\u540c\u65f6\u200b\u8ba9\u200bt\u200b\u548c\u200bh\u200b\u5f80\u524d\u200b\u63a8\u8fdb\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e8c\u8005\u200b\u7684\u200b\u901f\u5ea6\u200b\u4e0d\u540c\u200b\uff1at\u200b\u6bcf\u200b\u524d\u8fdb\u200b1\u200b\u6b65\u200b\uff0ch\u200b\u524d\u8fdb\u200b2\u200b\u6b65\u200b\u3002\u200b\u53ea\u8981\u200b\u4e8c\u8005\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u524d\u8fdb\u200b\u800c\u4e14\u200b\u6ca1\u6709\u200b\u76f8\u9047\u200b\uff0c\u200b\u5c31\u200b\u5982\u6b64\u200b\u4fdd\u6301\u200b\u4e8c\u8005\u200b\u7684\u200b\u63a8\u8fdb\u200b\u3002\u200b\u5f53\u200bh\u200b\u65e0\u6cd5\u200b\u524d\u8fdb\u200b\uff0c\u200b\u5373\u200b\u5230\u8fbe\u200b\u67d0\u4e2a\u200b\u6ca1\u6709\u200b\u540e\u7ee7\u200b\u7684\u200b\u8282\u70b9\u200b\u65f6\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u786e\u5b9a\u200b\u4ece\u200bS\u200b\u51fa\u53d1\u200b\u4e0d\u4f1a\u200b\u9047\u5230\u200b\u73af\u200b\u3002\u200b\u53cd\u4e4b\u200b\u5f53\u200bt\u200b\u4e0e\u200bh\u200b\u518d\u6b21\u200b\u76f8\u9047\u200b\u65f6\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u786e\u5b9a\u200b\u4ece\u200bS\u200b\u51fa\u53d1\u200b\u4e00\u5b9a\u200b\u4f1a\u200b\u8fdb\u5165\u200b\u67d0\u4e2a\u200b\u73af\u200b\uff0c\u200b\u8bbe\u5176\u4e3a\u200b\u73af\u200bC\u3002</p> <p>\u200b\u5982\u679c\u200b\u786e\u5b9a\u200b\u4e86\u200b\u5b58\u5728\u200b\u67d0\u4e2a\u200b\u73af\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6c42\u6b64\u200b\u73af\u200b\u7684\u200b\u8d77\u70b9\u200b\u4e0e\u200b\u957f\u5ea6\u200b\u3002</p> <p>\u200b\u4e0a\u8ff0\u200b\u7b97\u6cd5\u200b\u521a\u200b\u5224\u65ad\u200b\u51fa\u200b\u5b58\u5728\u200b\u73af\u200bC\u200b\u65f6\u200b\uff0c\u200b\u663e\u7136\u200bt\u200b\u548c\u200bh\u200b\u4f4d\u4e8e\u200b\u540c\u4e00\u200b\u8282\u70b9\u200b\uff0c\u200b\u8bbe\u5176\u4e3a\u200b\u8282\u70b9\u200bM\u3002\u200b\u663e\u7136\u200b\uff0c\u200b\u4ec5\u200b\u9700\u4ee4\u200bh\u200b\u4e0d\u200b\u52a8\u200b\uff0c\u200b\u800c\u200bt\u200b\u4e0d\u65ad\u200b\u63a8\u8fdb\u200b\uff0c\u200b\u6700\u7ec8\u200b\u53c8\u200b\u4f1a\u200b\u8fd4\u56de\u200b\u8282\u70b9\u200bM\uff0c\u200b\u7edf\u8ba1\u200b\u8fd9\u200b\u4e00\u6b21\u200bt\u200b\u63a8\u8fdb\u200b\u7684\u200b\u6b65\u6570\u200b\uff0c\u200b\u663e\u7136\u200b\u8fd9\u200b\u5c31\u662f\u200b\u73af\u200bC\u200b\u7684\u200b\u957f\u5ea6\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u6c42\u51fa\u200b\u73af\u200bC\u200b\u7684\u200b\u8d77\u70b9\u200b\uff0c\u200b\u53ea\u8981\u200b\u4ee4\u200bh\u200b\u4ecd\u200b\u4f4d\u4e8e\u200b\u8282\u70b9\u200bM\uff0c\u200b\u800c\u4ee4\u200bt\u200b\u8fd4\u56de\u200b\u8d77\u70b9\u200b\u8282\u70b9\u200bS\uff0c\u200b\u6b64\u65f6\u200bh\u200b\u4e0e\u200bt\u200b\u4e4b\u95f4\u200b\u8ddd\u4e3a\u200b\u73af\u200bC\u200b\u957f\u5ea6\u200b\u7684\u200b\u6574\u6570\u500d\u200b\u3002\u200b\u968f\u540e\u200b\uff0c\u200b\u540c\u65f6\u200b\u8ba9\u200bt\u200b\u548c\u200bh\u200b\u5f80\u524d\u200b\u63a8\u8fdb\u200b\uff0c\u200b\u4e14\u200b\u4fdd\u6301\u200b\u4e8c\u8005\u200b\u7684\u200b\u901f\u5ea6\u200b\u76f8\u540c\u200b\uff1at\u200b\u6bcf\u200b\u524d\u8fdb\u200b1\u200b\u6b65\u200b\uff0ch\u200b\u524d\u8fdb\u200b1\u200b\u6b65\u200b\u3002\u200b\u6301\u7eed\u200b\u8be5\u200b\u8fc7\u7a0b\u200b\u76f4\u81f3\u200bt\u200b\u4e0e\u200bh\u200b\u518d\u200b\u4e00\u6b21\u200b\u76f8\u9047\u200b\uff0c\u200b\u8bbe\u200b\u6b64\u6b21\u200b\u76f8\u9047\u200b\u65f6\u200b\u4f4d\u4e8e\u200b\u540c\u4e00\u200b\u8282\u70b9\u200bP\uff0c\u200b\u5219\u200b\u8282\u70b9\u200bP\u200b\u5373\u200b\u4e3a\u200b\u4ece\u200b\u8282\u70b9\u200bS\u200b\u51fa\u53d1\u200b\u6240\u200b\u5230\u8fbe\u200b\u7684\u200b\u73af\u200bC\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u8282\u70b9\u200b\uff0c\u200b\u5373\u73af\u200bC\u200b\u7684\u200b\u4e00\u4e2a\u200b\u8d77\u70b9\u200b\u3002</p> <p>\u200b\u8bc1\u660e\u200b\u5bfb\u627e\u200b\u5165\u200b\u73af\u8282\u200b\u70b9\u200b\u7684\u200b\u6b63\u786e\u6027\u200b</p> <p>\u200b\u5047\u8bbe\u200b\u4ece\u200b\u8dd1\u9053\u200b\u8d77\u70b9\u200bA\u200b\u5230\u200b\u73af\u200b\u8d77\u70b9\u200bB\u200b\u7684\u200b\u8def\u7a0b\u200b\u4e3a\u200b\\(m\\),\u200b\u4ece\u200bB\u200b\u70b9\u5230\u200b\u76f8\u9047\u200b\u70b9\u200bC\u200b\u7684\u200b\u8def\u7a0b\u200b\u4e3a\u200b\\(k\\),\u200b\u73af\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\\(n\\),\u200b\u5219\u200b\u76f8\u9047\u200b\u7684\u200b\u65f6\u5019\u200b\u4e4c\u9f9f\u200b(\u200b\u6162\u200b\u6307\u9488\u200b)\u200b\u8d70\u8fc7\u200b\u7684\u200b\u8ddd\u79bb\u200b\u4e3a\u200b:</p> \\[S_1=m+k+t_1*n\\] <p>\u200b\u5154\u5b50\u200b(\u200b\u5feb\u200b\u6307\u9488\u200b)\u200b\u8d70\u8fc7\u200b\u7684\u200b\u8ddd\u79bb\u200b\u4e3a\u200b\uff1a</p> \\[S_2=m + k + t_2 * n(t_2&gt;t_1)\\] <p>\u200b\u4e14\u200b\\(S_2=2*S_1\\)\u200b\u5219\u200b\u7531\u200b\u4e0a\u5f0f\u200b\u53ef\u4ee5\u200b\u63a8\u51fa\u200b</p> \\[ \\begin{align*}     S_1&amp;=S_2-S_1=(t_2-t_1)*n \\\\     S_2 &amp;= 2 * (t_2-t_1) * n \\end{align*} \\] <p>\u200b\u5373\u200b\u5feb\u6162\u200b\u6307\u9488\u200b\u8d70\u8fc7\u200b\u7684\u200b\u8ddd\u79bb\u200b\u90fd\u200b\u662f\u200b\u73af\u957f\u200b\u7684\u200b\u500d\u6570\u200b\uff0c\u200b\u800c\u200b\\(m + k = (t_2 - 2 * t_1) * n\\)\u200b\u4e5f\u200b\u662f\u200b\u73af\u957f\u200b\u7684\u200b\u500d\u6570\u200b \u200b\u5f53\u5feb\u200b\u6307\u9488\u200b\u56de\u5230\u200b\u8dd1\u9053\u200b\u8d77\u59cb\u200b\u70b9\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u6162\u200b\u6307\u9488\u200b\u4ece\u200b\u76f8\u9047\u200b\u70b9\u200b\u51fa\u53d1\u200b.\u200b\u6b64\u65f6\u200b\u5f53\u5feb\u200b\u6307\u9488\u200b\u8d70\u5230\u200b\u73af\u200b\u8d77\u70b9\u200b\u7684\u200b\u65f6\u5019\u200b\u7ecf\u8fc7\u200b\u4e86\u200bm\u200b\u6b64\u65f6\u200b\u6162\u200b\u6307\u9488\u200b\u8d70\u8fc7\u200b\u4e86\u200b\\(k+m\\)\u200b\u5373\u200b\u73af\u957f\u200b\u500d\u6570\u200b\u4e5f\u200b\u5c31\u200b\u56de\u5230\u200b\u4e86\u200b\u73af\u200b\u7684\u200b\u8d77\u70b9\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/ListQuestions/#question-6","title":"Question 6 \u200b\u94fe\u8868\u200b\u6392\u5e8f","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Logarithmic%20meter/","title":"\u5bf9\u6570\u200b\u5668\u200b\u6253\u8868\u200b\u627e\u200b\u89c4\u5f8b\u200b\u6280\u5de7","text":"","tags":["Algorithm","Tips"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/","title":"\u5355\u8c03\u200b\u961f\u5217","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\uff08Monotonic Queue\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b\u7279\u6b8a\u200b\u7684\u200b\u961f\u5217\u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u9ad8\u6548\u200b\u7ef4\u62a4\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5185\u200b\u7684\u200b\u6781\u503c\u200b\uff08\u200b\u6700\u5927\u503c\u200b/\u200b\u6700\u5c0f\u503c\u200b\uff09\uff0c\u200b\u5728\u200b\u7b97\u6cd5\u200b\u4f18\u5316\u200b\u4e2d\u200b\u80fd\u200b\u663e\u8457\u200b\u964d\u4f4e\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u4e00\u7ae0\u200b\u8fd8\u662f\u200b\u6bd4\u8f83\u200b\u96be\u200b\u7684\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4f8b\u9898\u200b\u4e5f\u200b\u80fd\u200b\u770b\u200b\u51fa\u6765\u200b\u57fa\u672c\u200b\u5168\u662f\u200bhard\u200b\u9898\u200b....</p> <p>\u200b\u76f8\u5173\u200b\u4f8b\u9898\u200b</p> <p>leetcode239.Sliding Window Maximum(\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\u6a21\u677f\u200b\u9898\u200b)</p> <p>leetcode1438.Longest Continuous Sub-array with absolute diff less than or equal to limit</p> <p>P2698.Flowerpot S</p> <p>leetcode862.Shortest Sub-array with Sum at least K</p> <p>leetcode499.Max Value of Equation</p> <p>leetcode2071.Maximum Number of Tasks you can Assign</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#_2","title":"\u5355\u8c03\u200b(\u200b\u53cc\u7aef\u200b)\u200b\u961f\u5217\u200b\u7684\u200b\u5185\u5bb9","text":"<p>\u200b\u80fd\u200b\u5728\u200bO(N)\u200b\u7684\u200b\u65f6\u95f4\u200b\u5185\u200b\u7ef4\u6301\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7684\u200b\u6700\u5927\u200b|\u200b\u6700\u5c0f\u503c\u200b.</p> <p>\u200b\u5bf9\u6bd4\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u8bb0\u5f55\u200b\u5f53\u524d\u200b\u7a97\u53e3\u200b\u7684\u200b\u6700\u5927\u503c\u200b\\\u200b\u6700\u5c0f\u503c\u200b\uff0c\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\u7684\u200b\u597d\u5904\u200b\u5728\u4e8e\u200b\u5373\u4f7f\u200b\u5f53\u524d\u200b\u7684\u200b\u6700\u5927\u503c\u200b\\\u200b\u6700\u5c0f\u503c\u200b\u79fb\u51fa\u200b\u7a97\u53e3\u200b\u4e5f\u200b\u4e0d\u200b\u9700\u8981\u200b \u200b\u91cd\u65b0\u200b\u904d\u5386\u200b\u4e00\u8fb9\u200b\u7a97\u53e3\u200b\u6765\u200b\u5bfb\u627e\u200b\u66ff\u4ee3\u54c1\u200b(O(N))\u3002</p> <p>\u200b\u4ee5\u200b\u5355\u8c03\u200b\u9012\u51cf\u200b\u961f\u5217\u200b\u7ef4\u62a4\u200b\u6700\u5927\u503c\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u5047\u8bbe\u200b\u6570\u7ec4\u200b\u4e3a\u200b nums = [1,3,-1,-3,5,3,6,7], k=3</p> <ul> <li> <p>i = 0, num = 1, q=[], \u200b\u52a0\u5165\u200b<code>1</code>\u200b\u7684\u200b\u7d22\u5f15\u200b<code>0</code>,\u200b\u5219\u200bq[0] = 0;</p> </li> <li> <p>i = 1, num = 3, \u200b\u4e14\u200b<code>nums[0] = 1 &lt; 3</code>\u200b\u79fb\u9664\u200b<code>0</code>, q = [], \u200b\u52a0\u5165\u200b 1 -&gt; q,q = [1]</p> </li> <li>i = 2, num = -1, <code>-1 &lt; 3</code>\u200b\u52a0\u5165\u200b\u961f\u5217\u200b, 2 -&gt; q, q = [1, 2]</li> <li>\u200b\u6b64\u65f6\u200b\u7a97\u53e3\u200b\u6700\u5927\u503c\u200b\u4e3a\u200b<code>nums[1] = 3</code></li> <li>i = 3, num = -3, \u200b\u68c0\u67e5\u200bq[0] = 1\u200b\u662f\u5426\u200b\u8d85\u51fa\u200b\u7a97\u53e3\u200b\u8303\u56f4\u200b,\u200b\u6b64\u65f6\u200b\u7a97\u53e3\u200b\u8303\u56f4\u200b\u4e3a\u200b[1, 2, 3]<code>1</code>\u200b\u5728\u200b\u8303\u56f4\u200b\u5185\u200b\uff0c\u200b\u6545\u200b\u4e0d\u200b\u9700\u8981\u200b\u6700\u5927\u503c\u200b\u672a\u200b\u8fc7\u671f\u200b\uff0c<code>-3 &lt; 3</code>\u200b\u52a0\u5165\u200b\u961f\u5217\u200b, 3 -&gt;q, q = [1, 2, 3]</li> <li>i = 4, num = 5, </li> <li>nums[3] = -3 &lt; 5 \u200b\u5f39\u200b\u51fa\u200b 3</li> <li>nums[2] = -1 &lt; 5 \u200b\u5f39\u200b\u51fa\u200b 2</li> <li>nums[1] = 3 &lt; 5 \u200b\u5f39\u200b\u51fa\u200b 1</li> <li>\u200b\u6b64\u65f6\u200b\u961f\u200b\u5217\u4e3a\u200b\u7a7a\u200b q = []</li> <li>4 -&gt; q , q = [4]</li> <li>\u200b\u7a97\u53e3\u200b\u6700\u5927\u503c\u200b\u4e3a\u200b<code>nums[4]</code></li> <li>i = 5, num = 3,  <code>3 &lt; 5</code>,\u200b\u4e14\u200b<code>4</code>\u200b\u672a\u200b\u8d85\u8fc7\u200b\u7a97\u53e3\u200b, 5-&gt;q, q = [4, 5]</li> <li>i = 6, num = 6, <code>6 &gt; 3</code>\u200b\u5f39\u200b\u51fa\u200b5, <code>6 &gt; 5</code>\u200b\u5f39\u200b\u51fa\u200b4\uff0c\u200b\u961f\u200b\u5217\u4e3a\u200b\u7a7a\u200b 6 -&gt; q, q = [6],\u200b\u6b64\u65f6\u200b\u6700\u5927\u503c\u200b\u4e3a\u200bnums[6]</li> <li>i = 7, num = 7, <code>7 &gt; 6</code>,\u200b\u5f39\u200b\u51fa\u200b6, \u200b\u961f\u200b\u5217\u4e3a\u200b\u7a7a\u200b 7 -&gt; q, q = [7],\u200b\u6b64\u65f6\u200b\u6700\u5927\u503c\u200b\u4e3a\u200bnums[7]</li> </ul> <p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\\\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b</p> <p>\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\u7684\u200b\u644a\u8fd8\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u662f\u200b\\(O(N)\\) --- \u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u6700\u200b\u591a\u200b\u8fdb\u5165\u200b\u961f\u5217\u200b\u4e00\u6b21\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u6700\u591a\u200b\u88ab\u200b\u79fb\u9664\u200b\u4e00\u6b21\u200b</p> <p>\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\u662f\u200b\\(O(N)\\)</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#_3","title":"\u5355\u8c03\u200b\u961f\u5217\u200b\u7684\u200b\u6a21\u677f","text":"<p>\u200b\u53c2\u8003\u200b\u6a21\u677f\u200b</p> C++<pre><code>class Solution {\npublic:\n    // k is the size of sliding window\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        int n = nums.size();\n        // \u200b\u9884\u5904\u7406\u200b\u524d\u200b k - 1\u200b\u4e2a\u200b\u5143\u7d20\u200b\n        for (int i = 0; i &lt; k - 1; ++i) {\n            while (h &lt; t &amp;&amp; nums[deque[t - 1]] &lt;= nums[i]) --t;\n            deque[t++] = i;\n        }\n\n        int m = n - k + 1;\n        vector&lt;int&gt; ans(m, 0); // \u200b\u4e00\u5171\u200b\u6709\u200b n - k + 1\u200b\u4e2a\u200b\u7a97\u53e3\u200b\n\n        // l \u200b\u8868\u793a\u200b\u7a97\u53e3\u200b\u5de6\u8fb9\u200b\u754c\u9762\u200b\uff0cr\u200b\u8868\u793a\u200b\u7a97\u53e3\u200b\u53f3\u200b\u8fb9\u754c\u200b\n        // \u200b\u6bcf\u6b21\u200b\u5411\u200b\u53f3\u200b\u6ed1\u52a8\u200b\u4e00\u6b21\u200b\n        for (int l = 0, r = k - 1; l &lt; m; ++l, ++r) {\n            // \u200b\u7ef4\u62a4\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\n            while (h &lt; t &amp;&amp; nums[deque[t - 1]] &lt;= nums[r]) --t;\n            deque[t++] = r;\n            // \u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u7a97\u53e3\u200b\u7684\u200b\u6700\u5927\u503c\u200b\n            ans[l] = nums[deque[h]];\n\n            // \u200b\u5c06\u200b\u8fc7\u671f\u200b\u5143\u7d20\u200b\u5220\u9664\u200b\n            if (deque[h] == l) ++h;\n        }\n        return ans;\n    }\nprivate:\n    static const int N = 1e5 + 10;\n    array&lt;int, N&gt; deque;\n    int h = 0, t = 0;\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#_4","title":"\u8bfe\u4e0a\u200b\u4f8b\u9898","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#q1-longest-continuous-sub-array-with-absolute-diff-less-than-or-equal-to-limit","title":"Q1: Longest Continuous Sub-array with absolute diff less than or equal to limit","text":"<p>\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</p> <p>Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.</p> <p>\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5728\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5185\u200b\u6700\u5927\u503c\u200b\u4e0e\u200b\u6700\u5c0f\u503c\u200b\u7684\u200b\u5dee\u200b\u7684\u200b\u7edd\u5bf9\u503c\u200b\u8981\u200b\u5c0f\u4e8e\u200b\u7b49\u4e8e\u200blimit\u200b\u7684\u200b\u6700\u5927\u200b\u7a97\u53e3\u200b\u957f\u5ea6\u200b,</p> Hit <ul> <li>\u200b\u8003\u8651\u200b\u5982\u4e0b\u200b\u5355\u8c03\u200b\u6027\u200b,\u200b\u4e00\u4e2a\u200b\u7a97\u53e3\u200b\u8303\u56f4\u200b\u53d8\u200b\u5927\u200b,\u200b\u5176\u200b<code>MAX</code>\u200b\u53ea\u200b\u53ef\u80fd\u200b\u53d8\u200b\u5927\u200b\u6216\u8005\u200b\u4fdd\u6301\u200b,<code>MIN</code>\u200b\u53ea\u200b\u53ef\u80fd\u200b\u53d8\u5c0f\u200b\u6216\u8005\u200b\u4fdd\u6301\u200b,\u200b\u4e00\u4e2a\u200b\u7a97\u53e3\u200b\u8303\u56f4\u200b\u53d8\u5c0f\u200b,\u200b\u5176\u200b<code>MAX</code>\u200b\u53ea\u200b\u53ef\u80fd\u200b\u53d8\u5c0f\u200b\u6216\u8005\u200b\u4fdd\u6301\u200b,<code>MIN</code>\u200b\u53ea\u200b\u53ef\u80fd\u200b\u53d8\u200b\u5927\u200b\u6216\u8005\u200b\u4fdd\u6301\u200b\u3002<ul> <li>\u200b\u82e5\u200b\u4e00\u4e2a\u200b\u7a97\u53e3\u200b\u6ee1\u8db3\u6761\u4ef6\u200b\u5219\u200b\u7f29\u5c11\u200b\u5176\u200b\u5927\u5c0f\u200b\u4ecd\u7136\u200b\u6ee1\u8db3\u6761\u4ef6\u200b</li> <li>\u200b\u82e5\u200b\u4e00\u4e2a\u200b\u7a97\u53e3\u200b\u4e0d\u200b\u6ee1\u8db3\u200b\u8c03\u6574\u200b\u5219\u200b\u589e\u52a0\u200b\u5176\u200b\u957f\u5ea6\u200b\u5fc5\u7136\u200b\u4e5f\u200b\u4e0d\u200b\u6ee1\u8db3\u6761\u4ef6\u200b </li> </ul> </li> <li>\u200b\u4e3a\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7ef4\u6301\u200b\u4e24\u4e2a\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\uff0c\u200b\u5206\u522b\u200b\u7ef4\u6301\u200b\u6700\u5927\u503c\u200b\u4e0e\u200b\u6700\u5c0f\u503c\u200b</li> </ul> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int longestSubarray(vector&lt;int&gt;&amp; nums, int limit) {\n        arr = nums;\n        int ans = 0;\n        int n = nums.size();\n        for (int l = 0, r = 0; l &lt; n; ++l) {\n            // sliding windows : [l, r)\n            while (r &lt; n &amp;&amp; can_join(limit, nums[r])) {\n                join(r++);\n            }\n            // \u200b\u4ece\u200bwhile\u200b\u51fa\u6765\u200b\u8868\u660e\u200b\u5f53\u524d\u200b\u4f4d\u7f6e\u200b\u4ee5\u53ca\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u5728\u200b\u6269\u5927\u200b\u4e86\u200b\uff0c\u200b\u7ed3\u7b97\u200b\u7b54\u6848\u200b\u5e76\u5f39\u200b\u51fa\u200b\u7a97\u53e3\u200b\u5de6\u8fb9\u200b\u7684\u200b\u5143\u7d20\u200b\n            ans = std::max(ans, r - l);\n            remove(l);\n        }\n\n        return ans;\n    }\nprivate:\n    static constexpr int N = 1e5 + 10;\n    vector&lt;int&gt; arr;\n    array&lt;int, N&gt; deque_max;\n    array&lt;int, N&gt; deque_min;\n    int h_min{0}, t_min{0}, h_max{0}, t_max{0};\n    // \u200b\u5224\u65ad\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u662f\u5426\u200b\u53ef\u4ee5\u200b\u52a0\u5165\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\n    bool can_join(int limit, int num) {\n        int max = h_max &lt; t_max ? std::max(arr[deque_max[h_max]], num) : num;\n        int min = h_min &lt; t_min ? std::min(arr[deque_min[h_min]], num) : num;\n        return max - min &lt;= limit;\n    }\n\n    // \u200b\u65b0\u5143\u7d20\u200b\u52a0\u5165\u200b\u65f6\u5019\u200b\u4e0d\u8981\u200b\u5fd8\u8bb0\u200b\u4fee\u6539\u200b\u5355\u8c03\u200b\u6808\u200b\u7684\u200b\u7ed3\u6784\u200b\n    void join(int r) {\n        while(h_max &lt; t_max &amp;&amp; arr[deque_max[t_max - 1]] &lt;= arr[r]) --t_max;\n        deque_max[t_max++] = r;\n        while(h_min &lt; t_min &amp;&amp; arr[deque_min[t_min - 1]] &gt;= arr[r]) --t_min;\n        deque_min[t_min++] = r;\n    }\n\n    // \u200b\u5220\u9664\u200b\u5143\u7d20\u200b\u4e5f\u200b\u4e0d\u8981\u200b\u5fd8\u8bb0\u200b\u4fee\u6539\u200b\u5355\u8c03\u200b\u6808\u200b\u7684\u200b\u7ed3\u6784\u200b\n    void remove(int l) {\n        if (h_max &lt; t_max &amp;&amp; deque_max[h_max] == l) ++h_max;\n        if (h_min &lt; t_min &amp;&amp; deque_min[h_min] == l) ++h_min;\n    }\n\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#q2-flowerpot-s","title":"Q2: Flowerpot S","text":"<p>\u200b\u9898\u76ee\u200b</p> <p> </p> <p>\u200b\u8001\u677f\u200b\u9700\u8981\u200b\u4f60\u200b\u5e2e\u5fd9\u200b\u6d47\u82b1\u200b\u3002\u200b\u7ed9\u51fa\u200b \\(N\\) \u200b\u6ef4\u6c34\u200b\u7684\u200b\u5750\u6807\u200b\uff0c\\(y\\) \u200b\u8868\u793a\u200b\u6c34\u6ef4\u200b\u7684\u200b\u9ad8\u5ea6\u200b\uff0c\\(x\\) \u200b\u8868\u793a\u200b\u5b83\u200b\u4e0b\u843d\u200b\u5230\u200b \\(x\\) \u200b\u8f74\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002</p> <p>\u200b\u6bcf\u200b\u6ef4\u6c34\u200b\u4ee5\u200b\u6bcf\u79d2\u200b \\(1\\) \u200b\u4e2a\u200b\u5355\u4f4d\u200b\u957f\u5ea6\u200b\u7684\u200b\u901f\u5ea6\u200b\u4e0b\u843d\u200b\u3002\u200b\u4f60\u200b\u9700\u8981\u200b\u628a\u200b\u82b1\u76c6\u200b\u653e\u5728\u200b \\(x\\) \u200b\u8f74\u4e0a\u200b\u7684\u200b\u67d0\u4e2a\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u4ece\u200b\u88ab\u200b\u82b1\u76c6\u200b\u63a5\u7740\u200b\u7684\u200b\u7b2c\u200b \\(1\\) \u200b\u6ef4\u6c34\u200b\u5f00\u59cb\u200b\uff0c\u200b\u5230\u200b\u88ab\u200b\u82b1\u76c6\u200b\u63a5\u7740\u200b\u7684\u200b\u6700\u540e\u200b \\(1\\) \u200b\u6ef4\u6c34\u200b\u7ed3\u675f\u200b\uff0c\u200b\u4e4b\u95f4\u200b\u7684\u200b\u65f6\u95f4\u5dee\u200b\u81f3\u5c11\u200b\u4e3a\u200b \\(D\\)\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\uff0c\u200b\u53ea\u8981\u200b\u6c34\u6ef4\u200b\u843d\u5230\u200b \\(x\\) \u200b\u8f74\u4e0a\u200b\uff0c\u200b\u4e0e\u200b\u82b1\u76c6\u200b\u7684\u200b\u8fb9\u6cbf\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u5c31\u200b\u8ba4\u4e3a\u200b\u88ab\u200b\u63a5\u4f4f\u200b\u3002\u200b\u7ed9\u51fa\u200b \\(N\\) \u200b\u6ef4\u6c34\u200b\u7684\u200b\u5750\u6807\u200b\u548c\u200b \\(D\\) \u200b\u7684\u200b\u5927\u5c0f\u200b\uff0c\u200b\u8bf7\u7b97\u51fa\u200b\u6700\u5c0f\u200b\u7684\u200b\u82b1\u76c6\u200b\u7684\u200b\u5bbd\u5ea6\u200b \\(W\\)\u3002</p> <p>\u200b\u8f93\u5165\u200b\u683c\u5f0f\u200b</p> <p>\u200b\u7b2c\u4e00\u884c\u200b \\(2\\) \u200b\u4e2a\u200b\u6574\u6570\u200b \\(N\\) \u200b\u548c\u200b \\(D\\)\u3002</p> <p>\u200b\u63a5\u4e0b\u6765\u200b \\(N\\) \u200b\u884c\u200b\u6bcf\u884c\u200b \\(2\\) \u200b\u4e2a\u200b\u6574\u6570\u200b\uff0c\u200b\u8868\u793a\u200b\u6c34\u6ef4\u200b\u7684\u200b\u5750\u6807\u200b \\((x,y)\\)\u3002</p> <p>\u200b\u8f93\u51fa\u200b\u683c\u5f0f\u200b</p> <p>\u200b\u4ec5\u200b\u4e00\u884c\u200b \\(1\\) \u200b\u4e2a\u200b\u6574\u6570\u200b\uff0c\u200b\u8868\u793a\u200b\u6700\u5c0f\u200b\u7684\u200b\u82b1\u76c6\u200b\u7684\u200b\u5bbd\u5ea6\u200b\u3002\u200b\u5982\u679c\u200b\u65e0\u6cd5\u200b\u6784\u9020\u200b\u51fa\u200b\u8db3\u591f\u200b\u5bbd\u200b\u7684\u200b\u82b1\u76c6\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u5728\u200b \\(D\\) \u200b\u5355\u4f4d\u200b\u7684\u200b\u65f6\u95f4\u200b\u63a5\u200b\u4f4f\u200b\u6ee1\u8db3\u8981\u6c42\u200b\u7684\u200b\u6c34\u6ef4\u200b\uff0c\u200b\u5219\u200b\u8f93\u51fa\u200b \\(-1\\)\u3002</p> <p>\u3010\u200b\u6570\u636e\u200b\u8303\u56f4\u200b\u3011</p> <p>\\(40\\%\\) \u200b\u7684\u200b\u6570\u636e\u200b\uff1a\\(1 \\le N \\le 1000\\) \uff0c\\(1 \\le D \\le 2000\\)\u3002</p> <p>\\(100\\%\\) \u200b\u7684\u200b\u6570\u636e\u200b\uff1a\\(1 \\le N \\le 10 ^ 5\\)\uff0c\\(1 \\le D \\le 10 ^ 6\\)\uff0c\\(0\\le x,y\\le10^6\\)\u3002</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u200b\u4e3a\u6c42\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u542b\u6709\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\u7684\u200b\u6570\u7ec4\u200b,\u200b\u8be2\u95ee\u200b\u6ee1\u8db3\u200b<code>max - min&gt;= limit</code>\u200b\u8981\u6c42\u200b\u7684\u200b\u6700\u5c0f\u200b\u7a97\u53e3\u200b\u957f\u5ea6\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#q3-maximum-number-of-tasks-you-can-assign","title":"Q3: Maximum Number of Tasks you can Assign","text":"<p>\u200b\u9898\u76ee\u200b</p> <p>You have <code>n</code> tasks and <code>m</code> workers. Each task has a strength requirement stored in a 0-indexed integer array <code>tasks</code>, with the <code>i^th</code> task requiring <code>tasks[i]</code> strength to complete. The strength of each worker is stored in a 0-indexed integer array <code>workers</code>, with the <code>j^th</code> worker having <code>workers[j]</code> strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., <code>workers[j] &gt;= tasks[i]</code>).</p> <p>Additionally, you have <code>pills</code> magical pills that will increase a worker's strength by <code>strength</code>. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.</p> <p>Given the 0-indexed integer arrays <code>tasks</code> and <code>workers</code> and the integers <code>pills</code> and <code>strength</code>, return the maximum number of tasks that can be completed.</p> \u200b\u4e3e\u4f8b\u200b\u4e0e\u200b\u6570\u636e\u200b\u8303\u56f4\u200b <p>Example 1:</p> Text Only<pre><code>Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1\nOutput: 3\nExplanation:\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 &gt;= 1)\n- Assign worker 1 to task 1 (3 &gt;= 2)\n- Assign worker 2 to task 0 (3 &gt;= 3)\n</code></pre> <p>Example 2:</p> Text Only<pre><code>Input: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5\nOutput: 1\nExplanation:\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 &gt;= 5)\n</code></pre> <p>Example 3:</p> Text Only<pre><code>Input: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10\nOutput: 2\nExplanation:\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 &gt;= 10)\n- Assign worker 1 to task 1 (10 + 10 &gt;= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task.\n</code></pre> <p>Constraints:</p> <ul> <li><code>n == tasks.length</code></li> <li><code>m == workers.length</code></li> <li><code>1 &lt;= n, m &lt;= 5 * 10^4</code></li> <li><code>0 &lt;= pills &lt;= m</code></li> <li><code>0 &lt;= tasks[i], workers[j], strength &lt;= 10^9</code></li> </ul>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#q4-max-value-of-equation","title":"Q4: Max Value of Equation","text":"<p>\u200b\u63cf\u8ff0\u200b</p> <p>You are given an array <code>points</code> containing the coordinates of points on a 2D plane, sorted by the x-values, where <code>points[i] = [xi, yi]</code> such that <code>xi &lt; xj</code> for all <code>1 &lt;= i &lt; j &lt;= points.length</code>. You are also given an integer <code>k</code>.</p> <p>Return the maximum value of the equation <code>yi + yj + |xi - xj|</code> where <code>|xi - xj| &lt;= k</code> and <code>1 &lt;= i &lt; j &lt;= points.length</code>.</p> <p>It is guaranteed that there exists at least one pair of points that satisfy the constraint <code>|xi - xj| &lt;= k</code>.</p> \u200b\u4e3e\u4f8b\u200b\u548c\u200b\u6570\u636e\u200b\u8303\u56f4\u200b <p>Example 1:</p> Text Only<pre><code>Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\nOutput: 4\nExplanation: The first two points satisfy the condition |xi - xj| &lt;= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1.\n</code></pre> <p>Example 2:</p> Text Only<pre><code>Input: points = [[0,0],[3,0],[9,2]], k = 3\nOutput: 3\nExplanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.\n</code></pre> <p>Constraints:</p> <ul> <li><code>2 &lt;= points.length &lt;= 10^5</code></li> <li><code>points[i].length == 2</code></li> <li><code>-10^8 &lt;= xi, yi &lt;= 10^8</code></li> <li><code>0 &lt;= k &lt;= 2 * 10^8</code></li> <li><code>xi &lt; xj</code> for all <code>1 &lt;= i &lt; j &lt;= points.length</code></li> <li><code>xi</code> form a strictly increasing sequence.</li> </ul> <p>hit</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u5173\u952e\u5728\u4e8e\u200b\u5c06\u200b\\(y_i+y_j+|x_i-x_j|\\)\u200b\u901a\u8fc7\u200b\u9898\u76ee\u200b\u7ed9\u200b\u7684\u200b<code>i &lt; j</code>\u200b\u5219\u200b\u5fc5\u7136\u200b\u6709\u200b\\(x_i &lt; x_j\\)\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u200b\u4e3a\u6c42\u200b\\(\\max{y_i+y_j+x_j-x_i} = \\max{((y_i-x_i)+(y_j+x_j))}\\)\u200b\u5219\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8bb0\u5f55\u200b\u5728\u200b<code>j</code>\u200b\u70b9\u200b\u5de6\u4fa7\u200b\u4e0e\u5176\u200b\u8ddd\u79bb\u200b\u5c0f\u4e8e\u200b\u7b49\u4e8e\u200b\u9650\u5236\u200b\u7684\u200b\u70b9\u200b\\(y_i - x_i\\)\u200b\u70b9\u200b\u6700\u5927\u503c\u200b\u6765\u200b\u5feb\u901f\u200b\u5f97\u51fa\u200b\u4ee5\u8be5\u200b\u70b9\u200b\u4e3a\u200b\u53f3\u200b\u7aef\u70b9\u200b\u7684\u200b\u7ebf\u6bb5\u200b\u5173\u4e8e\u200b\u9898\u76ee\u200b\u4e0d\u7b49\u5f0f\u200b\u7684\u200b\u6700\u5927\u503c\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#q5-shortest-subarray-with-sum-at-least-k","title":"Q5: Shortest Subarray with Sum at Least K","text":"<p>\u200b\u63cf\u8ff0\u200b</p> <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the length of the shortest non-empty subarray of <code>nums</code> with a sum of at least <code>k</code>. If there is no such subarray, return <code>-1</code>.</p> <p>A subarray is a contiguous part of an array.</p> \u200b\u4e3e\u4f8b\u200b\u4e0e\u200b\u6570\u636e\u200b\u8303\u56f4\u200b <p>Example 1:</p> Text Only<pre><code>Input: nums = [1], k = 1\nOutput: 1\n</code></pre> <p>Example 2:</p> Text Only<pre><code>Input: nums = [1,2], k = 4\nOutput: -1\n</code></pre> <p>Example 3:</p> Text Only<pre><code>Input: nums = [2,-1,2], k = 3\nOutput: 3\n</code></pre> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> <li>-10^5 &lt;= nums[i] &lt;= 10^5 \u26a0\ufe0f \u200b\u53ef\u4ee5\u200b\u662f\u200b\u8d1f\u6570\u200b</li> <li><code>1 &lt;= k &lt;= 10^9</code></li> </ul> <p>\u200b\u8fd9\u9053\u9898\u200b\u5982\u679c\u200b\u5168\u662f\u200b\u6b63\u6570\u200b\u5c31\u662f\u200b\u4e2a\u200b\u666e\u901a\u200b\u7684\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7684\u200b\u9898\u200b,\u200b\u4f46\u200b\u5982\u679c\u200b\u6709\u200b\u8d1f\u6570\u200b\u5c31\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u7b80\u7b80\u5355\u5355\u200b\u7684\u200b\u901a\u8fc7\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u505a\u200b\u51fa\u6765\u200b\u3002</p> hit <ul> <li>\u200b\u8fd9\u9053\u9898\u200b\u548c\u200b\u524d\u7f00\u200b\u548c\u200b\u4e13\u9898\u200b\u7684\u200b \u200b\u5bfb\u627e\u200b\u548c\u200b\u4e3a\u200bK\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u601d\u8def\u200b\u7c7b\u4f3c\u200b</li> <li>\u200b\u53d8\u6210\u200b\u5bfb\u627e\u200b\u4ee5\u200br\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b\u6700\u5c0f\u200b\u7684\u200bl\u200b\u5728\u200b\u54ea\u91cc\u200b[l....r] <ul> <li>\u200b\u5047\u8bbe\u200b\u5f53\u524d\u200b[0...r]\u200b\u7684\u200b\u524d\u7f00\u200b\u548c\u200b\u662f\u200b x</li> <li>\u200b\u76ee\u6807\u200b\u5c31\u200b\u53d8\u6210\u200b\u4e86\u200b\u5bfb\u627e\u200b[0...l]\u200b\u7684\u200b\u524d\u7f00\u200b\u5408\u200b &lt;= x - k \u200b\u4e14\u200b\u8981\u6c42\u200bl\u200b\u6700\u5927\u200b</li> </ul> </li> <li>\u200b\u7ef4\u62a4\u200b\u4e00\u4e2a\u200b\u524d\u7f00\u200b\u548c\u200b\u7684\u200b\u5355\u8c03\u200b\u9012\u589e\u200b\u961f\u5217\u200b</li> </ul> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int shortestSubarray(vector&lt;int&gt;&amp; nums, int k) {\n        vector&lt;long long&gt; sum{0}; // \u26a0\ufe0f\u200b\u9632\u6b62\u200b\u6ea2\u51fa\u200b \n        // \u200b\u5904\u7406\u200b\u524d\u7f00\u200b\u548c\u200b\u6570\u7ec4\u200b\n        // sum[0] = 0\n        // sum[1] = nums[0] + 0\n        // sum[2] = nums[1] + nums[2] + 0\n        for(int i = 0; i &lt; nums.size(); ++i) sum.push_back(sum[i] + nums[i]);\n        int ans = INT_MAX;\n        for (int i = 0; i &lt;= nums.size(); ++i) {\n            // \u200b\u5982\u679c\u200b\u5f53\u524d\u200b[i...deque[h]]\u200b\u7684\u200b\u548c\u200b\u6ee1\u8db3\u6761\u4ef6\u200b\u5219\u200b\u5f39\u51fa\u200b\u961f\u5934\u200b,\u200b\u5e76\u200b\u8ba1\u7b97\u200b\u4e00\u6b21\u200b\u7ed3\u679c\u200b\n            while (h != t &amp;&amp; sum[i] - sum[deque[h]] &gt;= k) ans = std::min(ans, i - deque[h++]);\n            // \u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u524d\u7f00\u200b\u548c\u200b\u7684\u200b\u7ed3\u679c\u200b\u5c0f\u4e8e\u200b\u961f\u5217\u200b\u5c3e\u200b\u7684\u200b\u7ed3\u679c\u200b\u5219\u200b\u5f39\u200b\u51fa\u961f\u200b\u5c3e\u200b\n            while (h != t &amp;&amp; sum[deque[t - 1]] &gt;= sum[i]) --t;\n            deque[t++] = i;\n        }\n\n        return ans == INT_MAX ? -1 : ans;\n\n    }\nprivate:\n    static constexpr int N = 1e5 + 10;\n    array&lt;int, N&gt; deque;\n    int h{0}, t{0};\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Queen/#_5","title":"\u5355\u8c03\u200b\u961f\u5217\u200b\u7684\u200b\u603b\u7ed3","text":"<p>\u200b\u603b\u7ed3\u200b</p> <p>\u200b\u65e0\u8bba\u662f\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\u8fd8\u662f\u200b\u5355\u8c03\u200b\u6808\u200b,\u200b\u672c\u8d28\u200b\u90fd\u200b\u5728\u4e8e\u200b\u627e\u200b\u4e00\u79cd\u200b<code>\u200b\u5355\u8c03\u200b</code>\u200b\u5173\u7cfb\u200b\uff0c\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u5355\u8c03\u200b\u5173\u7cfb\u200b\u53bb\u200b<code>\u200b\u4f18\u5316\u200b</code>\u200b\u66b4\u529b\u200b\u89e3\u6cd5\u200b\u4e2d\u200b\u7684\u200b\u65e0\u7528\u200b\u5f62\u8c61\u200b\u3002\u200b\u800c\u200b\u5982\u4f55\u200b\u5bfb\u627e\u200b\u8fd9\u79cd\u200b\u5355\u8c03\u200b\u5173\u7cfb\u200b\u5c31\u662f\u200b\u9700\u8981\u200b\u53bb\u200b\u5b66\u4e60\u200b\u7684\u200b\u70b9\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u8bf4\u200bQ1 Q2 \u200b\u901a\u8fc7\u200b\u6b63\u6570\u200b\u6570\u7ec4\u200b\u62d3\u5c55\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\u5176\u200b\u6700\u5927\u503c\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u51cf\u5c11\u200b\uff0c\u200b\u6700\u5c0f\u503c\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u589e\u5927\u200b\u7684\u200b\u7279\u6027\u200b,\u200b\u5e76\u200b\u7ed3\u5408\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\u80fd\u200b\u5728\u200b\u644a\u8fd8\u200b\u6d88\u8017\u200b\u4e0b\u200b\u6bcf\u6b21\u200b\u4ee5\u200bO(1)\u200b\u7684\u200b\u590d\u6742\u5ea6\u200b\u83b7\u53d6\u200b\u6700\u5927\u503c\u200b\\\u200b\u6700\u5c0f\u503c\u200b\u4ece\u800c\u200b\u7ef4\u6301\u200b\u961f\u5217\u200b\u7684\u200b\u6700\u5927\u503c\u200b\u4e0e\u200b\u6700\u5c0f\u503c\u200b\u7684\u200b\u5dee\u503c\u200b,\u200b\u4ece\u800c\u200b\u907f\u514d\u200b\u66b4\u529b\u200b\u89e3\u6cd5\u200b\u4e2d\u200b\u6bcf\u6b21\u200b\u7a97\u53e3\u200b\u6539\u53d8\u200b\u90fd\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u904d\u5386\u200b\u7684\u200b\u7cdf\u7cd5\u200b\u64cd\u4f5c\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/","title":"\u5355\u8c03\u200b\u6808\u200b\u4e0e\u200b\u76f8\u5173\u200b\u4e60\u9898","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u5728\u200b\u7b97\u6cd5\u200b\u95ee\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e38\u5e38\u200b\u9700\u8981\u200b\u5feb\u901f\u200b\u627e\u5230\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u9644\u8fd1\u200b\uff08\u200b\u5de6\u4fa7\u200b\u6216\u200b\u53f3\u4fa7\u200b\uff09\u200b\u7b2c\u4e00\u4e2a\u200b\u6bd4\u200b\u5b83\u200b\u5927\u200b\u6216\u200b\u5c0f\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u6216\u8005\u200b\u8ba1\u7b97\u200b\u7531\u200b\u8fd9\u4e9b\u200b\u8fb9\u754c\u200b\u5b9a\u4e49\u200b\u7684\u200b\u533a\u95f4\u200b\u7279\u5f81\u200b\uff08\u200b\u5982\u200b\u9762\u79ef\u200b\u3001\u200b\u8ddd\u79bb\u200b\u7b49\u200b\uff09\u3002\u200b\u8fd9\u200b\u7c7b\u200b\u95ee\u9898\u200b\u7684\u200b\u6734\u7d20\u200b\u89e3\u6cd5\u200b\u901a\u5e38\u200b\u662f\u200b\u53cc\u91cd\u200b\u5faa\u73af\u200b\u904d\u5386\u200b\uff0c\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b\\(O(n\u00b2)\\)\uff0c\u200b\u800c\u200b\u5355\u8c03\u200b\u6808\u200b(Monotonic Stack)\u200b\u5219\u200b\u80fd\u200b\u4ee5\u200b\\(O(n)\\)\u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u9ad8\u6548\u200b\u89e3\u51b3\u200b\uff0c\u200b\u5176\u200b\u6838\u5fc3\u200b\u5728\u4e8e\u200b\u5229\u7528\u200b\u6808\u200b\u7ed3\u6784\u200b\u7ef4\u62a4\u200b\u6570\u636e\u200b\u7684\u200b\u5355\u8c03\u200b\u6027\u200b\uff0c\u200b\u4ee5\u200b\u7a7a\u95f4\u200b\u6362\u200b\u65f6\u95f4\u200b\u3002</p> <p>\u200b\u8bfe\u7a0b\u200b\u4f8b\u9898\u200b</p> <p>\u200b\u5355\u8c03\u200b\u6808\u200b\u7ed3\u6784\u200b(\u200b\u8fdb\u9636\u200b)</p> <p>739.Daily Temperatures</p> <p>907.Sum of sub-array Minimus</p> <p>84.Largest Rectangle in Histogram</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#85maximal-rectangle","title":"85.Maximal Rectangle","text":"<p>962.Maximum Width Ramp</p> <p>316.Remove Duplicate Letters</p> <p>2289.Steps to Make Array non Decreasing</p> <p>1504.Count sub-matrices with all ones</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#_2","title":"\u5355\u8c03\u200b\u6808\u200b\u7684\u200b\u5185\u5bb9","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#_3","title":"\u4e0d\u200b\u542b\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b\u7684\u200b\u5355\u8c03\u200b\u6808\u200b(\u200b\u4ee5\u200b\u9012\u589e\u200b\u6808\u200b\u4e3e\u4f8b\u200b)","text":"<p>\u200b\u5047\u8bbe\u200b\u73b0\u5728\u200b\u6709\u200b\u6570\u7ec4\u200b[4,3,2,5,7,4,6,8]\uff0c\u200b\u60f3\u8981\u200b\u67e5\u8be2\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u5de6\u4fa7\u200b/\u200b\u53f3\u4fa7\u200b\u6bd4\u5176\u200b\u5c0f\u200b\u7684\u200b\u6700\u8fd1\u200b\u5143\u7d20\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u91c7\u7528\u200b<code>\u200b\u9012\u589e\u200b\u6a21\u5f0f\u200b\u7684\u200b\u5355\u8c03\u200b\u6808\u200b</code>\u3002</p> <p>\u200b\u5355\u8c03\u200b\u9012\u5f52\u200b\u6808\u200b</p> <ul> <li>\u200b\u6808\u5185\u200b\u5927\u6570\u200b\u538b\u4e0b\u6570\u200b\uff0c\u200b\u4e14\u200b\u52a0\u5165\u200b\u5143\u7d20\u200b\u7684\u200b<code>\u200b\u6570\u7ec4\u200b\u4e0b\u6807\u200b</code><ul> <li>\u200b\u4e3a\u4e86\u200b\u83b7\u53d6\u200b\u66f4\u200b\u591a\u200b\u7ed3\u679c\u200b\uff1a\u200b\u6bd4\u5982\u8bf4\u200b\u8ddd\u79bb\u200b</li> </ul> </li> <li>\u200b\u5f39\u200b\u51fa\u200b\u5143\u7d20\u200b\u7684\u200b\u65f6\u5019\u200b\u7ed3\u7b97\u200b\u7ed3\u679c\u200b<ul> <li>\u200b\u4f7f\u5f97\u200b\u8be5\u200b\u5143\u7d20\u200b\u5f39\u51fa\u200b\u7684\u200b\u4e3a\u200b\u5176\u200b\u53f3\u8fb9\u200b\u6bd4\u5176\u200b\u5c0f\u200b\u7684\u200b\u6700\u8fd1\u200b\u5143\u7d20\u200b</li> <li>\u200b\u8be5\u200b\u5143\u7d20\u200b\u4e0b\u65b9\u200b\u7684\u200b\u5143\u7d20\u200b\u4e3a\u200b\u5176\u200b\u5de6\u8fb9\u200b\u6bd4\u5176\u200b\u5c0f\u200b\u7684\u200b\u6700\u8fd1\u200b\u5143\u7d20\u200b</li> </ul> </li> <li>\u200b\u82e5\u200b\u4e0b\u65b9\u200b\u65e0\u200b\u5143\u7d20\u200b\u5219\u200b\u8868\u660e\u200b\u5176\u200b\u5de6\u8fb9\u200b\u7684\u200b\u6570\u200b\u90fd\u200b\u6bd4\u200b\u5b83\u200b\u5c0f\u200b</li> <li>\u200b\u82e5\u200b\u662f\u200b\u5728\u200b\u904d\u5386\u200b\u5b8c\u200b\u6570\u7ec4\u200b\u540e\u200b\u624d\u200b\u5f39\u51fa\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u5219\u200b\u5176\u200b\u53f3\u8fb9\u200b\u65e0\u6bd4\u200b\u5176\u5c0f\u200b\u7684\u200b\u6570\u200b</li> </ul> <p>\u200b\u5bf9\u4e8e\u200b\u6570\u7ec4\u200b[9,3,2,5,7,4,6,8],\u200b\u5176\u200b\u8fc7\u7a0b\u200b\u5982\u4e0b\u200b: \u26a0\ufe0f\u200b\u6309\u200b\u89c4\u5219\u200b\u5e94\u8be5\u200b\u8fd4\u56de\u200b\u4e0b\u6807\u200b\uff0c\u200b\u6211\u200b\u8fd9\u91cc\u200b\u4e3a\u4e86\u200b\u65b9\u4fbf\u200b\u8fd4\u56de\u200b\u4e86\u200b\u6570\u503c\u200b\u3002</p> <ul> <li><code>9</code>\u200b\u8fdb\u5165\u200b\u6808\u200b</li> <li><code>3</code>\u200b\u8fdb\u5165\u200b\u6808\u200b\uff0c\u200b\u53d1\u73b0\u200b<code>9</code>\u200b\u6bd4\u200b<code>3</code>\u200b\u5927\u200b\uff0c\u200b\u5f39\u200b\u51fa\u200b<code>9</code><ul> <li>\u200b\u6839\u636e\u200b\u89c4\u5219\u200b\uff0c\u200b\u7ed3\u7b97\u200b<code>9</code>\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u6b64\u65f6\u200b<code>9</code>\u200b\u7684\u200b\u5e95\u4e0b\u200b\u65e0\u200b\u5143\u7d20\u200b\u6545\u5176\u200b\u5de6\u8fb9\u200b\u6ca1\u6709\u200b\u6bd4\u5176\u200b\u5c0f\u200b\u7684\u200b\u5143\u7d20\u200b,\u200b\u53f3\u8fb9\u200b\u6bd4\u5176\u200b\u5c0f\u200b\u7684\u200b\u6700\u8fd1\u200b\u5143\u7d20\u200b\u4e3a\u200b<code>3</code> [-1, 3]</li> <li>\u200b\u6b64\u65f6\u200b\u6808\u4e2d\u200b\u4ec5\u5269\u200b<code>3</code></li> </ul> </li> <li><code>2</code>\u200b\u8fdb\u5165\u200b\u6808\u200b,<code>3</code>\u200b\u6bd4\u200b<code>2</code>\u200b\u5927\u200b\uff0c\u200b\u5f39\u200b\u51fa\u200b<code>3</code><ul> <li>\u200b\u6839\u636e\u200b\u89c4\u5219\u200b\u8fd4\u56de\u200b[-1, 2]</li> </ul> </li> <li><code>5</code>\u200b\u8fdb\u5165\u200b\u6808\u200b</li> <li><code>7</code>\u200b\u8fdb\u5165\u200b\u6808\u200b</li> <li><code>4</code>\u200b\u8fdb\u5165\u200b\u6808\u200b,\u200b\u6bd4\u200b<code>7</code>\u200b\u5c0f\u200b\uff0c\u200b\u5f39\u200b\u51fa\u200b<code>7</code><ul> <li>\u200b\u6839\u636e\u200b\u89c4\u5219\u200b\u7ed3\u7b97\u200b<code>7</code>\uff0c\u200b\u8fd4\u56de\u200b[5, 4]</li> <li>\u200b\u53d1\u73b0\u200b<code>5</code>\u200b\u8fd8\u662f\u200b\u5927\u4e8e\u200b<code>4</code>\u200b\u5f39\u200b\u51fa\u200b<code>5</code></li> <li>\u200b\u6839\u636e\u200b\u89c4\u5219\u200b\u7ed3\u7b97\u200b<code>5</code>,\u200b\u8fd4\u56de\u200b[2, 4]</li> </ul> </li> <li><code>6</code>\u200b\u8fdb\u5165\u200b\u6808\u200b</li> <li><code>8</code>\u200b\u8fdb\u5165\u200b\u6808\u200b</li> <li><code>\u200b\u6e05\u7a7a\u200b\u6808\u200b</code> <ul> <li>\u200b\u5f39\u200b\u51fa\u200b<code>8</code> \u200b\u8fd4\u56de\u200b[6, -1]</li> <li>\u200b\u5f39\u200b\u51fa\u200b<code>6</code> \u200b\u8fd4\u56de\u200b[4, -1]</li> <li>\u200b\u5f39\u200b\u51fa\u200b<code>4</code> \u200b\u8fd4\u56de\u200b[2, -1]</li> <li>\u200b\u5f39\u200b\u51fa\u200b<code>2</code> \u200b\u8fd4\u56de\u200b[-1, -1] </li> </ul> </li> </ul> \u200b\u5355\u8c03\u200b\u6808\u200b\u7684\u200b\u5408\u7406\u6027\u200b\u8bc1\u660e\u200b <p>\u200b\u4e3a\u5565\u200b\u5f39\u51fa\u200b\u7684\u200b\u65f6\u5019\u200b\u5728\u200b\u5176\u200b\u4e0b\u65b9\u200b\u7684\u200b\u5143\u7d20\u200b\u5c31\u662f\u200b\u6700\u8fd1\u200b\u7684\u200b\u5c0f\u4e8e\u200b\u5176\u200b\u7684\u200b\u5143\u7d20\u200b\u5462\u200b\uff1f</p> <p>\u200b\u5047\u8bbe\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b<code>x</code>\uff0c\u200b\u6bd4\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b<code>cur</code>\u200b\u5c0f\u4e14\u200b\u6bd4\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u5728\u200b\u6808\u200b\u4e2d\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b<code>pre</code>\u200b\u7684\u200b\u8ddd\u79bb\u200b<code>x</code>\u200b\u66f4\u8fd1\u200b,\u200b\u90a3\u4e48\u200b\u56de\u6eaf\u200b\u904d\u5386\u200b\u8fc7\u7a0b\u200b\uff0c\uff0c\u200b\u5fc5\u7136\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5c0f\u4e8e\u200b<code>x</code>\u200b\u7684\u200b\u6570\u4f7f\u200b\u5176\u5f39\u200b\u51fa\u200b(\u200b\u56e0\u4e3a\u200b\u6b64\u65f6\u200b<code>x</code>\u200b\u4e0d\u200b\u5728\u200b\u6808\u200b\u4e2d\u200b)\u200b\u5047\u8bbe\u200b\u8fd9\u4e2a\u200b\u6570\u662f\u200b<code>y</code>\u200b\u5219\u200b\u6709\u200b<code>y &lt; x &lt; cur</code> \u200b\u4e14\u200b<code>y</code>\u200b\u6bd4\u200b<code>x</code>\u200b\u79bb\u200b<code>cur</code>\u200b\u66f4\u8fd1\u200b\uff0c\u200b\u6545\u200b\u5f52\u7eb3\u200b\u53ef\u77e5\u200b\uff0c\u200b\u4f4d\u4e8e\u200b\u8be5\u200b\u5143\u7d20\u200b\u4e0b\u65b9\u200b\u5143\u7d20\u200b\u5fc5\u7136\u200b\u662f\u200b\u6700\u8fd1\u200b\u7684\u200b\u5c0f\u4e8e\u200b\u8be5\u200b\u5143\u7d20\u200b\u7684\u200b\u5143\u7d20\u200b.</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#_4","title":"\u542b\u6709\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b\u7684\u200b\u5355\u8c03\u200b\u6808\u200b(\u200b\u4ee5\u200b\u9012\u589e\u200b\u6808\u200b\u4e3e\u4f8b\u200b)","text":"<p>\u200b\u5927\u4f53\u4e0a\u200b\u548c\u200b\u4e0d\u200b\u5305\u542b\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b\u7684\u200b\u5355\u8c03\u200b\u6808\u200b\u6d41\u7a0b\u200b\u4e00\u81f4\u200b\uff0c\u200b\u552f\u4e00\u200b\u7684\u200b\u533a\u522b\u200b\u662f\u200b\u5982\u200b\u9047\u5230\u200b\u76f8\u540c\u200b\u5143\u7d20\u200b\u4e00\u6837\u200b\u8981\u5f39\u200b\u51fa\u200b\u5f53\u524d\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\uff0c\u200b\u5e76\u200b\u8bb0\u5f55\u200b\u5176\u200b\u7ed3\u679c\u200b\u4f46\u200b\u6807\u8bb0\u200b\u5f53\u524d\u200b\u7ed3\u679c\u200b\u3002</p> <p>\u200b\u5f85\u200b\u904d\u5386\u200b\u5b8c\u5168\u200b\u90e8\u200b\u5143\u7d20\u200b\u540e\u200b\uff0c\u200b\u5bf9\u200b\u4e0a\u8ff0\u200b\u5e26\u6709\u200b\u6807\u8bb0\u200b\u5143\u7d20\u200b\u6309\u7167\u200b\u5982\u4e0b\u200b\u89c4\u5219\u200b\u4fee\u6539\u200b\u7ed3\u679c\u200b - \u200b\u5c06\u200b\u5176\u200b\u53f3\u4fa7\u200b\u5c0f\u4e8e\u200b\u7684\u200b\u6700\u8fd1\u200b\u5143\u7d20\u200b\u66f4\u200b\u6539\u4e3a\u200b\u5176\u200b\u8bb0\u5f55\u200b\u7684\u200b\u5143\u7d20\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u7684\u200b\u53f3\u4fa7\u200b\u5c0f\u4e8e\u200b\u5176\u200b\u7684\u200b\u6700\u8fd1\u200b\u5143\u7d20\u200b     - \u200b\u4f8b\u5982\u200b\u5047\u8bbe\u200b\u5f53\u524d\u200b\u8bb0\u5f55\u200b\u4e3a\u200b\\(nums[2]\\)\u200b\u7684\u200b\u8bb0\u5f55\u200b[1, 3] ---&gt; \\(nums[3]\\)\u200b\u7684\u200b\u7ed3\u679c\u200b\u4e3a\u200b[1, 4]\u200b\u5219\u200b\u66f4\u6539\u200b\\(nums[2]\\)\u200b\u7684\u200b\u7ed3\u679c\u200b\u4e3a\u200b[1, 4]</p> <p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b</p> <p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b\\(O(N)\\)---\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u6700\u591a\u5165\u200b\u6808\u200b\\\u200b\u51fa\u6808\u200b\u4e00\u6b21\u200b</p> <p>\u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b\\(O(N)\\)</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#_5","title":"\u5355\u8c03\u200b\u6808\u200b\u7ed3\u6784\u200b\u7684\u200b\u6a21\u677f","text":"<p>Tip</p> <p>\u200b\u9762\u8bd5\u200b\u548c\u200b\u7b14\u8bd5\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u9759\u6001\u200b\u6570\u7ec4\u200b\u6a21\u62df\u200b\u6808\u200b\u800c\u200b\u4e0d\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b\u5e93\u200b\u81ea\u5e26\u200b\u7684\u200b\u6808\u200b</p> <p>\u200b\u53c2\u8003\u200b\u6a21\u677f\u200b</p> \u200b\u5355\u8c03\u200b\u9012\u589e\u200b\u6808\u200b C++<pre><code>vector&lt;int&gt; arr(N, 0); // \u200b\u8bb0\u5f55\u200b\u9898\u76ee\u200b\u6570\u7ec4\u200b\nvector&lt;int&gt; stack(N, 0); // \u200b\u6a21\u62df\u200b\u6808\u200b\n\nstd::pair&lt;int, int&gt; ans[N]; // \u200b\u8bb0\u5f55\u200b\u5de6\u53f3\u200b\u8fb9\u754c\u200b\nint n, top; // n\u200b\u4e3a\u200b\u603b\u200b\u5143\u7d20\u200b\u6570\u200b\uff0ctop\u200b\u4e3a\u6808\u200b\u9876\u200b\u6307\u9488\u200b\nvoid monotonicallyIncreasingStack() {\n    top = 0;\n    int cur;\n    // \u200b\u904d\u5386\u200b\u9636\u6bb5\u200b\n    for (int i = 0; i &lt; n; i++) {\n        while (top &gt; 0 &amp;&amp; arr[i] &lt;= arr[stack[top - 1]]) {\n            cur = stack[--top];\n            ans[cur].first = top &gt; 0 ? stack[top - 1] : -1;\n            ans[cur].second = i;\n        }\n        stack[top++] = i;\n    }\n\n    // \u200b\u6e05\u7a7a\u200b\u6808\u200b\n    while (top &gt; 0) {\n        cur = stack[--top];\n        ans[cur].first = top &gt; 0 ? stack[top - 1] : -1;\n        ans[cur].second = -1;\n    }\n\n    // \u200b\u5bf9\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b\n    for (int i = n - 1; i &gt; 0; i--) {\n        if (ans[i].second != -1 &amp;&amp; arr[ans[i].second] == arr[i]) {\n            ans[i].second = ans[ans[i].second].second;\n        }\n    }\n}\n</code></pre> <p>Tip</p> <p>\u200b\u867d\u7136\u200b\u6a21\u7248\u200b\u4e2d\u200b\u5e26\u6709\u200b\u5bf9\u200b\u76f8\u540c\u200b\u5143\u7d20\u200b\u7684\u200b\u5904\u7406\u200b\uff0c\u200b\u4f46\u200b\u5bf9\u4e8e\u200b\u5b9e\u9645\u200b\u9898\u76ee\u200b\u662f\u5426\u200b\u771f\u7684\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u5904\u7406\u200b\u8fd8\u200b\u9700\u8981\u200b\u8fdb\u4e00\u6b65\u200b\u8003\u8651\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#_6","title":"\u8bfe\u4e0a\u200b\u4f8b\u9898","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#q1-daily-temperatures","title":"Q1 : Daily Temperatures","text":"<p>\u200b\u9898\u76ee\u200b</p> \u200b\u82f1\u6587\u200b\u4e2d\u6587\u200b <p>Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b temperatures \uff0c\u200b\u8868\u793a\u200b\u6bcf\u5929\u200b\u7684\u200b\u6e29\u5ea6\u200b\uff0c\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b answer \uff0c\u200b\u5176\u4e2d\u200b answer[i] \u200b\u662f\u200b\u6307\u200b\u5bf9\u4e8e\u200b\u7b2c\u200b i \u200b\u5929\u200b\uff0c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u66f4\u9ad8\u200b\u6e29\u5ea6\u200b\u51fa\u73b0\u200b\u5728\u200b\u51e0\u5929\u200b\u540e\u200b\u3002\u200b\u5982\u679c\u200b\u6c14\u6e29\u200b\u5728\u200b\u8fd9\u200b\u4e4b\u540e\u200b\u90fd\u200b\u4e0d\u4f1a\u200b\u5347\u9ad8\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u8be5\u200b\u4f4d\u7f6e\u200b\u7528\u200b 0 \u200b\u6765\u200b\u4ee3\u66ff\u200b\u3002</p> <p>\u200b\u9898\u76ee\u200b\u8bf4\u200b\u7684\u200b\u4e5f\u200b\u662f\u200b\u6bd4\u8f83\u200b\u76f4\u767d\u200b\u7684\u200b\uff0c\u200b\u6c42\u200b\u4f4d\u4e8e\u200b<code>i</code>\u200b\u53f3\u8fb9\u200b\u4e14\u200b\u8ddd\u79bb\u200b<code>i</code>\u200b\u6700\u8fd1\u200b\u7684\u200b\u4e25\u683c\u200b\u5927\u4e8e\u200b\u5176\u200b\u7684\u200b\u5143\u7d20\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200b\u9012\u51cf\u200b\u7684\u200b\u5355\u8c03\u200b\u6808\u200b\u5b9e\u73b0\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; temperatures) {\n        vector&lt;int&gt; ans(temperatures.size(), 0);\n\n        for (int i = 0; i &lt; temperatures.size(); i++) {\n            while (top &gt; 0 &amp;&amp; temperatures[i] &gt; temperatures[st[top - 1]]) {\n                int cur = st[--top];\n                ans[cur] = i - cur;\n            }\n            // \u200b\u76f8\u7b49\u200b\u4e5f\u200b\u52a0\u5165\u200b\n            st[top++] = i;\n        }\n\n        return ans;\n    }\nprivate:\n    static constexpr int N = 1e5 + 10;\n    array&lt;int, N&gt; st;\n    int top;\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#q2-sum-of-sub-array-minimus","title":"Q2: Sum of Sub-array Minimus","text":"<p>\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</p> English\u200b\u4e2d\u6587\u200b <p>Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. </p> <p>Since the answer may be large, return the answer modulo 109 + 7.</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b arr\uff0c\u200b\u627e\u5230\u200b min(b) \u200b\u7684\u200b\u603b\u548c\u200b\uff0c\u200b\u5176\u4e2d\u200b b \u200b\u7684\u200b\u8303\u56f4\u200b\u4e3a\u200b arr \u200b\u7684\u200b\u6bcf\u4e2a\u200b\uff08\u200b\u8fde\u7eed\u200b\uff09\u200b\u5b50\u200b\u6570\u7ec4\u200b\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u7b54\u6848\u200b\u53ef\u80fd\u200b\u5f88\u5927\u200b\uff0c\u200b\u56e0\u6b64\u200b \u200b\u8fd4\u56de\u200b\u7b54\u6848\u200b\u6a21\u200b 10^9 + 7 \u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b<code>x</code>\u200b\u4e0b\u6807\u200b\u4e3a\u200bi\u200b\u5176\u4e2d\u200b\u4ee5\u5176\u4e3a\u200b\u6700\u5c0f\u503c\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b\uff0c\u200b\u4e3a\u200b\u5de6\u4fa7\u200b\u6700\u9760\u8fd1\u200b\u5176\u4e14\u200b\u5c0f\u4e8e\u200b\u5176\u200b\u7684\u200b\u5143\u7d20\u200bl\u200b\u5c0f\u6807\u200b\u4e3a\u200bj\u200b\u548c\u200b\u53f3\u4fa7\u200b\u6700\u9760\u8fd1\u200b\u4e14\u200b\u5c0f\u4e8e\u200b\u5176\u200b\u7684\u200b\u5143\u7d20\u200br\u200b\u4e0b\u6807\u200b\u4e3a\u200bk\u200b\u6240\u200b\u786e\u5b9a\u200b\u7684\u200b\u8303\u56f4\u200b\u6784\u6210\u200b\u7684\u200b\u7ec4\u5408\u200b\uff1a[j.... i ...k] \u200b\u603b\u200b\u7684\u200b\u4e2a\u6570\u200b\u4e3a\u200b (i - j) * (k - i)</p> <p>\u200b\u5219\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u5c31\u200b\u8f6c\u6362\u200b\u4e3a\u4e86\u200b\u6c42\u200b\u6570\u7ec4\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u5de6\u53f3\u200b\u4e24\u4fa7\u200b\u8ddd\u79bb\u200b\u5176\u200b\u6700\u8fd1\u200b\u7684\u200b\u5c0f\u4e8e\u200b\u5176\u200b\u7684\u200b\u5143\u7d20\u200b\u7684\u200b\u4f4d\u7f6e\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    typedef long long LL;\n    int sumSubarrayMins(vector&lt;int&gt;&amp; arr) {\n        int MOD = 1'000'000'000 + 7;\n        LL ans = 0;\n\n        for (int i = 0, cur; i &lt; arr.size(); i++) {\n            // \u200b\u76f8\u540c\u200b\u5143\u7d20\u200b\u4e00\u6837\u200b\u5f39\u200b\u51fa\u200b\n            while (top &gt; 0 &amp;&amp; arr[st[top - 1]] &gt;= arr[i]) {\n                cur = st[--top];\n                int left = top == 0 ? -1 : st[top - 1];\n                ans = (ans + (LL) (cur - left) * (i - cur) * arr[cur]) % MOD;\n            }\n            st[top++] = i;\n        }\n\n        while (top &gt; 0) {\n            int cur = st[--top];\n            int left = top == 0 ? -1 : st[top - 1];\n            ans = (ans + (LL) (cur - left) * (arr.size() - cur) * arr[cur]) % MOD;\n        }\n\n        return (int)(ans % MOD);\n    }\nprivate:\n    constexpr static int N = 3e4 + 10;\n    array&lt;int, N&gt; st;\n    int top = 0;\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#q3-largest-rectangle-in-histogram","title":"Q3: Largest Rectangle in Histogram","text":"<p>\u200b\u9898\u76ee\u200b</p> English\u200b\u4e2d\u6587\u200b <p>Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.</p> <p>\u200b\u7ed9\u5b9a\u200b n \u200b\u4e2a\u200b\u975e\u8d1f\u200b\u6574\u6570\u200b\uff0c\u200b\u7528\u6765\u200b\u8868\u793a\u200b\u67f1\u72b6\u56fe\u200b\u4e2d\u200b\u5404\u4e2a\u200b\u67f1\u5b50\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u67f1\u5b50\u200b\u5f7c\u6b64\u200b\u76f8\u90bb\u200b\uff0c\u200b\u4e14\u200b\u5bbd\u5ea6\u200b\u4e3a\u200b 1 \u3002\u200b\u6c42\u200b\u5728\u200b\u8be5\u200b\u67f1\u72b6\u56fe\u200b\u4e2d\u200b\uff0c\u200b\u80fd\u591f\u200b\u52fe\u52d2\u200b\u51fa\u6765\u200b\u7684\u200b\u77e9\u5f62\u200b\u7684\u200b\u6700\u5927\u200b\u9762\u79ef\u200b\u3002</p> <p>\u200b\u4e3e\u4f8b\u8bf4\u660e\u200b</p> <p>input: heights = [2, 1, 5, 6, 2, 3]</p> <p>output: 10</p> <p>The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units.</p> <p></p> <p>\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u8f6c\u6362\u200b\u4e5f\u200b\u6bd4\u8f83\u200b\u660e\u663e\u200b\uff0c\u200b\u5bfb\u627e\u200b\u5176\u200b\u5de6\u53f3\u200b\u4e24\u4fa7\u200b\u5c0f\u4e8e\u200b\u5176\u200b\u7684\u200b\u6700\u8fd1\u200b\u4f4d\u7f6e\u200b\u5373\u200b\u53ef\u4ee5\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        int n = heights.size();\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            while (top &gt; 0 &amp;&amp; heights[i] &lt;= heights[st[top - 1]]) {\n                int cur = st[--top];\n                int right = i;\n                int left = top == 0 ? -1 : st[top - 1];\n                ans = std::max(ans, (right - left - 1 ) * heights[cur]);\n            }\n            st[top++] = i;\n        }\n\n        while (top &gt; 0) {\n            int cur = st[--top];\n            int left = top == 0 ? -1 : st[top - 1];\n            ans = std::max(ans, heights[cur] * (n - left - 1));\n        }\n        return ans;\n    }\nprivate:\n    constexpr static int N = 1e5 + 10;\n    array&lt;int, N&gt; st;\n    int top = 0;\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#q4-maximal-rectangle","title":"Q4: Maximal Rectangle","text":"<p>\u200b\u9898\u76ee\u200b</p> English\u200b\u4e2d\u6587\u200b <p>Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u4ec5\u200b\u5305\u542b\u200b 0 \u200b\u548c\u200b 1 \u3001\u200b\u5927\u5c0f\u200b\u4e3a\u200b rows x cols \u200b\u7684\u200b\u4e8c\u7ef4\u200b\u4e8c\u8fdb\u5236\u200b\u77e9\u9635\u200b\uff0c\u200b\u627e\u51fa\u200b\u53ea\u200b\u5305\u542b\u200b 1 \u200b\u7684\u200b\u6700\u5927\u200b\u77e9\u5f62\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5176\u200b\u9762\u79ef\u200b\u3002</p> <p>Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]</p> <p>Output: 6</p> <p>Explanation: The maximal rectangle is shown in the above picture.</p> <p></p> <p>\u200b\u8fd9\u9053\u9898\u200b\u5982\u4f55\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5355\u8c03\u200b\u6808\u200b\u5462\u200b\uff1f\u200b\u53ef\u4ee5\u200b\u8003\u8651\u200b\u8f6c\u6362\u200b\u4e3a\u200bQ3\u200b\u7684\u200b\u76f4\u65b9\u56fe\u200b\u95ee\u9898\u200b,\u200b\u901a\u8fc7\u200b\u9010\u884c\u200b\u904d\u5386\u200b\u5373\u200b\u53ef\u4ee5\u200b\u628a\u200b\u8fd9\u4e2a\u200b\u4e8c\u7ef4\u200b\u6570\u7ec4\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u76f4\u65b9\u56fe\u200b(\u200b\u8bb0\u5f55\u200b<code>1</code>\u200b\u4e2a\u6570\u200b)\u200b\u6b64\u65f6\u200b\u95ee\u9898\u200b\u7b49\u4ef7\u200b\u4e8e\u200bQ3 </p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int maximalRectangle(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) {\n        // \u200b\u4f7f\u7528\u200b\u5355\u8c03\u200b\u6808\u200bO(m * n)\n        int ans = 0;\n        int n = matrix.size();\n        int m = matrix[0].size();\n        vector&lt;int&gt; height(m, 0);\n\n        for (int i = 0; i &lt; matrix.size(); i++) {\n            // \u200b\u538b\u7f29\u200b\u77e9\u9635\u200b\n            for (int j = 0; j &lt; m; j++) height[j] = matrix[i][j] == '0' ? 0 : height[j] + 1;\n            ans = std::max(ans, largesRectangLeArea(height));\n        }\n        return ans;\n    }\nprivate:\n    static const int MAX = 210;\n    array&lt;int, MAX&gt; st;\n    int top = 0;\n\n    int largesRectangLeArea(vector&lt;int&gt; &amp;height) {\n        // Q3 solution\n        int ans = 0;\n        int n = height.size();\n        for (int i = 0; i &lt; n; i++) {\n            while(top &gt; 0 &amp;&amp; height[i] &lt;= height[st[top - 1]]) {\n                int cur = st[--top];\n                int left = top == 0 ? -1 : st[top - 1];\n                int right = i;\n                ans = std::max(ans, (right - left - 1) * height[cur]);\n            }\n\n            st[top++] = i;\n        }\n\n        while (top &gt; 0) {\n            int cur = st[--top];\n            int left = top == 0 ? -1 : st[top - 1];\n            int right = n;\n            ans = std::max(ans, (right - left - 1) * height[cur]);\n        }\n\n        return ans;\n    }\n}\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#q5-maximum-width-ramp","title":"Q5: Maximum Width Ramp","text":"<p>\u200b\u9898\u76ee\u200b</p> <p>A ramp in an integer array nums is a pair (i, j) for which i &lt; j and nums[i] &lt;= nums[j]. The width of such a ramp is j - i.</p> <p>Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.</p> <p>\u200b\u9996\u5148\u200b\u4ece\u5de6\u5230\u53f3\u200b\u6536\u96c6\u200b\u4e25\u683c\u200b\u9012\u51cf\u200b\u7684\u200b\u5355\u8c03\u200b\u6808\u200b\uff0c\u200b\u518d\u200b\u5012\u5e8f\u200b\u5f39\u51fa\u200b\u6808\u200b\u4e2d\u200b\u5143\u7d20\u200b\u4e14\u200b\u8ba1\u7b97\u200b\u533a\u95f4\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5373\u53ef\u200b\u83b7\u5f97\u200b\u7b54\u6848\u200b\u3002</p> <p>\u200b\u5982\u4f55\u200b\u7406\u89e3\u200b\u5462\u200b\uff1f\u200b\u9996\u5148\u200b\u5047\u8bbe\u200bi\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5143\u7d20\u200b\u5927\u5c0f\u200b\u4e3a\u200bx\uff0cj(j &gt; i)\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u200by\uff0c\u200b\u800c\u200by &gt; x,\u200b\u6709\u200b\u53ef\u80fd\u200bj\u200b\u662f\u200b\u6700\u957f\u200b\u7684\u200b\u7b54\u6848\u200b\u5de6\u200b\u8fb9\u754c\u200b\u800c\u200bi\u200b\u4e0d\u662f\u200b\u5417\u200b\uff1f\u200b\u663e\u7136\u200b\u662f\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u7684\u200b\uff0c\u200b\u6240\u4ee5\u200b\u53ea\u200b\u9700\u8981\u200b\u6536\u96c6\u200b\u4e25\u683c\u200b\u9012\u51cf\u200b\u7684\u200b\u5143\u7d20\u200b\u5373\u53ef\u200b\u3002</p> <p>\u200b\u5f39\u200b\u51fa\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u82e5\u200b\u5f53\u524d\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u5143\u7d20\u200b\u5bf9\u5e94\u200b\u7684\u200b\u53f3\u200b\u8fb9\u754c\u200b\u53ef\u4ee5\u200b\u4e0e\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5de6\u200b\u8fb9\u754c\u200b\u6784\u6210\u200b\u4e00\u4e2a\u200b\u5761\u200b\uff0c\u200b\u5219\u200b\u8be5\u200b\u7ed3\u679c\u200b\u4e00\u5b9a\u200b\u662f\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\u80fd\u200b\u6784\u6210\u200b\u5761\u200b\u7684\u200b\u6700\u5927\u503c\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5728\u200b(\u200b\u6808\u9876\u200b\u5143\u7d20\u200b.....\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b)\u200b\u4e2d\u200b\u7684\u200b\u4efb\u610f\u200b\u5143\u7d20\u200b\u7684\u200b\u957f\u5ea6\u200b\u90fd\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u5927\u4e8e\u200b\u8fd9\u4e2a\u200b\u7ed3\u679c\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int maxWidthRamp(vector&lt;int&gt; &amp;nums) {\n        // \u200b\u52a0\u5165\u200b\u4e25\u683c\u200b\u9012\u589e\u200b\u7684\u200b\u5e8f\u5217\u200b -- \u200b\u5de6\u200b\u8fb9\u754c\u200b\n        int ans = 0;\n        for (int i = 1; i &lt; nums.size(); ++i) {\n            if (nums[i] &lt; nums[st[top - 1]]) st[top++] = i;\n\n        }\n        // \u200b\u9006\u5e8f\u200b\u786e\u5b9a\u200b\u53f3\u200b\u8fb9\u754c\u200b\n        for (int i = nums.size() - 1; i &gt;= 0; --i) {\n            while (top &gt; 0 &amp;&amp; nums[i] &gt;= nums[st[top - 1]]) {\n                ans = std::max(ans, i - st[--top]);\n            }\n        }\n\n        return ans;\n    }\n\nprivate:\n    static const int N = 5e4 + 10;\n    array&lt;int, N&gt; st;\n    int top = 1; // \u200b\u7b49\u4ef7\u200b\u4e8e\u200b st[top++] = 0;\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#q6-remove-duplicate-letters","title":"Q6: Remove Duplicate Letters","text":"<p>\u200b\u9898\u76ee\u200b</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b s \uff0c\u200b\u8bf7\u200b\u4f60\u200b\u53bb\u9664\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u91cd\u590d\u200b\u7684\u200b\u5b57\u6bcd\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u6bcf\u4e2a\u200b\u5b57\u6bcd\u200b\u53ea\u200b\u51fa\u73b0\u200b\u4e00\u6b21\u200b\u3002\u200b\u9700\u200b\u4fdd\u8bc1\u200b \u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u7684\u200b\u5b57\u5178\u200b\u5e8f\u200b\u6700\u5c0f\u200b(\u200b\u8981\u6c42\u200b\u4e0d\u80fd\u200b\u6253\u4e71\u200b\u5176\u4ed6\u200b\u5b57\u7b26\u200b\u7684\u200b\u76f8\u5bf9\u200b\u4f4d\u7f6e\u200b)</p> <p>\u200b\u6bd4\u8f83\u200b\u597d\u200b\u60f3\u200b\u7684\u200b\u5c31\u662f\u200b\u5229\u7528\u200b\u5355\u8c03\u200b\u9012\u589e\u200b\u7684\u200b\u6808\u200b\u53bb\u200b\u8bb0\u5f55\u200b\u7ed3\u679c\u200b\u7136\u540e\u200b\u53cd\u5e8f\u200b\u5c31\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u4f46\u200b\u7531\u4e8e\u200b\u6709\u200b\u91cd\u590d\u200b\u5143\u7d20\u200b\u5982\u4f55\u200b\u4fdd\u8bc1\u200b\u5f39\u200b\u51fa\u200b\u5143\u7d20\u200b\u7684\u200b\u5408\u7406\u6027\u200b\u5462\u200b\uff1f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u54c8\u5e0c\u200b\u8868\u200b\u6216\u8005\u200b\u9759\u6001\u200b\u6570\u7ec4\u200b\u53bb\u200b\u8bb0\u5f55\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\u51fa\u73b0\u200b\u7684\u200b\u6b21\u6570\u200b\uff0c\u200b\u5f53\u5c0f\u538b\u200b\u5927\u200b\u53d1\u751f\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u82e5\u200b\u88ab\u200b\u538b\u200b\u7684\u200b\u5143\u7d20\u200b\u5728\u200b\u540e\u9762\u200b\u8fd8\u6709\u200b\u5219\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u5f39\u200b\u51fa\u200b\uff0c\u200b\u5426\u5219\u200b\u4e0d\u80fd\u200b\u5f39\u200b\u51fa\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    string removeDuplicateLetters(string s) {\n        // \u200b\u7edf\u8ba1\u200b\u9891\u7387\u200b\n        string ans;\n        for (char c : s) count[c - 'a']++;\n\n        for (char c : s) {\n            if (!enter[c - 'a']) {\n                while(top &gt; 0 &amp;&amp; st[top - 1] &gt; c &amp;&amp; count[st[top - 1] - 'a'] &gt; 0) {\n                    enter[st[top - 1] - 'a'] = false;\n                    top--;\n                }\n                st[top++] = c;\n                enter[c - 'a'] = true;\n            }\n            count[c - 'a']--;\n        }\n        while (top &gt; 0) ans += st[--top];\n        std::reverse(ans.begin(), ans.end());\n        return ;\n    }\nprivate:\n    std::array&lt;int, 26&gt; count;\n    std::array&lt;char, 26&gt; st;\n    std::array&lt;bool, 26&gt; enter;\n    int top = 0;\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#q7-steps-to-make-array-nondecreasing","title":"Q7: Steps to Make Array nonDecreasing(\u200b\u5927\u9c7c\u5403\u5c0f\u9c7c\u200b\u95ee\u9898\u200b)","text":"<p>\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</p> <p>You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] &gt; nums[i] for all 0 &lt; i &lt; nums.length.</p> <p>Return the number of steps performed until nums becomes a non-decreasing array.</p> <p>\u200b\u5927\u9c7c\u5403\u5c0f\u9c7c\u200b\u6a21\u578b\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200bpair\u200b\u8bb0\u5f55\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\u7684\u200b\u6267\u884c\u200b\u5b8c\u200b\u540e\u7eed\u200b\u64cd\u4f5c\u200b\u9700\u8981\u200b\u7684\u200b\u8f6e\u6b21\u200b\u4e0e\u200b\u6570\u503c\u200b\uff0c\u200b\u4e3e\u4f8b\u8bf4\u660e\u200b\u3002\u200b\u901a\u8fc7\u200b\u5355\u8c03\u200b\u6808\u200b(\u200b\u5355\u8c03\u200b\u9012\u51cf\u200b\u6808\u200b)\u200b\u6765\u200b\u7ef4\u62a4\u200b\u7b54\u6848\u200b\u3002</p> <p>\u200b\u4e3e\u4f8b\u8bf4\u660e\u200b\uff0c\u200b\u6bd4\u5982\u8bf4\u200b\u8f93\u5165\u200b[5,3,4,4,7,3,6,11,8,5,11] \u200b\u9006\u5e8f\u200b\u904d\u5386\u200b</p> <ul> <li>{11, 0}\u200b\u538b\u5165\u200b\u6808\u200b</li> <li>\u200b\u542b\u4e49\u200b\u4e3a\u200b: 11\u200b\u8fd9\u4e2a\u200b\u5143\u7d20\u200b,\u200b\u9700\u8981\u200b0\u200b\u8f6e\u200b\u624d\u80fd\u200b\u4f7f\u5f97\u200b\u5176\u200b\u53f3\u4fa7\u200b\u5143\u7d20\u200b\u90fd\u200b\u4e0d\u200b\u5c0f\u4e8e\u200b\u5b83\u200b(\u200b\u90fd\u200b\u4e0d\u80fd\u200b\u88ab\u200b\u5b83\u200b\u5403\u6389\u200b)</li> <li>5 &lt; 11,\u200b\u5c06\u200b {5, 0}\u200b\u538b\u5165\u200b\u6808\u200b</li> <li>\u200b\u542b\u4e49\u200b\u4e3a\u200b: 5\u200b\u8fd9\u4e2a\u200b\u5143\u7d20\u200b,\u200b\u9700\u8981\u200b0\u200b\u8f6e\u200b\u624d\u80fd\u200b\u4f7f\u5f97\u200b\u5176\u200b\u53f3\u4fa7\u200b\u5143\u7d20\u200b\u90fd\u200b\u4e0d\u200b\u5c0f\u4e8e\u200b\u5b83\u200b(\u200b\u90fd\u200b\u4e0d\u80fd\u200b\u88ab\u200b\u5b83\u200b\u5403\u6389\u200b)</li> <li>8 &gt; 5, \u200b\u5f39\u200b\u51fa\u200b{5, 0},\u200b\u5e76\u4e14\u200b\u5c06\u200b{8, 1}\u200b\u538b\u5165\u200b\u6808\u200b\u4e2d\u200b</li> <li>\u200b\u542b\u4e49\u200b\u4e3a\u200b: \u200b\u5728\u200b\u7b2c\u200b0\u200b\u8f6e\u200b<code>8</code>\u200b\u8fd9\u4e2a\u200b\u5143\u7d20\u200b\u9700\u8981\u200b\u6d88\u8d39\u200b<code>1\u200b\u8f6e\u200b</code>\u200b\u624d\u80fd\u200b\u5403\u6389\u200b<code>5</code>\uff0c\u200b\u800c\u200b<code>11 &gt; 8</code>\u200b\u4e0d\u200b\u9700\u8981\u200b\u64cd\u4f5c\u200b</li> <li>11 &gt; 8, \u200b\u5f39\u200b\u51fa\u200b{8, 1}, \u200b\u4e14\u200b\u5c06\u200b{11, 2}\u200b\u538b\u5165\u200b\u6808\u200b</li> <li>6 &lt; 11, \u200b\u538b\u5165\u200b{6, 0}</li> <li>3 &lt; 6, \u200b\u538b\u5165\u200b{3, 0}</li> <li>7 &gt; 3\uff0c\u200b\u538b\u5165\u200b{7,1}; 7 &gt; 6 \u200b\u538b\u5165\u200b{7, 2}</li> <li>4 &lt; 7, \u200b\u538b\u5165\u200b{4, 0}</li> <li>4 = 4, \u200b\u538b\u5165\u200b{4, 0}</li> <li>3 &lt; 4, \u200b\u538b\u5165\u200b{3, 0}</li> <li>5 &gt; 3, \u200b\u5f39\u200b\u51fa\u200b{3, 0} \u200b\u538b\u5165\u200b{5, 1}; 5 &gt; 4\u200b\u5f39\u200b\u51fa\u200b{4,0},\u200b\u538b\u5165\u200b{5, 2}; 5 &gt; 4\u200b\u5f39\u200b\u51fa\u200b{4,0} \u200b\u538b\u5165\u200b{5,4}</li> </ul> <p>\u200b\u6b64\u65f6\u200b\u53ea\u200b\u9700\u8981\u200b\u8fd4\u56de\u200b\u6808\u4e2d\u200b\u7b2c\u4e8c\u4e2a\u200b\u4f4d\u7f6e\u200b\u6700\u5927\u200b\u7684\u200b\u503c\u200b\u5373\u53ef\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    using PII = std::pair&lt;int, int&gt;;\n    int totalSteps(std::vector&lt;int&gt;&amp; nums) {\n        int ans = 0;\n        for (int i = nums.size() - 1; i &gt;= 0; --i) {\n            int curTurns = 0;\n            while (size &gt; 0 &amp;&amp; st[size - 1].first &lt; nums[i]) {\n                curTurns = std::max(curTurns + 1, st[--size].second);\n            }\n            st[size].first = nums[i];\n            st[size++].second = curTurns;\n            ans = std::max(ans, curTurns);\n        }\n\n        return ans;\n    }\nprivate:\n    static constexpr int N = 1e5 + 10;\n    std::array&lt;PII, N&gt; st;\n    int size = 0;\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#q8-count-sub-matrices-with-all-ones","title":"Q8: Count sub-matrices with all ones","text":"<p>\u200b\u548c\u200bQ3\u200b\u4e0e\u200bQ4\u200b\u7c7b\u4f3c\u200b,\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u5355\u8c03\u200b\u6808\u200b\u601d\u8def\u200b\u5e76\u200b\u4e0d\u200b\u663e\u7136\u200b\u8bf4\u5b9e\u8bdd\u200b\uff0c\u200b\u5373\u4f7f\u200b\u60f3\u5230\u200b\u4e86\u200b\u5355\u8c03\u200b\u6808\u200b\u8fd9\u4e2a\u200b\u903b\u8f91\u200b\u4e5f\u200b\u4e0d\u200b\u5bb9\u6613\u200b\u60f3\u5230\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u200b\u4e00\u5c42\u200b\u4e00\u5c42\u200b\u7684\u200b\u9012\u589e\u200b(bottom\u200b\u503c\u200b\u7684\u200b\u5224\u65ad\u200b)\u200b\u8ba1\u7b97\u200b\u6765\u200b\u907f\u514d\u200b\u91cd\u590d\u200b\u8ba1\u7b97\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int numSubmat(std::vector&lt;std::vector&lt;int&gt;&gt;&amp; mat) {\n        int n = mat.size();\n        int m = mat[0].size();\n        int ans = 0;\n        for (int i = 0; i &lt; n; ++i) {\n            // \u200b\u77e9\u9635\u200b\u538b\u7f29\u200b\n            for (int j = 0; j &lt; m; ++j) {\n                heights[j] = mat[i][j] == 0 ? 0 : heights[j] + 1;\n            }\n            // \u200b\u6536\u96c6\u200b\u7ed3\u679c\u200b\n            ans += countFroBottom(m);\n        }\n        return ans;\n    }\nprivate:\n    static constexpr int N = 200;\n    std::array&lt;int, N&gt; heights;\n    std::array&lt;int, N&gt; st;\n    int top = 0;\n\n    int countFroBottom(int m) {\n        top = 0;\n        int ans = 0;\n        for (int i = 0, left, len, bottom; i &lt; m; ++i) {\n            // \u200b\u901a\u8fc7\u200b\u5355\u8c03\u200b\u9012\u589e\u200b\u6808\u200b\u6536\u96c6\u200b\u7ed3\u679c\u200b\n            while (top &gt; 0 &amp;&amp; heights[st[top - 1]] &gt;= heights[i]) {\n                int cur = st[--top];\n                // \u200b\u4ec5\u5f53\u200b\u5f53\u524d\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\u5927\u4e8e\u200b\u5f53\u524d\u200b\u5143\u7d20\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u6808\u9876\u200b\u5143\u7d20\u200b\u88ab\u200b\u5f39\u51fa\u200b\u7684\u200b\u60c5\u51b5\u200b\u624d\u200b\u8ba1\u7b97\u200b\u4e00\u6b21\u200b\u7b54\u6848\u200b\n                if (heights[cur] &gt; heights[i]) {\n                    left = top == 0 ? -1 : st[top - 1]; // \u200b\u5de6\u4fa7\u200b\u7aef\u70b9\u200b\n                    len = i - left - 1; // \u200b\u603b\u200b\u5bbd\u5ea6\u200b\n                    bottom = std::max(left == - 1 ? 0 : heights[left], heights[i]); // \u200b\u627e\u200b\u5de6\u53f3\u200b\u7aef\u70b9\u200b\u7684\u200b\u8f83\u5927\u200b\u503c\u200b\u4f5c\u4e3a\u200b\u5e95\u200b\uff0c\u200b\u9632\u6b62\u200b\u91cd\u590d\u200b\u8ba1\u7b97\u200b\n                    ans += (heights[cur] - bottom) * len * (len + 1) / 2; // \u200b\u901a\u8fc7\u200bC(len + 1, 2)\u200b\u7684\u200b\u65b9\u6cd5\u200b\u8ba1\u7b97\u200b\u4e00\u5c42\u200b\u603b\u200b\u7684\u200b\u5c0f\u200b\u77e9\u5f62\u200b\u6570\u200b, heights[cur] - bottom\u200b\u8ba1\u7b97\u200b\u51fa\u200b\u4e00\u5171\u200b\u6709\u200b\u591a\u5c11\u200b\u5c42\u200b\n                }\n            }\n            st[top++] = i;\n        }\n\n        // \u200b\u5c06\u200b\u6808\u200b\u6e05\u7a7a\u200b\n        while (top &gt; 0) {\n            int cur = st[--top];\n            int left = top == 0 ? -1 : st[top - 1];\n            int len = m - left - 1;\n            int down = left == -1 ? 0 : heights[left];\n            ans += (heights[cur] - down) * len * (len + 1) / 2;\n        }\n\n        return ans;\n    }\n};    \n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Monotonic%20Stack/#_7","title":"\u5355\u8c03\u200b\u6808\u200b\u7684\u200b\u603b\u7ed3","text":"<p>\u200b\u603b\u7ed3\u200b</p> <p>\u200b\u5355\u8c03\u200b\u6808\u200b\u6700\u200b\u7ecf\u5178\u200b\u7684\u200b\u7528\u6cd5\u200b\u5f53\u7136\u200b\u662f\u200b\u5bfb\u627e\u200b\u4f4d\u4e8e\u200b\u5176\u200b\u5de6\u53f3\u200b\u4e24\u4fa7\u200b\u5927\u4e8e\u200b/\u200b\u5c0f\u4e8e\u200b\u5176\u200b\u7684\u200b\u6700\u8fd1\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u5f53\u7136\u200b\u5355\u8c03\u200b\u6808\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6709\u200b\u5176\u4ed6\u200b\u5999\u7528\u200b\uff0c\u200b\u6700\u200b\u4e3b\u8981\u200b\u7684\u200b\u601d\u60f3\u200b\u662f\u200b\u7ef4\u6301\u200b\u6c42\u89e3\u200b\u7b54\u6848\u200b\u7684\u200b\u53ef\u80fd\u6027\u200b</p> <ul> <li>\u200b\u5355\u8c03\u200b\u6808\u91cc\u200b\u7684\u200b\u6240\u6709\u200b\u5bf9\u8c61\u200b\u6309\u7167\u200b\u89c4\u5b9a\u200b\u597d\u200b\u7684\u200b\u5355\u8c03\u200b\u6027\u6765\u200b\u7ec4\u7ec7\u200b</li> <li>\u200b\u5f53\u200b\u67d0\u4e2a\u200b\u5bf9\u8c61\u200b\u8fdb\u5165\u200b\u5355\u8c03\u200b\u6808\u9053\u200b\u65f6\u5019\u200b\uff0c\u200b\u4f1a\u200b\u4ece\u200b\u6808\u9876\u200b\u4f9d\u6b21\u200b\u6dd8\u6c70\u200b\u5355\u8c03\u200b\u6808\u91cc\u200b\u5bf9\u200b\u540e\u7eed\u200b\u6c42\u89e3\u200b\u7b54\u6848\u200b\u6ca1\u6709\u200b\u5e2e\u52a9\u200b\u7684\u200b\u5bf9\u8c61\u200b</li> <li>\u200b\u6bcf\u4e2a\u200b\u5bf9\u8c61\u200b\u4ece\u6808\u200b\u9876\u5f39\u200b\u51fa\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u7ed3\u7b97\u200b\u5f53\u524d\u200b\u5bf9\u8c61\u200b\u53c2\u4e0e\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u968f\u540e\u200b\u8fd9\u4e2a\u200b\u5bf9\u8c61\u200b\u4e0d\u200b\u5728\u200b\u53c2\u4e0e\u200b\u6c42\u89e3\u200b\u8fc7\u7a0b\u200b</li> </ul> <p>\u200b\u5355\u8c03\u200b\u6808\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u548c\u200b\u52a8\u6001\u200b\u89c4\u5212\u200b\u95ee\u9898\u200b\u8fdb\u884c\u200b\u7ec4\u5408\u200b\uff0c\u200b\u5c06\u4f1a\u200b\u5728\u200b\u62d3\u5c55\u200b\u90e8\u5206\u200b\u8fdb\u884c\u200b\u8bb2\u89e3\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/N%20Queen%20Question/","title":"N\u200b\u7687\u540e\u200b\u95ee\u9898\u200b--\u200b\u91cd\u70b9\u200b\u5728\u4e8e\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u95ee\u9898","text":"<p>\u200b\u7b80\u4ecb\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/N%20Queen%20Question/#n","title":"N\u200b\u7687\u540e\u200b\u95ee\u9898\u200b\u7684\u200b\u603b\u7ed3","text":"<p>\u200b\u603b\u7ed3\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Prefix_Sum/","title":"\u6784\u5efa\u200b\u524d\u7f00\u200b\u4fe1\u606f\u200b\u7684\u200b\u6280\u5de7\u200b-\u200b\u89e3\u51b3\u200b\u5b50\u200b\u6570\u7ec4\u200b\u76f8\u5173\u200b\u95ee\u9898","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u524d\u7f00\u200b\u548c\u200b\uff08Prefix Sum\uff09 \u200b\u662f\u200b\u4e00\u79cd\u200b\u7b80\u5355\u200b\u5374\u200b\u5f3a\u5927\u200b\u7684\u200b\u9884\u5904\u7406\u200b\u6280\u672f\u200b\uff0c\u200b\u5b83\u200b\u901a\u8fc7\u200b\u5c06\u200b\u539f\u59cb\u6570\u636e\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u7d2f\u52a0\u200b\u548c\u200b\u6570\u7ec4\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u4efb\u610f\u200b\u533a\u95f4\u200b\u548c\u200b\u7684\u200b\u67e5\u8be2\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4ece\u200b O(n) \u200b\u4f18\u5316\u200b\u81f3\u200b O(1)\u3002\u200b\u8fd9\u79cd\u200b\u201c\u200b\u7a7a\u95f4\u200b\u6362\u200b\u65f6\u95f4\u200b\u201d\u200b\u7684\u200b\u601d\u60f3\u200b\uff0c\u200b\u5728\u200b\u9700\u8981\u200b\u9891\u7e41\u200b\u67e5\u8be2\u200b\u533a\u95f4\u200b\u7edf\u8ba1\u200b\u91cf\u200b\u7684\u200b\u573a\u666f\u200b\u4e2d\u200b\u5c55\u73b0\u51fa\u200b\u5de8\u5927\u200b\u4f18\u52bf\u200b\uff0c\u200b\u6210\u4e3a\u200b\u7b97\u6cd5\u200b\u4f18\u5316\u200b\u4e2d\u200b\u7684\u200b\u57fa\u7840\u200b\u5de5\u5177\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\u4e60\u9898\u200b</p> <p>leetcode303.\u200b\u533a\u57df\u200b\u548c\u200b\u68c0\u7d22\u200b-\u200b\u6570\u7ec4\u200b\u4e0d\u53ef\u200b\u53d8\u200b</p> <p>\u200b\u725b\u5ba2\u200b.\u200b\u672a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u503c\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u957f\u5ea6\u200b</p> <p>leetcode560.\u200b\u548c\u200b\u4e3a\u200bk\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b</p> <p>\u200b\u725b\u5ba2\u200b.\u200b\u672a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u503c\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u7cfb\u5217\u200b\u95ee\u9898\u200b\u8865\u200b1</p> <p>leetcode1124.\u200b\u8868\u73b0\u200b\u826f\u597d\u200b\u7684\u200b\u6700\u957f\u200b\u65f6\u95f4\u6bb5\u200b</p> <p>leetcode1590.\u200b\u4f7f\u200b\u6570\u7ec4\u200b\u548c\u200b\u80fd\u200b\u88ab\u200bP\u200b\u6574\u9664\u200b</p> <p>leetcode1371.\u200b\u6bcf\u4e2a\u200b\u5143\u97f3\u200b\u5305\u542b\u200b\u5076\u6570\u200b\u6b21\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u5b57\u7b26\u4e32\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Prefix_Sum/#-_1","title":"\u533a\u57df\u200b\u548c\u200b\u68c0\u7d22\u200b-\u200b\u6570\u7ec4\u200b\u4e0d\u53ef\u200b\u53d8","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Prefix_Sum/#_1","title":"\u672a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u503c\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u957f\u5ea6","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Prefix_Sum/#k","title":"\u548c\u200b\u4e3a\u200bk\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Prefix_Sum/#1","title":"\u672a\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7d2f\u52a0\u200b\u548c\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u503c\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u6570\u7ec4\u200b\u957f\u5ea6\u200b\u8865\u200b1","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Prefix_Sum/#_2","title":"\u8868\u73b0\u200b\u826f\u597d\u200b\u7684\u200b\u6700\u957f\u200b\u65f6\u95f4\u6bb5","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Prefix_Sum/#p","title":"\u4f7f\u200b\u6570\u7ec4\u200b\u548c\u200b\u80fd\u200b\u88ab\u200bP\u200b\u6574\u9664","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Prefix_Sum/#_3","title":"\u6bcf\u4e2a\u200b\u5143\u97f3\u200b\u5305\u542b\u200b\u5076\u6570\u200b\u6b21\u200b\u7684\u200b\u6700\u200b\u957f\u5b50\u200b\u5b57\u7b26\u4e32\u200b (\u200b\u72b6\u6001\u200b\u538b\u7f29\u200b+\u200b\u524d\u7f00\u200b\u548c\u200b)","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Recursion/","title":"\u5e38\u89c1\u200b\u9012\u5f52\u200b\u95ee\u9898","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u9012\u5f52\u200b\uff08Recursion\uff09\u200b\u662f\u200b\u8ba1\u7b97\u673a\u79d1\u5b66\u200b\u4e2d\u200b\u6700\u200b\u4f18\u96c5\u200b\u800c\u200b\u5f3a\u5927\u200b\u7684\u200b\u8303\u5f0f\u200b\u4e4b\u4e00\u200b\uff0c\u200b\u5b83\u200b\u901a\u8fc7\u200b\u81ea\u6211\u200b\u8c03\u7528\u200b\u7684\u200b\u9b54\u6cd5\u200b\uff0c\u200b\u5c06\u200b\u590d\u6742\u200b\u95ee\u9898\u200b\u5206\u89e3\u200b\u4e3a\u200b\u76f8\u4f3c\u200b\u7684\u200b\u5b50\u200b\u95ee\u9898\u200b\uff0c\u200b\u6700\u7ec8\u200b\u50cf\u200b\u4fc4\u7f57\u65af\u200b\u5957\u5a03\u200b\u4e00\u822c\u200b\u5c42\u5c42\u200b\u89e3\u5f00\u200b\u8c1c\u9898\u200b\u3002\u200b\u8fd9\u79cd\u200b\"\u200b\u4ee5\u5f7c\u4e4b\u77db\u200b\uff0c\u200b\u653b\u5f7c\u4e4b\u76fe\u200b\"\u200b\u7684\u200b\u601d\u60f3\u200b\uff0c\u200b\u65e2\u200b\u662f\u200b\u6570\u5b66\u200b\u5f52\u7eb3\u6cd5\u200b\u7684\u200b\u7a0b\u5e8f\u5b9e\u73b0\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u4eba\u7c7b\u200b\u5206\u800c\u6cbb\u4e4b\u200b\u667a\u6167\u200b\u7684\u200b\u4ee3\u7801\u200b\u5316\u8eab\u200b\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/","title":"\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u4e0e\u200b\u76f8\u5173\u200b\u4e60\u9898","text":"<p>\u200b\u4e3b\u8981\u200b\u5185\u5bb9\u200b</p> <p>\u200b\u901a\u8fc7\u200b\u7ef4\u62a4\u200b\u4e00\u4e2a\u200b\u52a8\u6001\u200b\u7a97\u53e3\u200b\uff08\u200b\u901a\u5e38\u200b\u4e3a\u200b\u6570\u7ec4\u200b/\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u5b50\u200b\u533a\u95f4\u200b\uff09\u200b\u6765\u200b\u9ad8\u6548\u200b\u89e3\u51b3\u200b\u8fde\u7eed\u200b\u533a\u95f4\u200b\u95ee\u9898\u200b\u3002\u200b\u6838\u5fc3\u601d\u60f3\u200b\u662f\u200b\u53cc\u200b\u6307\u9488\u200b\u904d\u5386\u200b\uff0c\u200b\u6839\u636e\u200b\u6761\u4ef6\u200b\u8c03\u6574\u200b\u7a97\u53e3\u200b\u5de6\u53f3\u200b\u8fb9\u754c\u200b\uff0c\u200b\u907f\u514d\u200b\u91cd\u590d\u200b\u8ba1\u7b97\u200b\u3002\u200b\u9002\u7528\u200b\u4e8e\u5b50\u200b\u6570\u7ec4\u200b/\u200b\u5b50\u4e32\u200b\u7684\u200b\u6700\u503c\u200b\u3001\u200b\u5b9a\u200b\u548c\u200b\u3001\u200b\u8986\u76d6\u200b\u7b49\u200b\u95ee\u9898\u200b\uff08\u200b\u5982\u200b\u6700\u957f\u200b\u65e0\u200b\u91cd\u590d\u200b\u5b50\u4e32\u200b\u3001\u200b\u6700\u5c0f\u200b\u8986\u76d6\u200b\u5b50\u4e32\u200b\uff09\u3002\u200b\u5173\u952e\u70b9\u200b\u5305\u62ec\u200b\u7a97\u53e3\u200b\u6536\u7f29\u200b/\u200b\u6269\u5c55\u200b\u7684\u200b\u89e6\u53d1\u200b\u6761\u4ef6\u200b\u3001\u200b\u54c8\u5e0c\u200b\u8868\u200b\u8f85\u52a9\u200b\u7edf\u8ba1\u200b\u7b49\u200b\uff0c\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u901a\u5e38\u200b\u4e3a\u200bO(n)\u3002</p> <p>\u200b\u793a\u610f\u56fe\u200b\uff1a     </p> \u200b\u76f8\u5173\u200b\u4e60\u9898\u200b <p>leetcode209.\u200b\u957f\u5ea6\u200b\u6700\u5c0f\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b</p> <p>leetcode3.\u200b\u65e0\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u6700\u957f\u200b\u5b50\u4e32\u200b</p> <p>leetcode76.\u200b\u6700\u5c0f\u200b\u8986\u76d6\u200b\u5b50\u4e32\u200b</p> <p>leetcode134.\u200b\u52a0\u6cb9\u7ad9\u200b</p> <p>leetcode1234.\u200b\u66ff\u6362\u200b\u5b50\u4e32\u200b\u5f97\u5230\u200b\u5e73\u8861\u200b\u5b57\u7b26\u4e32\u200b</p> <p>leetcode992.K\u200b\u4e2a\u200b\u4e0d\u540c\u200b\u6574\u6570\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b</p> <p>leetcode395.\u200b\u81f3\u5c11\u200b\u6709\u200bK\u200b\u4e2a\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u6700\u957f\u200b\u5b50\u4e32\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/#question-1","title":"Question 1 : \u200b\u957f\u5ea6\u200b\u6700\u5c0f\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u542b\u6709\u200b n \u200b\u4e2a\u200b\u6b63\u6574\u6570\u200b\u7684\u200b\u6570\u7ec4\u200b\u548c\u200b\u4e00\u4e2a\u200b\u6b63\u6574\u6570\u200b target \u3002</p> <p>\u200b\u627e\u51fa\u200b\u8be5\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u6ee1\u8db3\u200b\u5176\u200b\u603b\u548c\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b target \u200b\u7684\u200b\u957f\u5ea6\u200b\u6700\u5c0f\u200b\u7684\u200b \u200b\u5b50\u200b\u6570\u7ec4\u200b [numsl, numsl+1, ..., numsr-1, numsr] \uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5176\u200b\u957f\u5ea6\u200b\u3002\u200b\u5982\u679c\u200b\u4e0d\u200b\u5b58\u5728\u200b\u7b26\u5408\u6761\u4ef6\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b\uff0c\u200b\u8fd4\u56de\u200b 0 \u3002</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u6bd4\u8f83\u7b80\u5355\u200b\u4e86\u200b\uff0c\u200b\u7531\u4e8e\u200b\u90fd\u200b\u662f\u200b\u6b63\u6570\u200b\u5177\u6709\u200b\u8303\u56f4\u200b\u589e\u5927\u200b\u548c\u200b\u5fc5\u7136\u200b\u589e\u5927\u200b\uff0c\u200b\u8303\u56f4\u200b\u51cf\u5c11\u200b\u548c\u200b\u5fc5\u7136\u200b\u51cf\u5c11\u200b\u7684\u200b\u5355\u8c03\u200b\u6027\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8003\u8651\u200b\u7528\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5b9e\u73b0\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200bO(N)\u200b\u524d\u7f00\u200b\u548c\u200b\u4e0e\u200b\u4e8c\u5206\u200bO(NlogN) C++<pre><code>// \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\nclass Solution {\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int i = 0, j = 0, sum = 0, ans = 0x0fffff;\n        for (; i &lt; nums.size(); i++) {\n            sum += nums[i];\n            while (sum &gt;= target) {\n                ans = min(ans, i - j + 1);  // \u200b\u8bb0\u5f55\u200b\u5f53\u524d\u200b\u7a97\u53e3\u200b\u5927\u5c0f\u200b\n                sum -= nums[j++];           \n            }\n        }\n        return ans == 0x0fffff ? 0 : ans;\n    }\n};\n</code></pre> C++<pre><code>class Solution {\npublic:\n    // \u200b\u5bfb\u627e\u200b\u5b50\u200b\u6570\u7ec4\u200b&gt;=target\u200b\u7684\u200b\u6700\u200b\u77ed\u5b50\u200b\u6570\u7ec4\u200b\u957f\u5ea6\u200b\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; prefix_sum(nums.size() + 1, 0);\n        // O(NlogN)\n        for (int i = 0; i &lt; nums.size(); i++)\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i];\n        // \u200b\u4f7f\u7528\u200b\u4e8c\u5206\u200b\u67e5\u627e\u200b\u5bf9\u4e8e\u200b\u6bcf\u4e2a\u200bi\u200b\u67e5\u627e\u200b\u4e00\u4e2a\u200b\u6700\u5c0f\u200b\u7684\u200bj O(N log N)\n        int min_len = 0x0fffff;\n        for (int i = 0; i &lt;= nums.size(); i++) {\n            int find = prefix_sum[i] + target;\n            auto j = lower_bound(prefix_sum.begin(), prefix_sum.end(), find);\n            if (j != prefix_sum.end()) {\n                int len = j - prefix_sum.begin() - i;\n                min_len = min(len, min_len);\n            }\n        }\n\n    return min_len != 0x0fffff ? min_len : 0;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/#question-2","title":"Question 2 : \u200b\u65e0\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u6700\u957f\u200b\u5b50\u4e32","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b <code>s</code> \uff0c\u200b\u8bf7\u200b\u4f60\u200b\u627e\u51fa\u200b\u5176\u4e2d\u200b\u4e0d\u200b\u542b\u6709\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u6700\u957f\u200b\u5b50\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\u3002</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u4e5f\u200b\u6bd4\u8f83\u7b80\u5355\u200b(\u200b\u6216\u8005\u8bf4\u200b\u5e38\u89c1\u200b)\uff0c\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u54c8\u5e0c\u200b\u8868\u200b\u8bb0\u5f55\u200b\u90a3\u4e9b\u200b\u5143\u7d20\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u5305\u62ec\u200b\u4e0e\u200b\u5b50\u4e32\u200b\u4e2d\u200b\uff0c\u200b\u82e5\u200b\u65b0\u200b\u52a0\u5165\u200b\u7684\u200b\u5143\u7d20\u200b\u5728\u200b\u54c8\u5e0c\u200bset\u200b\u5185\u200b\uff0c\u200b\u5219\u200b\u901a\u8fc7\u200b\u8c03\u6574\u200b\u5de6\u200b\u6307\u9488\u200b\u5e76\u200b\u5220\u9664\u200b\u5bf9\u5e94\u200b\u7684\u200b\u54c8\u5e0c\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u76f4\u5230\u200b\u5de6\u200b\u6307\u9488\u200b\u8d70\u200b\u5230\u200b\u65e9\u5148\u200b\u51fa\u73b0\u200b\u7684\u200b\u8fd9\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u540e\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_set&lt;char&gt; set;\n        int ans = 0;\n        for (int i = 0, j = 0; i &lt; s.size(); i++) {\n            while (set.count(s[i]) != 0) {\n                set.erase(s[j++]);\n            }\n            set.insert(s[i]);\n            ans = max(ans, i - j + 1);\n        }\n        return ans;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/#question-3","title":"Question 3 : \u200b\u6700\u5c0f\u200b\u8986\u76d6\u200b\u5b50\u4e32","text":"<p>\u200b\u8fd9\u9053\u9898\u200b\u867d\u7136\u200b\u662f\u200bhard\u200b\u4f46\u200b\u76f8\u5bf9\u6765\u8bf4\u200b\u6bd4\u8f83\u7b80\u5355\u200b\u7684\u200bhard\u200b\u9898\u200b</p> <p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b s \u3001\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b t \u3002\u200b\u8fd4\u56de\u200b s \u200b\u4e2d\u200b\u6db5\u76d6\u200b t \u200b\u6240\u6709\u200b\u5b57\u7b26\u200b\u7684\u200b\u6700\u5c0f\u200b\u5b50\u4e32\u200b\u3002\u200b\u5982\u679c\u200b s \u200b\u4e2d\u200b\u4e0d\u200b\u5b58\u5728\u200b\u6db5\u76d6\u200b t \u200b\u6240\u6709\u200b\u5b57\u7b26\u200b\u7684\u200b\u5b50\u4e32\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b\u7a7a\u200b\u5b57\u7b26\u4e32\u200b \"\" \u3002</p> <ul> <li> <p>\u200b\u5bf9\u4e8e\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\uff0c\u200b\u5bfb\u627e\u200b\u7684\u200b\u5b50\u4e32\u200b\u5fc5\u987b\u200b\u5305\u542b\u200b\u4e0d\u5c11\u200b\u4e8e\u200b<code>t</code>\u200b\u4e2d\u200b\u5b57\u7b26\u200b\u7684\u200b\u6570\u91cf\u200b</p> </li> <li> <p>\u200b\u9898\u76ee\u200b\u4fdd\u8bc1\u200b\u7b54\u6848\u200b\u552f\u4e00\u200b</p> </li> </ul> <p>\u200b\u672c\u9898\u200b\u53ef\u4ee5\u200b\u770b\u4f5c\u200b\u8d1f\u503a\u200b\u4e0e\u200b\u8fd8\u503a\u200b\u6a21\u578b\u200b\uff0c\u200b\u540c\u65f6\u200b\u91c7\u7528\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u5373\u53ef\u200b\u3002</p> <p>\u200b\u8d1f\u503a\u200b\u4e0e\u200b\u8fd8\u503a\u200b\u6a21\u578b\u200b</p> <p>\u200b\u5bf9\u4e8e\u200b\u67d0\u4e9b\u200b\u7279\u6b8a\u200b\u5143\u7d20\u200b\u8bb0\u200b\u4e3a\u200b\u503a\u52a1\u200b\uff0c\u200b\u5e76\u200b\u52a0\u5165\u200b\u503a\u52a1\u200b\u8868\u200b\uff0c\u200b\u540c\u65f6\u200b\u8bb0\u5f55\u200b\u8fd9\u4e9b\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\u4e3a\u200b<code>-x</code>\u3002</p> <p>\u200b\u5f53\u200b\u904d\u5386\u200b\u5230\u200b\u975e\u200b\u9009\u5b9a\u200b\u7684\u200b\u5143\u7d20\u200b\u65f6\u5019\u200b\uff0c\u200b\u52a0\u5165\u200b\u8be5\u200b\u5143\u7d20\u200b\u8fdb\u200b\u503a\u52a1\u200b\u8868\u5e76\u200b<code>++val</code>\u200b\u4f46\u200b\u603b\u200b\u503a\u52a1\u200b\u4e0d\u53d8\u200b\uff1b\u200b\u904d\u5386\u200b\u5230\u200b\u7279\u6b8a\u200b\u5143\u7d20\u200b\u7684\u200b\u65f6\u5019\u200b\u589e\u52a0\u200b\u503a\u52a1\u200b\u8868\u200b \u200b\u4e2d\u200b\u5bf9\u5e94\u200b\u5143\u7d20\u200b\u7684\u200bval,\u200b\u540c\u65f6\u200b\u51cf\u5c11\u200b\u603b\u200b\u503a\u52a1\u200b\u3002</p> <p>\u200b\u5177\u4f53\u200b\u7684\u200b\u7b97\u6cd5\u200b\u63cf\u8ff0\u200b</p> <ul> <li>\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200b<code>256</code>\u200b\u5927\u5c0f\u200b\u7684\u200b\u5168\u96f6\u200b\u6570\u7ec4\u200b\uff0c\u200b\u7528\u4e8e\u200b\u503a\u52a1\u200b\u8868\u200b</li> <li>\u200b\u8bfb\u5165\u200b<code>t</code>\u200b\u7684\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\uff0c\u200b\u5e76\u200b\u8bb0\u5165\u200b\u5bf9\u5e94\u200b\u5143\u7d20\u200b\u8fdb\u5165\u200b\u503a\u52a1\u200b\u8868\u200b, \u200b\u603b\u200b\u503a\u52a1\u200b = <code>t.size()</code></li> <li>\u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u7684\u200b<code>left</code>\u200b\u548c\u200b<code>right</code>\u200b\u5f00\u59cb\u200b\u904d\u5386\u200b<code>s</code></li> <li>\u200b\u5982\u679c\u200bs[r]\u200b\u7684\u200b\u5143\u7d20\u200b\u662f\u200b\u8d1f\u503a\u8868\u200b\u4e2d\u200b\u7684\u200b\u503c\u200b\u4e3a\u200b\u8d1f\u6570\u200b\u7684\u200b\u5143\u7d20\u200b(\u200b\u8d1f\u503a\u200b\u5143\u7d20\u200b)\u200b\u5219\u200b\u51cf\u5c11\u200b\u603b\u200b\u503a\u52a1\u200b\uff0c\u200b\u540c\u65f6\u200b\u5c06\u503c\u200b+1</li> <li>\u200b\u5982\u679c\u200b\u4e0d\u662f\u200b\uff0c\u200b\u5219\u200b\u53ea\u200b\u9700\u8981\u200b\u5c06\u200b\u503a\u52a1\u200b\u8868\u4e2d\u200b\u7684\u200b\u503c\u200b+1\u200b\u5373\u53ef\u200b</li> <li>\u200b\u5f53\u200b\u603b\u200b\u503a\u52a1\u200b\u4e3a\u200b0\u200b\u7684\u200b\u65f6\u5019\u200b(<code>debt == 0</code>) \u200b\u79fb\u52a8\u200b\u5de6\u200b\u8fb9\u754c\u200b<ul> <li>\u200b\u76f4\u5230\u200b\u79fb\u52a8\u200b\u5de6\u200b\u8fb9\u754c\u200b\u4f1a\u200b\u4f7f\u5f97\u200b\u503a\u52a1\u200b\u8868\u4e2d\u200b\u7684\u200b<code>val&lt;0</code>\u200b\u4e3a\u6b62\u200b </li> <li>\u200b\u8bb0\u5f55\u200b\u4e00\u6b21\u200b\u5b50\u4e32\u200b\u957f\u5ea6\u200b\u4e0e\u200b\u8d77\u59cb\u200b\u4f4d\u7f6e\u200b</li> </ul> </li> <li>\u200b\u6700\u7ec8\u200b\u53ea\u200b\u9700\u200b\u901a\u8fc7\u200b<code>substr</code>\u200b\u8fd4\u56de\u200b\u6700\u77ed\u200b\u7684\u200b<code>len</code>\u200b\u548c\u200b<code>start</code>\u200b\u786e\u5b9a\u200b\u7684\u200b\u5b50\u4e32\u200b\u5373\u53ef\u200b</li> </ul> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    string minWindow(string s, string t) {\n        // \u200b\u8d1f\u503a\u200b\u4e0e\u200b\u8fd8\u503a\u200b\u6a21\u578b\u200b\n        // \u200b\u503a\u52a1\u200b\u8868\u200b\n        vector&lt;int&gt; cnts(256, 0);\n        for (auto c : t) cnts[c]--;\n\n        int len = INT_MAX;\n        int start = 0;\n        int debt = t.size(); // \u200b\u603b\u200b\u503a\u52a1\u200b\n        for (int l = 0, r = 0; r &lt; s.size(); r++) {\n            if (cnts[s[r]]++ &lt; 0) debt--;\n            if (debt == 0) {\n                while(cnts[s[l]] &gt; 0) cnts[s[l++]]--;\n                if (r - l + 1 &lt; len) {\n                    len = r- l + 1;\n                    start = l;\n                }\n            }\n        }\n        return len == INT_MAX ? \"\" : s.substr(start, len);\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/#question-4","title":"Question 4 : \u200b\u52a0\u6cb9\u7ad9","text":"<p>\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u5728\u200b\u4e00\u6761\u200b\u73af\u8def\u200b\u4e0a\u200b\u6709\u200b n \u200b\u4e2a\u200b\u52a0\u6cb9\u7ad9\u200b\uff0c\u200b\u5176\u4e2d\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u52a0\u6cb9\u7ad9\u200b\u6709\u200b\u6c7d\u6cb9\u200b gas[i] \u200b\u5347\u200b\u3002</p> <p>\u200b\u4f60\u200b\u6709\u200b\u4e00\u8f86\u200b\u6cb9\u7bb1\u200b\u5bb9\u91cf\u200b\u65e0\u9650\u200b\u7684\u200b\u7684\u200b\u6c7d\u8f66\u200b\uff0c\u200b\u4ece\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u52a0\u6cb9\u7ad9\u200b\u5f00\u5f80\u200b\u7b2c\u200b i+1 \u200b\u4e2a\u200b\u52a0\u6cb9\u7ad9\u200b\u9700\u8981\u200b\u6d88\u8017\u200b\u6c7d\u6cb9\u200b cost[i] \u200b\u5347\u200b\u3002\u200b\u4f60\u200b\u4ece\u200b\u5176\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u52a0\u6cb9\u7ad9\u200b\u51fa\u53d1\u200b\uff0c\u200b\u5f00\u59cb\u200b\u65f6\u200b\u6cb9\u7bb1\u200b\u4e3a\u7a7a\u200b\u3002</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e24\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200bgas\u200b\u548c\u200bcost\u200b\u5982\u679c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6309\u200b\u987a\u5e8f\u200b\u7ed5\u200b\u73af\u8def\u200b\u884c\u9a76\u200b\u4e00\u5468\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b\u51fa\u53d1\u200b\u65f6\u200b\u52a0\u6cb9\u7ad9\u200b\u7684\u200b\u7f16\u53f7\u200b\uff0c\u200b\u5426\u5219\u200b\u8fd4\u56de\u200b -1 \u3002\u200b\u5982\u679c\u200b\u5b58\u5728\u200b\u89e3\u200b\uff0c\u200b\u5219\u200b\u4fdd\u8bc1\u200b\u5b83\u200b\u662f\u200b\u552f\u4e00\u200b\u7684\u200b\u3002</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u7684\u200b\u601d\u8def\u200b\u53ef\u4ee5\u200b\u4e00\u6b65\u200b\u4e00\u6b65\u200b\u4f18\u5316\u200b\uff0c\u200b\u8fdb\u800c\u200b\u5f97\u5230\u200b\u6700\u7ec8\u200b\u6700\u4f18\u200b\u7684\u200b\u89e3\u6cd5\u200b\u3002</p> <ul> <li>\u200b\u9996\u5148\u200b\u80af\u5b9a\u200b\u662f\u200b\u8981\u200b\u7b97\u200b<code>gas[i] - cost[i]</code><ul> <li>\u200b\u5982\u679c\u200b\u4e0d\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u4f18\u5316\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u679a\u4e3e\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u5728\u200b\u904d\u5386\u200b<code>x -- x</code>\u200b\u7684\u200b\u5168\u7a0b\u200b\u548c\u200b\uff0c\u200b\u5219\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u662f\u200b\\(O(n^2)\\)</li> </ul> </li> <li>\u200b\u8003\u8651\u200b\u7b2c\u4e00\u4e2a\u200b\u4f18\u5316\u200b\uff0c\u200b\u7531\u4e8e\u200b\u662f\u200b\u73af\u5f62\u200b\u6570\u7ec4\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u8981\u200b\u4ece\u200b<code>x, x + 1, ... n, 0, 1, ..., x - 1</code> \u200b\u8fd9\u91cc\u200b\u8981\u200b\u8fdb\u884c\u200b\u4e00\u6b21\u200b\u6761\u4ef6\u200b\u5224\u65ad\u200b\uff0c\u200b\u8fd9\u6837\u200b\u7684\u200b\u82b1\u200b\u7f16\u7801\u200b\u4e0d\u200b\u597d\u770b\u200b\u3002\u200b\u8003\u8651\u200b<code>\u200b\u62f7\u8d1d\u200b</code>\u200b\u4e00\u4efd\u200b\u539f\u200b\u6570\u7ec4\u200b\u63a5\u5230\u200b\u540e\u9762\u200b\uff0c\u200b\u8ba9\u200b\u5176\u200b\u53d8\u6210\u200b<code>0, 1.. n, n + 1, n + 2, .... 2n</code> \u200b\u6b64\u65f6\u200b\u53ea\u200b\u9700\u8981\u200b\u6b63\u5e38\u200b\u904d\u5386\u200b\u5373\u53ef\u200b\u3002<ul> <li>\u200b\u5f53\u7136\u200b\u4e5f\u200b\u4e0d\u200b\u9700\u8981\u200b\u771f\u7684\u200b<code>\u200b\u62f7\u8d1d\u200b</code>\u200b\u4e00\u4efd\u200b\u6570\u7ec4\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u8fdb\u884c\u200b<code>x % gas.size()</code>\u200b\u5373\u53ef\u200b</li> </ul> </li> <li>\u200b\u8003\u8651\u200b\u7b2c\u4e8c\u4e2a\u200b\u4f18\u5316\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u4ece\u4e0b\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u5f00\u59cb\u200b\u679a\u4e3e\u200b\u5417\u200b\uff1f\u200b\u5176\u5b9e\u4e0d\u7136\u200b\uff0c\u200b\u5047\u8bbe\u200b\u4ece\u200b<code>a</code>\u200b\u70b9\u200b\u5f00\u59cb\u200b\u904d\u5386\u200b\uff0c\u200b\u904d\u5386\u200b\u5230\u200b<code>b</code>\u200b\u70b9\u200b\u53d1\u73b0\u200b\u7d2f\u52a0\u200b\u548c\u200b<code>&lt;= 0</code> \u200b\u5219\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u4ece\u200b<code>b</code>\u200b\u5f00\u59cb\u200b\u904d\u5386\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u4ece\u200b<code>a + 1</code><ul> <li>\u200b\u7531\u4e8e\u200b\\(\\sum_{i = a}^{i = b} &lt;= 0\\) \u200b\u5219\u200b \\(\\sum_{i = a+i}^{i = b}, i \\in [a+1, b]\\)\u200b\u4e5f\u200b\u5fc5\u7136\u200b\u4e0d\u200b\u6ee1\u8db3\u6761\u4ef6\u200b</li> <li>\u200b\u8003\u8651\u200b\u5230\u200b\\(a&gt;0\\)\u200b\u624d\u200b\u4f1a\u200b\u4ece\u200b<code>a</code>\u200b\u5f00\u59cb\u200b\u904d\u5386\u200b\uff0c\u200b\u800c\u200b\\(\\sum_{i = a}^{i = b} &lt;= 0\\),\u200b\u5219\u200b\\(\\sum_{i = a + 1}^{i = b} = \\sum_{i = a}^{i = b} - a &lt;= 0\\) ,\u200b\u5176\u4f59\u200b\u5143\u7d20\u200b\u540c\u7406\u200b</li> </ul> </li> </ul> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) {\n        int n = gas.size();\n        for (int l = 0, r = 0, sum = 0; l &lt; gas.size(); l = r + 1, r = l)  {\n            sum = 0;\n            while (sum + gas[r % n] - cost[r % n] &gt;= 0) {\n                if (r - l + 1 == n) return l;\n                sum += gas[r % n] - cost[r % n];\n                r++;\n            }\n        }\n        return -1;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/#question-5","title":"Question 5 : \u200b\u66ff\u6362\u200b\u5b50\u4e32\u200b\u5f97\u5230\u200b\u5e73\u8861\u200b\u5b57\u7b26\u4e32","text":"<p>\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u6709\u200b\u4e00\u4e2a\u200b\u53ea\u200b\u542b\u6709\u200b 'Q', 'W', 'E', 'R' \u200b\u56db\u79cd\u200b\u5b57\u7b26\u200b\uff0c\u200b\u4e14\u200b\u957f\u5ea6\u200b\u4e3a\u200b n \u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u3002</p> <p>\u200b\u5047\u5982\u200b\u5728\u200b\u8be5\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u56db\u4e2a\u200b\u5b57\u7b26\u200b\u90fd\u200b\u6070\u597d\u200b\u51fa\u73b0\u200b n/4 \u200b\u6b21\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5b83\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u300c\u200b\u5e73\u8861\u200b\u5b57\u7b26\u4e32\u200b\u300d\u3002</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u8fd9\u6837\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b s\uff0c\u200b\u8bf7\u200b\u901a\u8fc7\u200b\u300c\u200b\u66ff\u6362\u200b\u4e00\u4e2a\u200b\u5b50\u4e32\u200b\u300d\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f7f\u539f\u200b\u5b57\u7b26\u4e32\u200b s \u200b\u53d8\u6210\u200b\u4e00\u4e2a\u200b\u300c\u200b\u5e73\u8861\u200b\u5b57\u7b26\u4e32\u200b\u300d\u3002</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u7528\u200b\u548c\u200b\u300c\u200b\u5f85\u200b\u66ff\u6362\u200b\u5b50\u4e32\u200b\u300d\u200b\u957f\u5ea6\u200b\u76f8\u540c\u200b\u7684\u200b \u200b\u4efb\u4f55\u200b \u200b\u5176\u4ed6\u200b\u5b57\u7b26\u4e32\u200b\u6765\u200b\u5b8c\u6210\u200b\u66ff\u6362\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u8fd4\u56de\u200b\u5f85\u200b\u66ff\u6362\u200b\u5b50\u4e32\u200b\u7684\u200b\u6700\u5c0f\u200b\u53ef\u80fd\u200b\u957f\u5ea6\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u539f\u200b\u5b57\u7b26\u4e32\u200b\u81ea\u8eab\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200b\u5e73\u8861\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b 0\u3002</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5982\u4e0b\u200b\u8f6c\u6362\u200b\uff0c\u200b\u8f6c\u6362\u200b\u4e3a\u200bQ3</p> <ul> <li>\u200b\u7edf\u8ba1\u200b\u539f\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b<code>Q``W``E``R</code>\u200b\u51fa\u73b0\u200b\u7684\u200b\u6b21\u6570\u200b</li> <li>\u200b\u5047\u8bbe\u200b<code>Q</code>\u200b\u51fa\u73b0\u200b<code>q</code>\u200b\u6b64\u200b\uff0c<code>W</code>\u200b\u51fa\u73b0\u200b<code>w</code>\u200b\u6b21\u200b\uff0c\u200b\u5176\u4ed6\u200b\u7c7b\u4f3c\u200b<ul> <li>\u200b\u53ea\u200b\u9700\u8981\u200b\u627e\u51fa\u200b<code>qwer</code>\u200b\u4e2d\u200b\u6b21\u6570\u200b\u5927\u4e8e\u200b<code>s.size()/4</code>\u200b\u7684\u200b\u5143\u7d20\u200b\u5373\u53ef\u200b</li> <li>\u200b\u6b64\u65f6\u200b\u53ea\u200b\u9700\u8981\u200b\u627e\u51fa\u200b\u6700\u5c0f\u200b\u7684\u200b\u80fd\u591f\u200b\u8986\u76d6\u200b\u591a\u4f59\u200b\u5143\u7d20\u200b\u7ec4\u6210\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u539f\u200b\u5b57\u7b26\u200b\u5b50\u4e32\u200b\u5373\u53ef\u200b</li> </ul> </li> </ul> <p>\u200b\u4f8b\u5982\u200b\u5bf9\u4e8e\u200b<code>40</code>\u200b\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u82e5\u200b<code>Q\u200b\u51fa\u73b0\u200b4\u200b\u6b21\u200b</code>\u3001<code>W\u200b\u51fa\u73b0\u200b12\u200b\u6b21\u200b</code>\u3001<code>E\u200b\u51fa\u73b0\u200b14\u200b\u6b64\u200b</code>\u3001<code>R\u200b\u51fa\u73b0\u200b10\u200b\u6b21\u200b</code>\uff0c\u200b\u95ee\u9898\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5bfb\u627e\u200b\u80fd\u200b\u8986\u76d6\u200b<code>WWEEEE</code>\u200b\u7684\u200b\u6700\u5c0f\u200b\u5b50\u4e32\u200b\u95ee\u9898\u200b,\u200b\u53ea\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u591a\u200b\u51fa\u6765\u200b\u7684\u200b\u5143\u7d20\u200b\u5373\u53ef\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4e0d\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5177\u4f53\u200b\u54ea\u4e2a\u200b\u5143\u7d20\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>class Solution {\npublic:\n    int balancedString(string s) {\n        vector&lt;int&gt; cnts(4, 0);\n        vector&lt;int&gt; str(s.size(), 0);\n        // \u200b\u7edf\u8ba1\u200b`QWER`\u200b\u5404\u81ea\u200b\u7684\u200b\u8bcd\u9891\u200b\n        for (int i = 0; i &lt; s.size(); i++) {\n            str[i] = s[i] == 'W' ? 1 : (s[i] == 'E' ? 2 : (s[i] == 'R' ? 3 : 0));\n            cnts[str[i]]++;\n        }\n\n        // \u200b\u5c06\u200b\u591a\u51fa\u200b\u7684\u200b`QWER`\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u503a\u52a1\u200b\n        int debt = 0;\n        for (int i = 0; i &lt; 4; i++) {\n            if (cnts[i] &lt; s.size() /4 ) cnts[i] = 0;\n            else {\n                cnts[i] = s.size() / 4 - cnts[i];\n                debt -= cnts[i];\n            }\n        }\n        if (debt == 0) return 0;\n        // Q3\u200b\u7684\u200b\u4ee3\u7801\u200b\n        int ans = INT_MAX;\n        for (int l = 0, r = 0; r &lt; s.size(); r++) {\n            if (cnts[str[r]]++ &lt; 0) debt--;\n            if (debt == 0) {\n                while(cnts[str[l]] &gt; 0) cnts[str[l++]]--;\n                ans = min(ans, r - l + 1);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/#question-6-k","title":"Question 6 : K\u200b\u4e2a\u200b\u4e0d\u540c\u200b\u6574\u6570\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4","text":"<p>\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6b63\u6574\u6570\u200b\u6570\u7ec4\u200b nums\u200b\u548c\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b k\uff0c\u200b\u8fd4\u56de\u200b nums \u200b\u4e2d\u200b \u300c\u200b\u597d\u5b50\u200b\u6570\u7ec4\u200b\u300d \u200b\u7684\u200b\u6570\u76ee\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b nums \u200b\u7684\u200b\u67d0\u4e2a\u200b\u5b50\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u4e0d\u540c\u200b\u6574\u6570\u200b\u7684\u200b\u4e2a\u6570\u200b\u6070\u597d\u200b\u4e3a\u200b k\uff0c\u200b\u5219\u200b\u79f0\u200b nums \u200b\u7684\u200b\u8fd9\u4e2a\u200b\u8fde\u7eed\u200b\u3001\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u4e0d\u540c\u200b\u7684\u200b\u5b50\u200b\u6570\u7ec4\u200b\u4e3a\u200b \u300c\u200b\u597d\u5b50\u200b\u6570\u7ec4\u200b \u300d\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c[1,2,3,1,2] \u200b\u4e2d\u6709\u200b 3 \u200b\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200b\u6574\u6570\u200b\uff1a1\uff0c2\uff0c\u200b\u4ee5\u53ca\u200b 3\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/#question-7-k","title":"Question 7 : \u200b\u81f3\u5c11\u200b\u6709\u200bk\u200b\u4e2a\u200b\u91cd\u590d\u200b\u5b57\u7b26\u200b\u7684\u200b\u6700\u957f\u200b\u5b50\u4e32","text":"<p>\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b s \u200b\u548c\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b k \uff0c\u200b\u8bf7\u200b\u4f60\u200b\u627e\u51fa\u200b s \u200b\u4e2d\u200b\u7684\u200b\u6700\u957f\u200b\u5b50\u4e32\u200b\uff0c \u200b\u8981\u6c42\u200b\u8be5\u200b\u5b50\u4e32\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u200b\u4e00\u200b\u5b57\u7b26\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\u90fd\u200b\u4e0d\u5c11\u200b\u4e8e\u200b k \u3002\u200b\u8fd4\u56de\u200b\u8fd9\u4e00\u200b\u5b50\u4e32\u200b\u7684\u200b\u957f\u5ea6\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4e0d\u200b\u5b58\u5728\u200b\u8fd9\u6837\u200b\u7684\u200b\u5b50\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b 0\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Sliding%20Window/#_2","title":"\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u95ee\u9898\u200b\u7684\u200b\u603b\u7ed3","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Trie%20Tree/","title":"\u524d\u7f00\u200b\u6811\u200b\uff08\u200b\u5b57\u5178\u200b\u6811\u200b\uff09","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u5b57\u5178\u200b\u6811\u200b\uff08Trie\uff09 \u200b\u662f\u200b\u4e00\u79cd\u200b\u4e13\u200b\u4e3a\u200b\u5b57\u7b26\u4e32\u200b\u5904\u7406\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u9ad8\u6548\u200b\u6811\u5f62\u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c\u200b\u5b83\u200b\u50cf\u200b\u4e00\u672c\u200b\u667a\u80fd\u200b\u5b57\u5178\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5171\u4eab\u200b\u524d\u7f00\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b58\u50a8\u200b\u548c\u200b\u68c0\u7d22\u200b\u8bcd\u6c47\u200b\uff0c\u200b\u5c06\u200b\u5b57\u7b26\u4e32\u200b\u64cd\u4f5c\u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4f18\u5316\u200b\u81f3\u200b O(L)\uff08L\u200b\u4e3a\u200b\u5b57\u7b26\u4e32\u200b\u957f\u5ea6\u200b\uff09\u3002</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Trie%20Tree/#_2","title":"\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Trie%20Tree/#-","title":"\u4e0d\u200b\u63a8\u8350\u200b-\u200b\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u7c7b\u200b\u5b9e\u73b0","text":"<p>\u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b</p> C++<pre><code>struct TrieNode {\n    int pass;\n    int end;\n    std::array&lt;TrieNode*, 26&gt; next = {};\n    TrieNode() : pass(0), end(0) {\n        for (int i = 0; i &lt; 26; ++i) {\n            next[i] = nullptr;\n        }\n    }\n    ~TrieNode() {\n        for (int i = 0; i &lt; 26; ++i) {\n            if (next[i] != nullptr) {\n                delete next[i];\n            }\n        }\n    }\n};\nTrieNode *root;\n</code></pre> <p><code>Trie</code>\u200b\u7684\u200b\u8282\u70b9\u200b\u5982\u200b\u4e0a\u200b\u6240\u793a\u200b</p> <ul> <li><code>pass</code>\u200b\u8868\u660e\u200b\u6709\u200b\u591a\u5c11\u200b\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u7ecf\u8fc7\u200b\u4e86\u200b\u8be5\u200b\u8282\u70b9\u200b</li> <li><code>end</code>\u200b\u8868\u660e\u200b\u6709\u200b\u591a\u5c11\u200b\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u4ee5\u8be5\u200b\u8282\u70b9\u200b\u7ed3\u5c3e\u200b</li> <li><code>next[]</code>\u200b\u4f7f\u7528\u200b\u6307\u9488\u200b\u6570\u7ec4\u200b\u5b58\u50a8\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u7684\u200b26\u200b\u6761\u200b\u8def\u5f84\u200b</li> <li><code>a</code>-&gt;0,<code>b</code>-&gt;1 .... z-&gt;<code>25</code> </li> <li>\u200b\u6ce8\u610f\u200b\u8fd9\u91cc\u200b\u786c\u200b\u7f16\u7801\u200b\u4e86\u200b\u6570\u7ec4\u200b\u5927\u5c0f\u200b</li> </ul> <p>\u200b\u57fa\u672c\u64cd\u4f5c\u200b</p> <ul> <li> <p>\u200b\u521d\u59cb\u5316\u200b<code>Trie</code>\u200b\u7c7b\u200b   C++<pre><code>    Trie() {\n        root = new TrieNode();\n    }\n</code></pre></p> </li> <li> <p>\u200b\u63d2\u5165\u200b\u64cd\u4f5c\u200b(insert)   C++<pre><code>// \u200b\u63d2\u5165\u200b\u64cd\u4f5c\u200b\nvoid insert(string word) {\n    TrieNode *node = root;\n    node-&gt;pass++; // \u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200b pass \u200b\u589e\u52a0\u200b\n    for (int i = 0; i &lt; word.size(); i++) {\n        int path = word[i] - 'a'; // \u200b\u8ba1\u7b97\u200b\u5b57\u7b26\u200b\u5bf9\u5e94\u200b\u7684\u200b\u8def\u5f84\u200b\uff080~25\uff09\n        if (node-&gt;next[path] == nullptr) {\n            node-&gt;next[path] = new TrieNode(); // \u200b\u5982\u679c\u200b\u5b50\u200b\u8282\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u521b\u5efa\u200b\u65b0\u200b\u8282\u70b9\u200b\n        }\n        node = node-&gt;next[path]; // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n        node-&gt;pass++; // \u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u7684\u200b pass \u200b\u589e\u52a0\u200b\n    }\n    node-&gt;end++; // \u200b\u5355\u8bcd\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u7684\u200b end \u200b\u589e\u52a0\u200b\n}\n</code></pre></p> </li> <li> <p>\u200b\u67e5\u8be2\u200b\u64cd\u4f5c\u200b   C++<pre><code>int search(string word) {\n    TrieNode *node = root;\n    for (int i = 0; i &lt; word.size(); i++) {\n        int path = word[i] - 'a';\n        if(node-&gt;next[path] == nullptr) return 0; // \u200b\u672a\u200b\u904d\u5386\u200b\u5b8c\u200bword\u200b\u4e14\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u672a\u200b\u52a0\u5165\u200bTrie\u200b\u5219\u200b\u8fd4\u56de\u200b0\n        node = node-&gt;next[path];\n    }\n    return node-&gt;end;\n}\n</code></pre></p> </li> <li> <p>\u200b\u67e5\u8be2\u200b\u524d\u7f00\u200b\u64cd\u4f5c\u200b   C++<pre><code>int search_prefix(const string &amp;prev) {\n    TrieNode *node = root;\n    for (int i = 0; i &lt; prev.size(); i++) {\n        int path = prev[i] - 'a';\n        if (node-&gt;next[path] == nullptr) return 0;\n        node = node-&gt;next[path];\n    }\n    return node-&gt;pass; // \u200b\u8fd4\u56de\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u8282\u70b9\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u4e2a\u6570\u200b\n}\n</code></pre></p> </li> <li> <p>\u200b\u5220\u9664\u200b\u64cd\u4f5c\u200b</p> </li> <li> <p>\u200b\u5982\u679c\u200b\u6709\u200b\uff0c\u200b\u5220\u9664\u200b\u4e00\u6b21\u200b</p> </li> <li>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\uff0c\u200b\u4ec0\u4e48\u200b\u90fd\u200b\u4e0d\u200b\u505a\u200b</li> </ul> C++<pre><code>void erase(const string &amp;word) {\n    // \u200b\u53ea\u6709\u200b\u8be5\u200b\u5b57\u7b26\u4e32\u200b\u5b58\u5728\u200b\u4e8e\u200bTrie\u200b\u4e2d\u624d\u200b\u9700\u8981\u200b\u64cd\u4f5c\u200b\n    if (search(word) &gt; 0) {\n        TrieNode *node = root;\n        node-&gt;pass--;\n        for (int i = 0; i &lt; word.size(); i++) {\n            int path = word[i] - 'a';\n            if(--node-&gt;next[path]-&gt;pass == 0) {\n                delete node-&gt;next[path];\n                node-&gt;next[path] = nullptr;\n                return ;\n            }\n            node = node-&gt;next[path];\n        }\n        node-&gt;end--;\n    }\n}\n</code></pre> <p>\u200b\u5b57\u7b26\u200b\u6570\u8d85\u200b\u591a\u200b\u6216\u8005\u200b\u4e0d\u200b\u786e\u5b9a\u200b</p> <p>\u200b\u53ef\u4ee5\u200b\u6539\u7528\u200b\u54c8\u5e0c\u200b</p>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Trie%20Tree/#-_1","title":"\u63a8\u8350\u200b-\u200b\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u9759\u6001\u200b\u6570\u7ec4\u200b\u5b9e\u73b0","text":"\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>const int MAX; // \u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b\u5408\u7406\u200b\u6570\u503c\u200b\nint trie[MAX][26]; // \u200b\u8bb0\u5f55\u200b\u8def\u5f84\u200b\u4fe1\u606f\u200b\nint Pass[MAX], End[MAX]; // \u200b\u8bb0\u5f55\u200bpass\u200b\u6570\u636e\u200b\u548c\u200bend\u200b\u6570\u636e\u200b\n// \u200b\u820d\u5f03\u200b\u8282\u70b9\u200b0\u200b\u4e0d\u7528\u200b\nint cnt = 1; // \u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\n// \u200b\u63d2\u5165\u200b\u64cd\u4f5c\u200b\uff1a\u200b\u5c06\u200b\u5355\u8bcd\u200b\u63d2\u5165\u200b\u5230\u200bTrie\u200b\u6811\u4e2d\u200b\nvoid insert(const string &amp;word) {\n    int cur = 1;  // \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b(\u200b\u8282\u70b9\u200b1)\u200b\u5f00\u59cb\u200b\n    Pass[cur]++;  // \u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200bPass\u200b\u8ba1\u6570\u200b+1\uff08\u200b\u8868\u793a\u200b\u7ecf\u8fc7\u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200b\u8def\u5f84\u200b\u6570\u200b+1\uff09\n\n    // \u200b\u904d\u5386\u200b\u5355\u8bcd\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n    for (int i = 0; i &lt; word.size(); i++) {\n        int path = word[i] - 'a';  // \u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b0-25\u200b\u7684\u200b\u7d22\u5f15\u200b(\u200b\u5bf9\u5e94\u200b26\u200b\u4e2a\u200b\u5b57\u6bcd\u200b)\n\n        // \u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u5b57\u7b26\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b50\u200b\u8282\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u521b\u5efa\u200b\u65b0\u200b\u8282\u70b9\u200b\n        if (trie[cur][path] == 0) {\n            trie[cur][path] = ++cnt;  // \u200b\u5206\u914d\u200b\u65b0\u200b\u8282\u70b9\u200b\uff0ccnt\u200b\u9012\u589e\u200b\n        }\n\n        cur = trie[cur][path];  // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n        Pass[cur]++;  // \u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u7684\u200bPass\u200b\u8ba1\u6570\u200b+1\uff08\u200b\u8868\u793a\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u8282\u70b9\u200b\u7684\u200b\u8def\u5f84\u200b\u6570\u200b+1\uff09\n    }\n\n    End[cur]++;  // \u200b\u5355\u8bcd\u200b\u7ed3\u675f\u200b\u8282\u70b9\u200b\u7684\u200bEnd\u200b\u8ba1\u6570\u200b+1\uff08\u200b\u8868\u793a\u200b\u4ee5\u8be5\u200b\u8282\u70b9\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u5355\u8bcd\u200b\u6570\u200b+1\uff09\n}\n\n// \u200b\u67e5\u8be2\u200b\u64cd\u4f5c\u200b\uff1a\u200b\u68c0\u67e5\u200b\u5355\u8bcd\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u4e8e\u200bTrie\u200b\u6811\u4e2d\u200b\nint search(const string &amp;word) {\n    int cur = 1;  // \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b(\u200b\u8282\u70b9\u200b1)\u200b\u5f00\u59cb\u200b\n\n    // \u200b\u904d\u5386\u200b\u5355\u8bcd\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n    for (int i = 0; i &lt; word.size(); i++) {\n        int path = word[i] - 'a';  // \u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b0-25\u200b\u7684\u200b\u7d22\u5f15\u200b\n\n        // \u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u5b57\u7b26\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b50\u200b\u8282\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u5355\u8bcd\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        if (trie[cur][path] == 0) {\n            return 0;  // \u200b\u8fd4\u56de\u200b0\u200b\u8868\u793a\u200b\u5355\u8bcd\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        }\n\n        cur = trie[cur][path];  // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n    }\n\n    // \u200b\u68c0\u67e5\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u662f\u5426\u662f\u200b\u67d0\u4e2a\u200b\u5355\u8bcd\u200b\u7684\u200b\u7ed3\u675f\u200b\u8282\u70b9\u200b\n    return End[cur];  // \u200b\u8fd4\u56de\u200bEnd\u200b\u8ba1\u6570\u200b(0\u200b\u8868\u793a\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c&gt;0\u200b\u8868\u793a\u200b\u5b58\u5728\u200b)\n}\n\n// \u200b\u67e5\u8be2\u200b\u524d\u7f00\u200b\u64cd\u4f5c\u200b\uff1a\u200b\u7edf\u8ba1\u200b\u4ee5\u200b\u7ed9\u5b9a\u200b\u524d\u7f00\u200b\u5f00\u5934\u200b\u7684\u200b\u5355\u8bcd\u200b\u6570\u91cf\u200b\nint search_prefix(const string &amp;pre) {\n    int cur = 1;  // \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b(\u200b\u8282\u70b9\u200b1)\u200b\u5f00\u59cb\u200b\n\n    // \u200b\u904d\u5386\u200b\u524d\u7f00\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n    for (int i = 0; i &lt; pre.size(); i++) {\n        int path = pre[i] - 'a';  // \u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b0-25\u200b\u7684\u200b\u7d22\u5f15\u200b\n\n        // \u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u5b57\u7b26\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b50\u200b\u8282\u70b9\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u524d\u7f00\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        if (trie[cur][path] == 0) {\n            return 0;  // \u200b\u8fd4\u56de\u200b0\u200b\u8868\u793a\u200b\u524d\u7f00\u200b\u4e0d\u200b\u5b58\u5728\u200b\n        }\n\n        cur = trie[cur][path];  // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n    }\n\n    // \u200b\u8fd4\u56de\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u524d\u7f00\u200b\u8282\u70b9\u200b\u7684\u200b\u8def\u5f84\u200b\u6570\u200b(Pass\u200b\u8ba1\u6570\u200b)\n    return Pass[cur];\n}\n\n// \u200b\u5220\u9664\u200b\u64cd\u4f5c\u200b\uff1a\u200b\u4ece\u200bTrie\u200b\u6811\u4e2d\u200b\u5220\u9664\u200b\u5355\u8bcd\u200b\nvoid erase(const string &amp;word) {\n    // \u200b\u5148\u200b\u68c0\u67e5\u200b\u5355\u8bcd\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\n    if (search(word)) {\n        int cur = 1;  // \u200b\u4ece\u6839\u200b\u8282\u70b9\u200b(\u200b\u8282\u70b9\u200b1)\u200b\u5f00\u59cb\u200b\n        Pass[cur]--;  // \u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200bPass\u200b\u8ba1\u6570\u200b-1\n\n        // \u200b\u904d\u5386\u200b\u5355\u8bcd\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u200b\n        for (int i = 0; i &lt; word.size(); i++) {\n            int path = word[i] - 'a';  // \u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b0-25\u200b\u7684\u200b\u7d22\u5f15\u200b\n\n            // \u200b\u51cf\u5c11\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u7684\u200bPass\u200b\u8ba1\u6570\u200b\n            if (--Pass[trie[cur][path]] == 0) {\n                // \u200b\u5982\u679c\u200bPass\u200b\u8ba1\u6570\u200b\u51cf\u200b\u4e3a\u200b0\uff0c\u200b\u8868\u793a\u200b\u6ca1\u6709\u200b\u5176\u4ed6\u200b\u5355\u8bcd\u200b\u7ecf\u8fc7\u200b\u8be5\u200b\u8282\u70b9\u200b\n                // \u200b\u53ef\u4ee5\u200b\u5b89\u5168\u200b\u5220\u9664\u200b\u8be5\u200b\u8282\u70b9\u200b(\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b0)\n                trie[cur][path] = 0;\n                return;  // \u200b\u5220\u9664\u200b\u5b8c\u6210\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\n            }\n\n            cur = trie[cur][path];  // \u200b\u79fb\u52a8\u200b\u5230\u5b50\u200b\u8282\u70b9\u200b\n        }\n\n        End[cur]--;  // \u200b\u5355\u8bcd\u200b\u7ed3\u675f\u200b\u8282\u70b9\u200b\u7684\u200bEnd\u200b\u8ba1\u6570\u200b-1\n    }\n    // \u200b\u5982\u679c\u200b\u5355\u8bcd\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u4e0d\u200b\u505a\u200b\u4efb\u4f55\u200b\u64cd\u4f5c\u200b\n}\n</code></pre>","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Trie%20Tree/#_3","title":"\u63a5\u5934\u200b\u5bc6\u94a5","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Trie%20Tree/#_4","title":"\u6570\u7ec4\u200b\u4e2d\u200b\u4e24\u4e2a\u200b\u6570\u200b\u7684\u200b\u6700\u5927\u200b\u5f02\u6216\u200b\u503c","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Trie%20Tree/#ii","title":"\u5355\u8bcd\u200b\u641c\u7d22\u200bII","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Trie%20Tree/#_5","title":"\u524d\u7f00\u200b\u6811\u200b\u7684\u200b\u603b\u7ed3","text":"","tags":["Algorithm"]},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/","title":"\u53cc\u200b\u6307\u9488\u200b\u7b97\u6cd5","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u53cc\u200b\u6307\u9488\u200b\uff08Two Pointers\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u4e24\u4e2a\u200b\u6307\u9488\u200b\uff08\u200b\u6216\u200b\u7d22\u5f15\u200b\uff09\u200b\u5728\u200b\u6570\u7ec4\u200b\u3001\u200b\u94fe\u8868\u200b\u6216\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u534f\u540c\u200b\u904d\u5386\u200b\u7684\u200b\u9ad8\u6548\u200b\u6280\u5de7\u200b\u3002\u200b\u5b83\u200b\u901a\u5e38\u200b\u80fd\u200b\u5c06\u200b O(n\u00b2) \u200b\u7684\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4f18\u5316\u200b\u4e3a\u200b O(n)\uff0c\u200b\u9002\u7528\u200b\u4e8e\u200b\u591a\u79cd\u200b\u573a\u666f\u200b\u3002</p> <p>\u200b\u901a\u5e38\u200b\u53cc\u200b\u6307\u9488\u200b\u5305\u62ec\u200b\u5982\u4e0b\u200b\u7c7b\u578b\u200b</p> <ul> <li>\u200b\u540c\u5411\u200b\u53cc\u200b\u6307\u9488\u200b</li> <li>\u200b\u5feb\u6162\u200b\u53cc\u200b\u6307\u9488\u200b</li> <li>\u200b\u4ece\u200b\u4e24\u5934\u200b\u5f80\u200b\u4e2d\u95f4\u200b\u7684\u200b\u53cc\u200b\u6307\u9488\u200b</li> <li>\u200b\u5176\u4ed6\u200b</li> </ul> <p>\u200b\u4e25\u683c\u6765\u8bf4\u200b\u53cc\u200b\u6307\u9488\u200b\u5e76\u200b\u4e0d\u662f\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u800c\u200b\u66f4\u200b\u591a\u200b\u53ea\u80fd\u200b\u7b97\u200b\u4e00\u79cd\u200b\u601d\u8def\u200b</p> \u200b\u76f8\u5173\u200b\u4e60\u9898\u200b <p>leetcode922.\u200b\u6309\u200b\u5947\u5076\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200b II</p> <p>leetcode287.\u200b\u5bfb\u6c42\u200b\u91cd\u590d\u200b\u6570\u200b</p> <p>leetcode42.\u200b\u63a5\u200b\u96e8\u6c34\u200b</p> <p>leetcode881.\u200b\u6551\u751f\u8247\u200b</p> <p>leetcode11.\u200b\u76db\u200b\u6700\u591a\u6c34\u200b\u7684\u200b\u5bb9\u5668\u200b</p> <p>leetcode475.\u200b\u4f9b\u6696\u200b\u5668\u200b</p> <p>leetcode41.\u200b\u7f3a\u5931\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u6b63\u6570\u200b</p>"},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/#q1-ii","title":"Q1 \u200b\u6309\u200b\u5947\u5076\u200b\u6392\u5e8f\u200b\u6570\u7ec4\u200bII","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b \u200b\u7b80\u5355\u200b\u62f7\u8d1d\u200bO(N) O(N)\u200b\u53cc\u200b\u6307\u9488\u200bO(N) O(1) C++<pre><code>class Solution {\npublic:\n    // O(N) O(N)\u200b\u7b80\u5355\u200b\u904d\u5386\u200b\u62f7\u8d1d\u200b\n    vector&lt;int&gt; sortArrayByParityII(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; ans(nums.size(), -1);\n        for (int i = 0, j = 0, k = 1; i &lt; nums.size(); i++) {\n            if (nums[i] % 2 == 0) {\n                ans[j] = nums[i];\n                j += 2;\n            } else {\n                ans[k] = nums[i];\n                k += 2;\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre> C++<pre><code>class Solution {\npublic:\n    // O(N) O(1) \u200b\u53cc\u200b\u6307\u9488\u200b\n    vector&lt;int&gt; sortArrayByParityII(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int j = 1;\n        for (int i = 0; i &lt; n; i += 2) {\n            if (nums[i] % 2 == 1) {\n                while (nums[j] % 2 == 1) j += 2;\n                std::swap(nums[i], nums[j]);\n            }\n        }\n        return nums;\n    }\n};\n</code></pre>"},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/#q2","title":"Q2 \u200b\u5bfb\u627e\u200b\u91cd\u590d\u200b\u6570","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b n + 1 \u200b\u4e2a\u200b\u6574\u6570\u200b\u7684\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u5176\u200b\u6570\u5b57\u200b\u90fd\u200b\u5728\u200b [1, n] \u200b\u8303\u56f4\u200b\u5185\u200b\uff08\u200b\u5305\u62ec\u200b 1 \u200b\u548c\u200b n\uff09\uff0c\u200b\u53ef\u77e5\u200b\u81f3\u5c11\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u91cd\u590d\u200b\u7684\u200b\u6574\u6570\u200b\u3002</p> <p>\u200b\u5047\u8bbe\u200b nums \u200b\u53ea\u6709\u200b \u200b\u4e00\u4e2a\u200b\u91cd\u590d\u200b\u7684\u200b\u6574\u6570\u200b \uff0c\u200b\u8fd4\u56de\u200b \u200b\u8fd9\u4e2a\u200b\u91cd\u590d\u200b\u7684\u200b\u6570\u200b \u3002</p> <p>\u200b\u4f60\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u5fc5\u987b\u200b\u4e0d\u200b\u4fee\u6539\u200b\u6570\u7ec4\u200bnums\u200b\u4e14\u200b\u53ea\u7528\u200b\u5e38\u91cf\u200b\u7ea7\u200b O(1) \u200b\u7684\u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b\u3002</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b \u200b\u4e8c\u8fdb\u5236\u200b\u5feb\u6162\u200b\u53cc\u200b\u6307\u9488\u200b-Floyd\u200b\u5224\u5708\u200b <p>\u200b\u7b97\u6cd5\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u901a\u8fc7\u200b\u9010\u4f4d\u200b\u5206\u6790\u200b\u4e8c\u8fdb\u5236\u4f4d\u200b\u6765\u200b\u786e\u5b9a\u200b\u91cd\u590d\u200b\u7684\u200b\u6570\u5b57\u200b\u3002\u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u4e8c\u8fdb\u5236\u4f4d\u200b\uff0c\u200b\u6bd4\u8f83\u200b\u6570\u7ec4\u200b\u4e2d\u8be5\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u6570\u5b57\u200b\u7684\u200b\u4e2a\u6570\u200b\uff08x\uff09\u200b\u4e0e\u200b1\u200b\u5230\u200bn\u200b\u7684\u200b\u6570\u5b57\u200b\u4e2d\u8be5\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u6570\u5b57\u200b\u7684\u200b\u4e2a\u6570\u200b\uff08y\uff09\u3002\u200b\u5982\u679c\u200bx &gt; y\uff0c\u200b\u8bf4\u660e\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\u7684\u200b\u8be5\u4f4d\u200b\u4e3a\u200b1\uff1b\u200b\u5426\u5219\u200b\u4e3a\u200b0\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9010\u4f4d\u200b\u6784\u5efa\u200b\u51fa\u200b\u91cd\u590d\u200b\u7684\u200b\u6570\u5b57\u200b\u3002 \u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b \\(O(N\\log{N})\\) \\(O(1)\\)</p> \u200b\u6b63\u786e\u6027\u200b\u7684\u200b\u8bc1\u660e\u200b <p>\u200b\u5982\u679c\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\uff08target\uff09\u200b\u51fa\u73b0\u200b\u4e24\u6b21\u200b\uff1a</p> <p>\u200b\u5bf9\u4e8e\u200btarget\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u4f4d\u200b\uff0cnums\u200b\u4e2d\u8be5\u200b\u4f4d\u200b\u7684\u200b1\u200b\u7684\u200b\u4e2a\u6570\u200b\u6bd4\u200b1\u200b\u5230\u200bn\u200b\u4e2d\u591a\u200b1\uff08\u200b\u56e0\u4e3a\u200btarget\u200b\u591a\u200b\u51fa\u73b0\u200b\u4e86\u200b\u4e00\u6b21\u200b\uff09\u3002</p> <p>\u200b\u5bf9\u4e8e\u200btarget\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b0\u200b\u7684\u200b\u4f4d\u200b\uff0cnums\u200b\u4e2d\u8be5\u200b\u4f4d\u200b\u7684\u200b1\u200b\u7684\u200b\u4e2a\u6570\u200b\u4e0e\u200b1\u200b\u5230\u200bn\u200b\u4e2d\u200b\u76f8\u540c\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\u51fa\u73b0\u200b\u8d85\u8fc7\u200b\u4e24\u6b21\u200b\uff1a</p> <p>\u200b\u76f8\u5f53\u4e8e\u200b\u7528\u200btarget\u200b\u66ff\u6362\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u7f3a\u5931\u200b\u7684\u200b\u6570\u5b57\u200b\u3002\u200b\u66ff\u6362\u200b\u65f6\u200b\uff1a</p> <p>\u200b\u5982\u679c\u200b\u88ab\u200b\u66ff\u6362\u200b\u7684\u200b\u6570\u5b57\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b1\u200b\u4e14\u200btarget\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b1\uff1ax\u200b\u4e0d\u53d8\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u88ab\u200b\u66ff\u6362\u200b\u7684\u200b\u6570\u5b57\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b0\u200b\u4e14\u200btarget\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b1\uff1ax\u200b\u589e\u52a0\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u88ab\u200b\u66ff\u6362\u200b\u7684\u200b\u6570\u5b57\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b1\u200b\u4e14\u200btarget\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b0\uff1ax\u200b\u51cf\u5c11\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u88ab\u200b\u66ff\u6362\u200b\u7684\u200b\u6570\u5b57\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b0\u200b\u4e14\u200btarget\u200b\u7684\u200b\u7b2c\u200bi\u200b\u4f4d\u4e3a\u200b0\uff1ax\u200b\u4e0d\u53d8\u200b\u3002</p> C++<pre><code>class Solution {\npublic:\n    int findDuplicate(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size(), ans = 0;  // n\u200b\u4e3a\u200b\u6570\u7ec4\u200b\u957f\u5ea6\u200b\uff0cans\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\uff08\u200b\u91cd\u590d\u200b\u7684\u200b\u6570\u5b57\u200b\uff09\n\n        // \u200b\u786e\u5b9a\u200b\u6700\u9ad8\u200b\u6709\u6548\u200b\u4f4d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff08bit_max\uff09\n        // \u200b\u4f8b\u5982\u200b\uff0cn=5\u200b\u65f6\u200b\uff0c\u200b\u6570\u5b57\u200b\u8303\u56f4\u200b\u662f\u200b1~4\uff08\u200b\u56e0\u4e3a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u91cd\u590d\u200b\uff09\uff0c4\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u662f\u200b100\uff0c\u200b\u6700\u9ad8\u200b\u4f4d\u662f\u200b\u7b2c\u200b2\u200b\u4f4d\u200b\n        int bit_max = 31;  // \u200b\u521d\u59cb\u200b\u8bbe\u200b\u4e3a\u200b31\n        while ((n - 1) &gt;&gt; bit_max == 0) bit_max--;  // \u200b\u627e\u5230\u200b\u6700\u9ad8\u200b\u6709\u6548\u200b\u4f4d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\n\n        // \u200b\u9010\u4f4d\u200b\u68c0\u67e5\u200b\uff08\u200b\u4ece\u200b\u6700\u4f4e\u200b\u4f4d\u5230\u200bbit_max\u200b\u4f4d\u200b\uff09\n        // \u200b\u5916\u5c42\u200b log(n)\n        for (int bit = 0; bit &lt;= bit_max; bit++) {\n            int x = 0, y = 0;  // x\u200b\u7edf\u8ba1\u200bnums\u200b\u4e2d\u8be5\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u6570\u200b\u7684\u200b\u4e2a\u6570\u200b\uff0cy\u200b\u7edf\u8ba1\u200b1~n-1\u200b\u4e2d\u8be5\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u6570\u200b\u7684\u200b\u4e2a\u6570\u200b\n\n            // \u200b\u8ba1\u7b97\u200bx\uff1anums\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u5f53\u524d\u200bbit\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u6570\u200b\u7684\u200b\u4e2a\u6570\u200b\n            for (int i = 0; i &lt; n; i++) {\n                if (nums[i] &amp; (1 &lt;&lt; bit)) x++;  // \u200b\u68c0\u67e5\u200bnums[i]\u200b\u7684\u200b\u7b2c\u200bbit\u200b\u4f4d\u200b\u662f\u5426\u200b\u4e3a\u200b1\n            }\n\n            // \u200b\u8ba1\u7b97\u200by\uff1a1~n-1\u200b\u7684\u200b\u6570\u5b57\u200b\u4e2d\u200b\u5f53\u524d\u200bbit\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u6570\u200b\u7684\u200b\u4e2a\u6570\u200b\n            // \u200b\u6ce8\u610f\u200b\uff1a\u200b\u56e0\u4e3a\u200bnums\u200b\u7684\u200b\u957f\u5ea6\u200b\u662f\u200bn\uff0c\u200b\u4e14\u200b\u5305\u542b\u200b1~n-1\u200b\u7684\u200b\u6570\u5b57\u200b\u548c\u200b\u4e00\u4e2a\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\n            // \u200b\u5185\u5c42\u200bn\n            for (int i = 1; i &lt; n; i++) {  // i\u200b\u4ece\u200b1\u200b\u5230\u200bn-1\n                if (i &amp; (1 &lt;&lt; bit)) y++;  // \u200b\u68c0\u67e5\u200bi\u200b\u7684\u200b\u7b2c\u200bbit\u200b\u4f4d\u200b\u662f\u5426\u200b\u4e3a\u200b1\n            }\n\n            // \u200b\u5982\u679c\u200bnums\u200b\u4e2d\u8be5\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u6570\u200b\u7684\u200b\u4e2a\u6570\u200b &gt; 1~n-1\u200b\u4e2d\u8be5\u200b\u4f4d\u4e3a\u200b1\u200b\u7684\u200b\u6570\u200b\u7684\u200b\u4e2a\u6570\u200b\n            // \u200b\u8bf4\u660e\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\u7684\u200b\u8be5\u4f4d\u200b\u4e3a\u200b1\uff0c\u200b\u5c06\u200b\u5176\u200b\u8bbe\u7f6e\u200b\u5230\u200bans\u200b\u4e2d\u200b\n            if (x &gt; y) ans |= 1 &lt;&lt; bit;\n        }\n\n        return ans;  // \u200b\u8fd4\u56de\u200b\u627e\u5230\u200b\u7684\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\n    }\n};\n</code></pre> <p>\u200b\u7b97\u6cd5\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u5bf9\u4e8e\u200b<code>nums</code>\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u6570\u200b\u5efa\u7acb\u200b\u4e00\u6761\u200b\\(i\\rightarrow nums[i]\\),\u200b\u7531\u4e8e\u200b\u5b58\u5728\u200b\u91cd\u590d\u200b\u6570\u5b57\u200b\uff0c\u200b\u5219\u200b\u8be5\u200b\u56fe\u200b\u4e2d\u200b\u6bd4\u5982\u200b\u5b58\u5728\u200b\u73af\u200b\uff0c\u200b\u7531\u200b\u4e0b\u65b9\u200b\u4ecb\u7ecd\u200b\u7684\u200bFloyd\u200b\u5224\u5708\u200b\u7b97\u6cd5\u200b\u53ea\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u5feb\u6162\u200b\u53cc\u200b\u6307\u9488\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u786e\u5b9a\u200b\u73af\u200b\u7684\u200b\u5165\u53e3\u200b\u3002</p> <p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b \\(O(N)\\) \\(O(1)\\)</p> C++<pre><code>class Solution {\npublic:\n    int findDuplicate(vector&lt;int&gt;&amp; nums) {\n        int slow = nums[0], fast = nums[nums[0]];\n        // \u200b\u8ba9\u200bfast\u200b\u548c\u200bslow\u200b\u4e00\u76f4\u200b\u8d70\u200b\uff0c\u200b\u76f4\u5230\u200b\u76f8\u9047\u200b\n        while (slow != fast) {\n            // slow\u200b\u8d70\u200b\u4e00\u6b21\u200b\n            slow = nums[slow];\n            // fast\u200b\u8d70\u200b\u4e24\u6b21\u200b\n            fast = nums[nums[fast]];\n        }\n        // \u200b\u5c06\u200b\u6307\u9488\u200b\u653e\u200b\u56de\u200b\u8d77\u70b9\u200b\n        fast = 0;\n        while (slow != fast) {\n            // slow\u200b\u548c\u200bfast\u200b\u90fd\u200b\u8c03\u6574\u200b\u4e3a\u200b\u4e00\u6b21\u200b\u8d70\u200b\u4e00\u6b65\u200b\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n\n        return fast;\n    }\n};\n</code></pre> Floyd\u200b\u5224\u5708\u200b\u7b97\u6cd5\u200b <p>\u200b\u5982\u679c\u200b\u6709\u9650\u200b\u72b6\u6001\u673a\u200b\u3001\u200b\u8fed\u4ee3\u200b\u51fd\u6570\u200b\u6216\u8005\u200b\u94fe\u8868\u200b\u5b58\u5728\u200b\u73af\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4e00\u5b9a\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u8d77\u70b9\u200b\u53ef\u4ee5\u200b\u5230\u8fbe\u200b\u67d0\u4e2a\u200b\u73af\u200b\u7684\u200b\u67d0\u5904\u200b(\u200b\u8fd9\u4e2a\u200b\u8d77\u70b9\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u67d0\u4e2a\u200b\u73af\u4e0a\u200b)\u3002</p> <p>\u200b\u521d\u59cb\u72b6\u6001\u200b\u4e0b\u200b\uff0c\u200b\u5047\u8bbe\u200b\u5df2\u77e5\u200b\u67d0\u4e2a\u200b\u8d77\u70b9\u200b\u8282\u70b9\u200b\u4e3a\u200b\u8282\u70b9\u200bS\u3002\u200b\u73b0\u8bbe\u200b\u4e24\u4e2a\u200b\u6307\u9488\u200bt\u200b\u548c\u200bh\uff0c\u200b\u5c06\u200b\u5b83\u4eec\u200b\u5747\u200b\u6307\u5411\u200bS\u3002</p> <p>\u200b\u63a5\u7740\u200b\uff0c\u200b\u540c\u65f6\u200b\u8ba9\u200bt\u200b\u548c\u200bh\u200b\u5f80\u524d\u200b\u63a8\u8fdb\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e8c\u8005\u200b\u7684\u200b\u901f\u5ea6\u200b\u4e0d\u540c\u200b\uff1at\u200b\u6bcf\u200b\u524d\u8fdb\u200b1\u200b\u6b65\u200b\uff0ch\u200b\u524d\u8fdb\u200b2\u200b\u6b65\u200b\u3002\u200b\u53ea\u8981\u200b\u4e8c\u8005\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u524d\u8fdb\u200b\u800c\u4e14\u200b\u6ca1\u6709\u200b\u76f8\u9047\u200b\uff0c\u200b\u5c31\u200b\u5982\u6b64\u200b\u4fdd\u6301\u200b\u4e8c\u8005\u200b\u7684\u200b\u63a8\u8fdb\u200b\u3002\u200b\u5f53\u200bh\u200b\u65e0\u6cd5\u200b\u524d\u8fdb\u200b\uff0c\u200b\u5373\u200b\u5230\u8fbe\u200b\u67d0\u4e2a\u200b\u6ca1\u6709\u200b\u540e\u7ee7\u200b\u7684\u200b\u8282\u70b9\u200b\u65f6\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u786e\u5b9a\u200b\u4ece\u200bS\u200b\u51fa\u53d1\u200b\u4e0d\u4f1a\u200b\u9047\u5230\u200b\u73af\u200b\u3002\u200b\u53cd\u4e4b\u200b\u5f53\u200bt\u200b\u4e0e\u200bh\u200b\u518d\u6b21\u200b\u76f8\u9047\u200b\u65f6\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u786e\u5b9a\u200b\u4ece\u200bS\u200b\u51fa\u53d1\u200b\u4e00\u5b9a\u200b\u4f1a\u200b\u8fdb\u5165\u200b\u67d0\u4e2a\u200b\u73af\u200b\uff0c\u200b\u8bbe\u5176\u4e3a\u200b\u73af\u200bC\u3002</p> <p>\u200b\u5982\u679c\u200b\u786e\u5b9a\u200b\u4e86\u200b\u5b58\u5728\u200b\u67d0\u4e2a\u200b\u73af\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6c42\u6b64\u200b\u73af\u200b\u7684\u200b\u8d77\u70b9\u200b\u4e0e\u200b\u957f\u5ea6\u200b\u3002</p> <p>\u200b\u4e0a\u8ff0\u200b\u7b97\u6cd5\u200b\u521a\u200b\u5224\u65ad\u200b\u51fa\u200b\u5b58\u5728\u200b\u73af\u200bC\u200b\u65f6\u200b\uff0c\u200b\u663e\u7136\u200bt\u200b\u548c\u200bh\u200b\u4f4d\u4e8e\u200b\u540c\u4e00\u200b\u8282\u70b9\u200b\uff0c\u200b\u8bbe\u5176\u4e3a\u200b\u8282\u70b9\u200bM\u3002\u200b\u663e\u7136\u200b\uff0c\u200b\u4ec5\u200b\u9700\u4ee4\u200bh\u200b\u4e0d\u200b\u52a8\u200b\uff0c\u200b\u800c\u200bt\u200b\u4e0d\u65ad\u200b\u63a8\u8fdb\u200b\uff0c\u200b\u6700\u7ec8\u200b\u53c8\u200b\u4f1a\u200b\u8fd4\u56de\u200b\u8282\u70b9\u200bM\uff0c\u200b\u7edf\u8ba1\u200b\u8fd9\u200b\u4e00\u6b21\u200bt\u200b\u63a8\u8fdb\u200b\u7684\u200b\u6b65\u6570\u200b\uff0c\u200b\u663e\u7136\u200b\u8fd9\u200b\u5c31\u662f\u200b\u73af\u200bC\u200b\u7684\u200b\u957f\u5ea6\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u6c42\u51fa\u200b\u73af\u200bC\u200b\u7684\u200b\u8d77\u70b9\u200b\uff0c\u200b\u53ea\u8981\u200b\u4ee4\u200bh\u200b\u4ecd\u200b\u4f4d\u4e8e\u200b\u8282\u70b9\u200bM\uff0c\u200b\u800c\u4ee4\u200bt\u200b\u8fd4\u56de\u200b\u8d77\u70b9\u200b\u8282\u70b9\u200bS\uff0c\u200b\u6b64\u65f6\u200bh\u200b\u4e0e\u200bt\u200b\u4e4b\u95f4\u200b\u8ddd\u4e3a\u200b\u73af\u200bC\u200b\u957f\u5ea6\u200b\u7684\u200b\u6574\u6570\u500d\u200b\u3002\u200b\u968f\u540e\u200b\uff0c\u200b\u540c\u65f6\u200b\u8ba9\u200bt\u200b\u548c\u200bh\u200b\u5f80\u524d\u200b\u63a8\u8fdb\u200b\uff0c\u200b\u4e14\u200b\u4fdd\u6301\u200b\u4e8c\u8005\u200b\u7684\u200b\u901f\u5ea6\u200b\u76f8\u540c\u200b\uff1at\u200b\u6bcf\u200b\u524d\u8fdb\u200b1\u200b\u6b65\u200b\uff0ch\u200b\u524d\u8fdb\u200b1\u200b\u6b65\u200b\u3002\u200b\u6301\u7eed\u200b\u8be5\u200b\u8fc7\u7a0b\u200b\u76f4\u81f3\u200bt\u200b\u4e0e\u200bh\u200b\u518d\u200b\u4e00\u6b21\u200b\u76f8\u9047\u200b\uff0c\u200b\u8bbe\u200b\u6b64\u6b21\u200b\u76f8\u9047\u200b\u65f6\u200b\u4f4d\u4e8e\u200b\u540c\u4e00\u200b\u8282\u70b9\u200bP\uff0c\u200b\u5219\u200b\u8282\u70b9\u200bP\u200b\u5373\u200b\u4e3a\u200b\u4ece\u200b\u8282\u70b9\u200bS\u200b\u51fa\u53d1\u200b\u6240\u200b\u5230\u8fbe\u200b\u7684\u200b\u73af\u200bC\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u8282\u70b9\u200b\uff0c\u200b\u5373\u73af\u200bC\u200b\u7684\u200b\u4e00\u4e2a\u200b\u8d77\u70b9\u200b\u3002</p> <p>\u200b\u8bc1\u660e\u200b\u5bfb\u627e\u200b\u5165\u200b\u73af\u8282\u200b\u70b9\u200b\u7684\u200b\u6b63\u786e\u6027\u200b</p> <p>\u200b\u5047\u8bbe\u200b\u4ece\u200b\u8dd1\u9053\u200b\u8d77\u70b9\u200bA\u200b\u5230\u200b\u73af\u200b\u8d77\u70b9\u200bB\u200b\u7684\u200b\u8def\u7a0b\u200b\u4e3a\u200b\\(m\\),\u200b\u4ece\u200bB\u200b\u70b9\u5230\u200b\u76f8\u9047\u200b\u70b9\u200bC\u200b\u7684\u200b\u8def\u7a0b\u200b\u4e3a\u200b\\(k\\),\u200b\u73af\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e3a\u200b\\(n\\),\u200b\u5219\u200b\u76f8\u9047\u200b\u7684\u200b\u65f6\u5019\u200b\u4e4c\u9f9f\u200b(\u200b\u6162\u200b\u6307\u9488\u200b)\u200b\u8d70\u8fc7\u200b\u7684\u200b\u8ddd\u79bb\u200b\u4e3a\u200b:</p> \\[S_1=m+k+t_1*n\\] <p>\u200b\u5154\u5b50\u200b(\u200b\u5feb\u200b\u6307\u9488\u200b)\u200b\u8d70\u8fc7\u200b\u7684\u200b\u8ddd\u79bb\u200b\u4e3a\u200b\uff1a</p> \\[S_2=m + k + t_2 * n(t_2&gt;t_1)\\] <p>\u200b\u4e14\u200b\\(S_2=2*S_1\\)\u200b\u5219\u200b\u7531\u200b\u4e0a\u5f0f\u200b\u53ef\u4ee5\u200b\u63a8\u51fa\u200b</p> \\[ \\begin{align*}     S_1&amp;=S_2-S_1=(t_2-t_1)*n \\\\     S_2 &amp;= 2 * (t_2-t_1) * n \\end{align*} \\] <p>\u200b\u5373\u200b\u5feb\u6162\u200b\u6307\u9488\u200b\u8d70\u8fc7\u200b\u7684\u200b\u8ddd\u79bb\u200b\u90fd\u200b\u662f\u200b\u73af\u957f\u200b\u7684\u200b\u500d\u6570\u200b\uff0c\u200b\u800c\u200b\\(m + k = (t_2 - 2 * t_1) * n\\)\u200b\u4e5f\u200b\u662f\u200b\u73af\u957f\u200b\u7684\u200b\u500d\u6570\u200b \u200b\u5f53\u5feb\u200b\u6307\u9488\u200b\u56de\u5230\u200b\u8dd1\u9053\u200b\u8d77\u59cb\u200b\u70b9\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u6162\u200b\u6307\u9488\u200b\u4ece\u200b\u76f8\u9047\u200b\u70b9\u200b\u51fa\u53d1\u200b.\u200b\u6b64\u65f6\u200b\u5f53\u5feb\u200b\u6307\u9488\u200b\u8d70\u5230\u200b\u73af\u200b\u8d77\u70b9\u200b\u7684\u200b\u65f6\u5019\u200b\u7ecf\u8fc7\u200b\u4e86\u200bm\u200b\u6b64\u65f6\u200b\u6162\u200b\u6307\u9488\u200b\u8d70\u8fc7\u200b\u4e86\u200b\\(k+m\\)\u200b\u5373\u200b\u73af\u957f\u200b\u500d\u6570\u200b\u4e5f\u200b\u5c31\u200b\u56de\u5230\u200b\u4e86\u200b\u73af\u200b\u7684\u200b\u8d77\u70b9\u200b\u3002</p>"},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/#q3-hard","title":"Q3: \u200b\u63a5\u200b\u96e8\u6c34\u200b(hard)","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u5b9a\u200b n \u200b\u4e2a\u200b\u975e\u8d1f\u200b\u6574\u6570\u200b\u8868\u793a\u200b\u6bcf\u4e2a\u200b\u5bbd\u5ea6\u200b\u4e3a\u200b 1 \u200b\u7684\u200b\u67f1\u5b50\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u56fe\u200b\uff0c\u200b\u8ba1\u7b97\u200b\u6309\u6b64\u200b\u6392\u5217\u200b\u7684\u200b\u67f1\u5b50\u200b\uff0c\u200b\u4e0b\u96e8\u200b\u4e4b\u540e\u200b\u80fd\u63a5\u200b\u591a\u5c11\u200b\u96e8\u6c34\u200b\u3002</p> <p></p> <p>\u200b\u8f93\u5165\u200b\uff1aheight = [0,1,0,2,1,0,1,3,2,1,2,1]</p> <p>\u200b\u8f93\u51fa\u200b\uff1a6</p> <p>\u200b\u89e3\u91ca\u200b\uff1a\u200b\u4e0a\u9762\u200b\u662f\u200b\u7531\u200b\u6570\u7ec4\u200b [0,1,0,2,1,0,1,3,2,1,2,1] \u200b\u8868\u793a\u200b\u7684\u200b\u9ad8\u5ea6\u200b\u56fe\u200b\uff0c\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u63a5\u200b 6 \u200b\u4e2a\u200b\u5355\u4f4d\u200b\u7684\u200b\u96e8\u6c34\u200b\uff08\u200b\u84dd\u8272\u200b\u90e8\u5206\u200b\u8868\u793a\u200b\u96e8\u6c34\u200b\uff09\u3002</p>"},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/#q4","title":"Q4: \u200b\u6551\u751f\u8247","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u5b9a\u200b\u6570\u7ec4\u200b people \u3002people[i]\u200b\u8868\u793a\u200b\u7b2c\u200b i \u200b\u4e2a\u4eba\u200b\u7684\u200b\u4f53\u91cd\u200b \uff0c\u200b\u8239\u200b\u7684\u200b\u6570\u91cf\u200b\u4e0d\u200b\u9650\u200b\uff0c\u200b\u6bcf\u8258\u200b\u8239\u200b\u53ef\u4ee5\u200b\u627f\u8f7d\u200b\u7684\u200b\u6700\u5927\u200b\u91cd\u91cf\u200b\u4e3a\u200b limit\u3002</p> <p>\u200b\u6bcf\u8258\u200b\u8239\u200b\u6700\u200b\u591a\u200b\u53ef\u200b\u540c\u65f6\u200b\u8f7d\u200b\u4e24\u4eba\u200b\uff0c\u200b\u4f46\u200b\u6761\u4ef6\u200b\u662f\u200b\u8fd9\u4e9b\u200b\u4eba\u200b\u7684\u200b\u91cd\u91cf\u200b\u4e4b\u200b\u548c\u200b\u6700\u200b\u591a\u200b\u4e3a\u200b limit\u3002</p> <p>\u200b\u8fd4\u56de\u200b \u200b\u627f\u8f7d\u200b\u6240\u6709\u4eba\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6700\u200b\u5c0f\u8239\u200b\u6570\u200b \u3002</p>"},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/#q5","title":"Q5: \u200b\u76db\u6c34\u200b\u6700\u200b\u591a\u200b\u7684\u200b\u5bb9\u5668","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u957f\u5ea6\u200b\u4e3a\u200b n \u200b\u7684\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b height \u3002\u200b\u6709\u200b n \u200b\u6761\u200b\u5782\u7ebf\u200b\uff0c\u200b\u7b2c\u200b i \u200b\u6761\u7ebf\u200b\u7684\u200b\u4e24\u4e2a\u200b\u7aef\u70b9\u200b\u662f\u200b (i, 0) \u200b\u548c\u200b (i, height[i]) \u3002</p> <p>\u200b\u627e\u51fa\u200b\u5176\u4e2d\u200b\u7684\u200b\u4e24\u6761\u7ebf\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u5b83\u4eec\u200b\u4e0e\u200b x \u200b\u8f74\u200b\u5171\u540c\u200b\u6784\u6210\u200b\u7684\u200b\u5bb9\u5668\u200b\u53ef\u4ee5\u200b\u5bb9\u7eb3\u200b\u6700\u591a\u200b\u7684\u200b\u6c34\u200b\u3002</p> <p>\u200b\u8fd4\u56de\u200b\u5bb9\u5668\u200b\u53ef\u4ee5\u200b\u50a8\u5b58\u200b\u7684\u200b\u6700\u5927\u200b\u6c34\u91cf\u200b\u3002</p> <p>\u200b\u8bf4\u660e\u200b\uff1a\u200b\u4f60\u200b\u4e0d\u80fd\u200b\u503e\u659c\u200b\u5bb9\u5668\u200b\u3002</p> <p></p> <p>\u200b\u8f93\u5165\u200b\uff1a[1,8,6,2,5,4,8,3,7]</p> <p>\u200b\u8f93\u51fa\u200b\uff1a49 </p> <p>\u200b\u89e3\u91ca\u200b\uff1a\u200b\u56fe\u4e2d\u200b\u5782\u76f4\u7ebf\u200b\u4ee3\u8868\u200b\u8f93\u5165\u200b\u6570\u7ec4\u200b [1,8,6,2,5,4,8,3,7]\u3002\u200b\u5728\u200b\u6b64\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5bb9\u5668\u200b\u80fd\u591f\u200b\u5bb9\u7eb3\u200b\u6c34\u200b\uff08\u200b\u8868\u793a\u200b\u4e3a\u200b\u84dd\u8272\u200b\u90e8\u5206\u200b\uff09\u200b\u7684\u200b\u6700\u5927\u503c\u200b\u4e3a\u200b 49\u3002</p> <p>\u200b\u95ee\u9898\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6c42\u89e3\u200b\\(\\min{(\u200b\u5de6\u200b\u8fb9\u754c\u200b,\u200b\u6709\u200b\u8fb9\u754c\u200b)}*\u200b\u533a\u95f4\u200b\u957f\u5ea6\u200b\\) </p>"},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/#q6","title":"Q6: \u200b\u4f9b\u6696\u200b\u5668","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u51ac\u5b63\u200b\u5df2\u7ecf\u200b\u6765\u4e34\u200b\u3002 \u200b\u4f60\u200b\u7684\u200b\u4efb\u52a1\u200b\u662f\u200b\u8bbe\u8ba1\u200b\u4e00\u4e2a\u200b\u6709\u200b\u56fa\u5b9a\u200b\u52a0\u70ed\u200b\u534a\u5f84\u200b\u7684\u200b\u4f9b\u6696\u200b\u5668\u5411\u200b\u6240\u6709\u200b\u623f\u5c4b\u200b\u4f9b\u6696\u200b\u3002</p> <p>\u200b\u5728\u200b\u52a0\u70ed\u5668\u200b\u7684\u200b\u52a0\u70ed\u200b\u534a\u5f84\u200b\u8303\u56f4\u200b\u5185\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u623f\u5c4b\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u83b7\u5f97\u200b\u4f9b\u6696\u200b\u3002</p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u7ed9\u51fa\u200b\u4f4d\u4e8e\u200b\u4e00\u6761\u200b\u6c34\u5e73\u7ebf\u4e0a\u200b\u7684\u200b\u623f\u5c4b\u200b houses \u200b\u548c\u200b\u4f9b\u6696\u200b\u5668\u200b heaters \u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u8bf7\u200b\u4f60\u200b\u627e\u51fa\u200b\u5e76\u200b\u8fd4\u56de\u200b\u53ef\u4ee5\u200b\u8986\u76d6\u200b\u6240\u6709\u200b\u623f\u5c4b\u200b\u7684\u200b\u6700\u5c0f\u200b\u52a0\u70ed\u200b\u534a\u5f84\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u6240\u6709\u200b\u4f9b\u6696\u200b\u5668\u200b heaters \u200b\u90fd\u200b\u9075\u5faa\u200b\u4f60\u200b\u7684\u200b\u534a\u5f84\u200b\u6807\u51c6\u200b\uff0c\u200b\u52a0\u70ed\u200b\u7684\u200b\u534a\u5f84\u200b\u4e5f\u200b\u4e00\u6837\u200b\u3002</p>"},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/#q7-hard","title":"Q7: \u200b\u7f3a\u5931\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u6b63\u6570\u200b(hard)","text":"<p>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u672a\u200b\u6392\u5e8f\u200b\u7684\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums \uff0c\u200b\u8bf7\u200b\u4f60\u200b\u627e\u51fa\u200b\u5176\u4e2d\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b\u7684\u200b\u6700\u5c0f\u200b\u7684\u200b\u6b63\u6574\u6570\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u4f60\u200b\u5b9e\u73b0\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u4e3a\u200b O(n) \u200b\u5e76\u4e14\u200b\u53ea\u200b\u4f7f\u7528\u200b\u5e38\u6570\u200b\u7ea7\u522b\u200b\u989d\u5916\u200b\u7a7a\u95f4\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u3002</p>"},{"location":"CS/Algorithm/Beginner/Two%20Pointers%20Technique/#_2","title":"\u53cc\u200b\u6307\u9488\u200b\u7b97\u6cd5\u200b\u7684\u200b\u603b\u7ed3","text":"<p>\u200b\u603b\u7ed3\u200b</p>"},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Class/","title":"Class","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Class/#defining-abstract-data-types","title":"Defining Abstract Data Types","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Class/#access-control-and-encapsulation","title":"Access Control and Encapsulation","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Class/#additional-class-features","title":"Additional Class Features","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Class/#class-scope","title":"Class Scope","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Class/#constructors-revisited","title":"Constructors Revisited","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Class/#static-class-members","title":"<code>static</code> Class Members","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Class/#summer","title":"Summer","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/","title":"Expressions","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#fundamentals","title":"Fundamentals","text":"<p>Expression</p> <p>An expression is composed of one or more operands(\u200b\u64cd\u4f5c\u6570\u200b) and yields a result when it is evaluated.</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#basic-concepts","title":"Basic Concepts","text":"<p><code>unary operators(\u200b\u4e00\u5143\u200b\u64cd\u4f5c\u6570\u200b)</code> and <code>binary operators(\u200b\u4e8c\u5143\u200b\u64cd\u4f5c\u6570\u200b)</code> </p> <p>Example</p> <p><code>&amp;</code> <code>*(de-reference)</code> --- unary operators</p> <p><code>+</code> <code>-</code> <code>*(multiplication)</code> <code>\\</code> -- binary operators</p> <p>Overloaded Operators(\u200b\u8fd0\u7b97\u7b26\u200b\u91cd\u8f7d\u200b)</p> <p>the number of operands and the precedence and the associativity of  the operator cannot be changed.</p> <p>Lvalues and Rvalues(\u200b\u5de6\u503c\u200b\u4e0e\u200b\u53f3\u503c\u200b)</p> <p>In short, lvalues could stand on the left-hand side of an assign-ment whereas revalues could not.</p> <p>An lvalue expression yields an object or a function.</p> <ul> <li> <p>when we use an object as an rvalue, we use the object's value(its contents)</p> </li> <li> <p>when we sue an object as an lvalue, we use the object's identity(its location in memory)</p> </li> </ul> <p>Warning</p> <ul> <li> <p>\u200b\u80fd\u591f\u200b\u4f7f\u7528\u200b\u5de6\u503c\u200b\u66ff\u4ee3\u200b\u53f3\u503c\u200b(\u200b\u6b64\u65f6\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u200b\u5bf9\u8c61\u200b\u7684\u200b\u5185\u5bb9\u200b)</p> </li> <li> <p>\u200b\u4f46\u200b\u4e0d\u80fd\u200b\u4f7f\u7528\u200b\u53f3\u503c\u200b\u66ff\u4ee3\u200b\u5de6\u503c\u200b(\u200b\u5373\u200b\u4e0d\u80fd\u200b\u5728\u200b\u6ca1\u6709\u200b\u660e\u786e\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4f7f\u7528\u200b)</p> </li> </ul> <p>operators that involve lvalues</p> <ol> <li> <p><code>Assignment</code> requires a (non-const) lvalue as its left-hand operand  and yield its left-hand operand as an lvalue.</p> C++<pre><code>int x = 10;\nx = 20;  // right\n// 10 = x error: 10 is rvalue\nint y = (x = 30); // y = 30, because assignment return lvalue\n</code></pre> </li> <li> <p><code>address-of operator *</code> requires an lvalue operand and returns a pointer to its operand as an rvalue</p> C++<pre><code>int a = 42;\nint *p = &amp;a; // right\n// int *p2 = &amp;10; error 10 is rlvaue\n</code></pre> </li> <li> <p><code>dereference and subscript operators</code> all yield lvalues</p> C++<pre><code>int arr[3] = {1, 2, 3};\narr[0] = 100; // right\n\nint *ptr = &amp;arr[0];\n*ptr = 200; // right *ptr return lvalue\n\nstd::vector&lt;int&gt; vec = {1, 2 ,3};\nvec[1] = 50; // vec[1] return lvalue\n\nstd::string s = \"hello\";\ns[0] = 'H'; // right\n</code></pre> </li> <li> <p><code>increment and decrement operators</code> require lvalue operands and the prefix versions also yield lvalues</p> C++<pre><code>int b = 5;\n++b = 10; // right ++b return lvalue\n// b++ = 10; // error, b++ return rvlaue\n\nstd::vector&lt;int&gt;::iterator it = vec.begin();\n*++it = 99; // right ++it return lvalue\n</code></pre> </li> </ol> <p><code>decltype</code></p> <p><code>decltype</code>\u200b\u5bf9\u4e8e\u200b\u5de6\u53f3\u200b\u503c\u200b\u7684\u200b\u5904\u7406\u200b\u5e76\u4e0d\u76f8\u540c\u200b</p> <ul> <li> <p>\u200b\u82e5\u200b\u63a8\u65ad\u200b\u8868\u8fbe\u5f0f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5de6\u503c\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u8fd4\u56de\u200b\u5f15\u7528\u200b\u7c7b\u578b\u200b</p> </li> <li> <p>\u200b\u82e5\u200b\u662f\u200b\u4e00\u4e2a\u200b\u53f3\u503c\u200b\uff0c\u200b\u5219\u200b\u8fd4\u56de\u200b\u6b63\u5e38\u200b\u63a8\u65ad\u200b\u7c7b\u578b\u200b</p> </li> </ul> C++<pre><code>int *p = nullpter;\ndecltype(*p) // type is int&amp;\ndecltype(&amp;p) // type is int**\n</code></pre>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#precedence-and-associativity","title":"Precedence and Associativity","text":"<p>\u200b\u7b80\u5355\u200b\u6765\u8bf4\u200b\u4f18\u5148\u7ea7\u200b\u51b3\u5b9a\u200b\u8868\u8fbe\u5f0f\u200b\u5982\u4f55\u200b\u7ec4\u5408\u200b\u7684\u200b\u6b21\u5e8f\u200b\uff0c\u200b\u800c\u200b\u7ed3\u5408\u200b\u65b9\u5f0f\u200b\u51b3\u5b9a\u200b\u8868\u8fbe\u5f0f\u200b\u5982\u4f55\u200b\u89e3\u8bfb\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u62ec\u53f7\u200b\u6539\u53d8\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u8fd0\u7b97\u200b\u4f18\u5148\u7ea7\u200b\u3002</p> <p>cppreference - Operator Precedence</p> <p>Operator Precedence</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#order-of-evaluation","title":"Order of Evaluation","text":"<p>\u200b\u4e00\u4e9b\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u89e3\u8bfb\u200b\u987a\u5e8f\u200b\u5e76\u200b\u4e0d\u200b\u786e\u5b9a\u200b</p> C++<pre><code>int i = f1() + f2(); // cpp\u200b\u6807\u51c6\u200b\u5e76\u200b\u4e0d\u200b\u4fdd\u8bc1\u200bf1\u200b\u548c\u200bf2\u200b\u7684\u200b\u8c03\u7528\u200b\u987a\u5e8f\u200b\uff0c\u200b\u4ec5\u80fd\u200b\u4fdd\u8bc1\u200b\u4e8c\u8005\u200b\u4e00\u5b9a\u200b\u4f1a\u200b\u88ab\u200b\u8c03\u7528\u200b\n</code></pre> <p>\u200b\u82e5\u200b\u53ea\u662f\u200b\u4e0a\u9762\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u8fd8\u200b\u6bd4\u8f83\u200b\u597d\u529e\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u662f\u200b\u4e0b\u9762\u200b\u8fd9\u4e2a\u200b\u60c5\u51b5\u200b\u5c31\u200b\u9700\u8981\u200b\u26a0\ufe0f\u200b\u4e86\u200b</p> <p>C++<pre><code>int i = 0;\ncout &lt;&lt; i &lt;&lt; \" \" &lt;&lt; ++i &lt;&lt; endl;\n</code></pre> \u200b\u6839\u636e\u200b\u7f16\u8bd1\u5668\u200b\u7684\u200b\u4e0d\u540c\u200b\u53ef\u80fd\u200b\u83b7\u5f97\u200b<code>0 1</code>\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u83b7\u5f97\u200b<code>1 1</code>\u200b\u751a\u81f3\u200b\u7f16\u8bd1\u5668\u200b\u4e0d\u8ba9\u200b\u901a\u8fc7\u200b\uff0c\u200b\u8fd9\u662f\u200b\u7531\u4e8e\u200b</p> <p>ISO C++ 5.2/8</p> <p>\u200b\u82e5\u200b\u8868\u8fbe\u5f0f\u200b\u6709\u200b\u526f\u4f5c\u7528\u200b(side effect)\u200b\u4e0e\u200b\u540c\u4e00\u200b\u6807\u91cf\u200b\u5bf9\u8c61\u200b\u7684\u200b\u503c\u200b\u8ba1\u7b97\u200b\u5b58\u5728\u200b\u65e0\u5e8f\u200b\u5173\u7cfb\u200b,\u200b\u5219\u200b\u8be5\u200b\u884c\u4e3a\u200b\u672a\u5b9a\u4e49\u200b(UB)</p> <p>There are four operators that do guarantee the order in which operands are evaluated.</p> <ul> <li> <p><code>&amp;&amp;(and)</code> : \u200b\u4fdd\u8bc1\u200b\u6700\u200b\u5de6\u8fb9\u200b\u7684\u200b\u4f18\u5148\u200b\u6267\u884c\u200b\uff0c\u200b\u540e\u9762\u200b\u7684\u200b\u8868\u8fbe\u5f0f\u200b\u53ea\u6709\u200b\u5f53\u5176\u200b\u5de6\u8fb9\u200b\u7684\u200b\u8868\u8fbe\u5f0f\u200b\u5168\u4e3a\u200b\u771f\u200b\u624d\u200b\u4f1a\u200b\u6267\u884c\u200b</p> </li> <li> <p><code>||(or)</code>: \u200b\u548c\u200b<code>&amp;&amp;</code>\u200b\u57fa\u672c\u4e00\u81f4\u200b,\u200b\u53ea\u6709\u200b\u524d\u9762\u200b\u7684\u200b\u8868\u8fbe\u5f0f\u200b\u90fd\u200b\u4e3a\u200b<code>false</code>\u200b\u624d\u200b\u4f1a\u200b\u6267\u884c\u200b\u540e\u7eed\u200b\u7684\u200b\u8868\u8fbe\u5f0f\u200b</p> </li> <li> <p><code>?:(conditional)</code></p> </li> <li> <p><code>,(comma)</code></p> </li> </ul> <p>order preference associativity</p> <p>\u200b\u4f8b\u5982\u200b:\\(f() + g() * h() + j\\) : </p> <ul> <li> <p>\u200b\u4f18\u5148\u7ea7\u200b\u51b3\u5b9a\u200b\u4e86\u200b<code>g()</code>\u200b\u548c\u200b<code>h()</code>\u200b\u7684\u200b\u7ed3\u679c\u200b\u5148\u200b\u4f1a\u200b\u76f8\u4e58\u200b \u2192 \u200b\u7ec4\u5408\u200b</p> </li> <li> <p>\u200b\u7ed3\u5408\u200b\u6027\u200b\u51b3\u5b9a\u200b\u4e86\u200b<code>f()</code>\u200b\u7684\u200b\u7ed3\u679c\u200b\u4f1a\u200b\u4e0e\u200b<code>g()*h()</code>\u200b\u7684\u200b\u7ed3\u679c\u200b\u76f8\u52a0\u200b\u5e76\u200b\u4e0e\u200b<code>j</code>\u200b\u76f8\u52a0\u200b</p> </li> <li> <p>\u200b\u800c\u200b\u52a0\u6cd5\u200b\u6267\u884c\u200b\u7684\u200b\u987a\u5e8f\u200b\u65e0\u4eba\u200b\u80fd\u200b\u4fdd\u8bc1\u200b</p> </li> </ul> <p>\u200b\u5982\u679c\u200bf g h\u200b\u6ca1\u6709\u200b\u4fee\u6539\u200b\u76f8\u540c\u200b\u7684\u200b\u5bf9\u8c61\u200b\u5219\u200b\u8fd9\u4e2a\u200b\u8868\u8fbe\u5f0f\u200b\u6ca1\u200b\u5565\u200b\u95ee\u9898\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u5176\u200b\u4fee\u6539\u200b\u4e86\u200b\u5219\u200b\u662f\u200b\u4e00\u4e2a\u200b\u672a\u5b9a\u4e49\u200b\u884c\u4e3a\u200b</p> <p>advice</p> <ol> <li> <p>When in doubt, parenthesize expressions to force the grouping that the logic of your program requires.  </p> </li> <li> <p>If you change the value of an operand, don\u2019t use that operand elsewhere in the same expresion.</p> </li> </ol>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic Operators</p> \u200b\u8fd0\u7b97\u7b26\u200b \u200b\u7c7b\u578b\u200b \u200b\u4f7f\u7528\u200b + unary plus + expr - unary minus - expr --- --- --- * multiplication expr * expr / division expr / expr % remainder expr % expr --- --- --- + addition expr + expr - subtraction expr - expr <p>precedence : <code>+(unary plus)</code>  = <code>-(unary plus)</code> &gt; <code>* / %</code> &gt; <code>+(addition) -(subtraction)</code> Associativity: all left</p> <p>The operand and results of these operators are rvalue</p> <p><code>+ unary plus</code> return a (possibly promoted) copy of the value of its operand C++<pre><code>char c = 'A';\nint i = +c; // char -&gt; int \u200b\u8fd9\u662f\u200b\u663e\u793a\u200b\u8f6c\u6362\u200b\n\nconst int x = 10;\nint y = +x; // right y is copy of x even x is const\n</code></pre></p> <p><code>- unary minus</code> return the result of negating a (possible promoted) of the value of its operand; C++<pre><code>int i = 1024;\nint k = -i; // k = -1024\n\nbool b = true;\nbool b2 = -b; // b2 is true!\n// \u200b\u88ab\u200b\u9690\u5f0f\u200b\u7684\u200b\u8f6c\u6362\u200b\u4e3a\u200bint\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8ba1\u7b97\u200b\n</code></pre></p> <p><code>\\ division</code> a nonzero quotient is positive if the operands have the same sign and negative otherwise. the quotient to be rounded toward zero(truncated(\u200b\u622a\u65ad\u200b))   </p> <p><code>% modulus</code> : if m and n are integers and n is nonzero, then \\((m/n)*n + m%n\\) is equal to m.</p> <p>if m % n is nonzero, it has the same sign as m</p> C++<pre><code>21 % 6 = 3; 21 / 6 = 3;\n21 % 7 = 0; 21 / 7 = 3;\n-21 % -8 = -5; -21 / -8 = 2;\n21 % -5 = 1; 21 / -5 = -4;\n</code></pre>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#logical-and-relational-operators","title":"Logical and Relational Operators","text":"<p>Logical and Relational Operators</p> Operator Function ! logical NOT --- --- &lt; less than &lt;= less than or equal &gt; greater than &gt;= greater than or equal --- --- == equality != inequality --- --- &amp;&amp; logical AND <code>||</code> logical OR <p>Preference: <code>!</code> &gt; <code>&lt;, &lt;=, &gt;, &gt;=</code> &gt; <code>==, !=</code> &gt; <code>&amp;&amp;</code> &gt; <code>||</code> </p> <p>Associativity: <code>!</code> is right, either are <code>left</code></p> <p>The operands to these operators are rvalues and the result is rvalue.</p> <p><code>&amp;&amp;</code> and <code>short</code> short-circuit evaluation</p> <p><code>!</code> is return the inverse of the truth value of its operand</p> <p><code>&lt;, &lt;=, &gt;, &gt;=</code> return <code>true</code> or <code>false</code> so there are some mistakes C++<pre><code>if (i &lt; j &lt; k) // error : true if k is grater than 1! \nif (i &lt; j &amp;&amp; j &lt; k) // right\n</code></pre> </p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#assignment-operators","title":"Assignment Operators","text":"<p>Preference: lower precedence than the relational operators</p> <p>Associative: right</p> <p>The left-hand operand of an assignment operator must be a modifiable lvalue, the result of an assignment is the type of the left-hand operand, which is an lvalue. C++<pre><code>int i = 0, j = 0, k = 0; // initialization, not assignment\nconst int ci = i; // initialization, not assignment\n\n// each of these assignment s is illegal\n1024 = k;\ni + j = k;\nci = k; // error, ci is const(non modifiable)lvale\n\nk = 0; // type int, value 0\nk = 3.1415926; // type int, value 3\n\nint ival, jval;\nival = jval = 0; // right, each assigned 0\n</code></pre></p> <p>compound assignment operators: <code>+=,-=,/=,*=,%=,&gt;&gt;=,&lt;&lt;=,&amp;=,^=,|=</code>, C++<pre><code>int i = 10;\ni += 1; // i = i + 1;\n</code></pre></p> <p>Note</p> <p>When we use the compound assignment, the left-hand operand is evaluated only once.</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#increment-and-decrement-operators","title":"Increment and Decrement Operators","text":"<p>These operators require lvalue operands, the prefix form return the object itself as an lvalue, postfix form return a copy of the object's original value as an rvalue.</p> <p>the diff of prefix and postfix</p> C++<pre><code>int i = 0, j = 0;\nj = ++i; // j = 1, i = 1;\nj = i++; // j = 1, i = 2;\n</code></pre> <p>using prefix</p> <p>C++<pre><code>for (int i = 0; i &lt; n; ++i) // rather than i++\n</code></pre> \u200b\u524d\u7f00\u200b\u7248\u672c\u200b\u5e76\u200b\u4e0d\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u62f7\u8d1d\u200b,\u200b\u5728\u200b\u590d\u6742\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u4e2d\u200b\u8fd9\u79cd\u200b\u5c0f\u200b\u6280\u5de7\u200b\u80fd\u200b\u8282\u7701\u200b\u4e0d\u5c11\u200b\u5f00\u9500\u200b.</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#the-member-accsee-operators","title":"The Member Accsee Operators","text":"<p><code>.(dot)</code> and <code>-&gt;(arrow) == (*ptr).member</code> C++<pre><code>string s1 = \"a string\", *p = &amp;s1;\n\nauto n = s1.size(); // run the size member of the string s1\nn = (*p).size(); // run size on the object to which p pointer\n// deference(*) has lower preference of dot(.)\nn = p-&gt;size(); // equivalent to (*p).size()\n</code></pre></p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#the-conditional-operator","title":"The Conditional Operator","text":"<p><code>?:</code> simple if-else logic inside an expression. C++<pre><code>cond ? expr1 : expr2;\n</code></pre> if cond is true, then expr1 is evaluated, otherwise, expr 2 is evaluated. (\u200b\u5fc5\u7136\u200b\u5148\u200b\u6267\u884c\u200bcond,\u200b\u5728\u200b\u6267\u884c\u200b\u540e\u9762\u200b\u4e24\u4e2a\u200b\u8868\u8fbe\u5f0f\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b) C++<pre><code>string finalgrad = (grade &lt; 60) ? \"fail\" : \"pass\";\n</code></pre></p> <p>return value</p> <p>That result of the conditional operator is an lvalue if both expressions are lvalues or if they convert to a common lvalue type. </p> <p>Otherwise the result is an rvalue C++<pre><code>int a = 10, b = 20;\n(a &gt; b ? a : b) = 30; // right\n\nint x = 5;\ndouble y = 3.14;\nint &amp;ref = (x &gt; 0 ? x : static_cast&lt;int&gt;(y)); // double -&gt; int\n\nint c = (true ? 10 : 20) // right\n\nint d = 1;\nstd::string s = \"hello\";\nauto result = (d &gt; 0 ? d : s);// error, int -&gt; string and  string -&gt; int error!\n</code></pre></p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#the-bitwise-operators","title":"The Bitwise Operators","text":"<p>bitwise operators</p> Operator Function ~ bit-wise NOT &lt;&lt; left shift &gt;&gt; right shift &amp; bit-wise AND ^ bit-wise XOR <code>|</code> bit-wise OR <p>Warning</p> <p>\u200b\u82e5\u200b\u4e00\u4e2a\u200b\u64cd\u4f5c\u6570\u200b\u662f\u200b\u8d1f\u6570\u200b\u8fd9\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u67d0\u4e9b\u200b\u4f4d\u200b\u8fd0\u7b97\u200b(\u200b\u6bd4\u5982\u8bf4\u200b&gt;&gt;\u200b\u5bf9\u4e8e\u200b\u7b26\u53f7\u200b\u4f4d\u200b\u7684\u200b\u5904\u7406\u200b) \u200b\u5219\u200b\u5176\u200b\u7ed3\u679c\u200b\u4f9d\u8d56\u4e8e\u200b\u673a\u5668\u200b\u7c7b\u578b\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5728\u200bC/C++\u200b\u6807\u51c6\u200b\u4e0b\u200b\u662f\u200bUB\u200b\u7684\u200b</p> <p><code>Shift Operators(&lt;&lt; &gt;&gt;)</code> return a copy of left-hand operand with the bits shifted ad directed by the right-hand operand. \u26a0\ufe0f \u200b\u82e5\u200b\u53f3\u8fb9\u200b\u64cd\u4f5c\u6570\u200b\u7684\u200b\u6570\u503c\u200b\u5927\u4e8e\u200b\u5de6\u200b\u64cd\u4f5c\u6570\u200b\u7684\u200b\u4f4d\u6570\u200b,\u200b\u5219\u200b\u8be5\u200b\u884c\u4e3a\u200b\u4e5f\u200b\u662f\u200bUB</p> <p>Associative: left -&gt; right</p> <p>Overload</p> <p>I/O\u200b\u5e93\u200b\u91cd\u8f7d\u200b\u7684\u200b<code>&gt;&gt;</code> \u200b\u548c\u200b <code>&lt;&lt;</code>,\u200b\u5177\u6709\u200b\u548c\u200b\u4f4d\u200b\u8fd0\u7b97\u200b(\u200b\u5185\u7f6e\u200b\u542b\u4e49\u200b)\u200b\u76f8\u540c\u200b\u7684\u200b\u7ed3\u5408\u5f8b\u200b\u4e0e\u200b\u4f18\u5148\u7ea7\u200b. C++<pre><code>std::cout &lt;&lt; 42 + 10; // ok, + has higher precedence, so sum is printed\nstd::cout &lt;&lt; (10 &lt; 42); // ok\nstd::cout &lt;&lt; 10 &lt; 42; // error: attempt to compare cout to 42!\n</code></pre></p> <p><code>NOT(~)</code> return a new value with the bits of its operand inverted.</p> <ul> <li><code>char</code> will be promoted to <code>int</code> </li> </ul> <p><code>AND(&amp;) OR(|) XOR (^)</code> return a new value with the bit pattern composed from its two operands.</p> <ul> <li><code>char</code> will be promoted to <code>int</code></li> </ul>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#the-sizeof-operator","title":"The sizeof Operator","text":"<p>Associative: right -&gt; left</p> <p>The <code>sizeof</code> operator returns the size, in bytes, of an expression or type name.the result of <code>sizeof</code> is a constant expression of type <code>size_t</code>.</p> <p>Note</p> C++<pre><code>sizeof (type);\nsizeof expr;\n</code></pre> <p>The operator takes one of two forms.</p> <p>The <code>sizeof</code> not evaluate its operand, as <code>decltype</code>. </p> C++<pre><code>Sales_data data, *p;\nsizeof(Sales_data);\nsizeof data; // size of data's type, i.e. sizeof(Sales_data)\nsizeof p; // size of a pointer(\u200b\u57fa\u4e8e\u200b\u673a\u5668\u200b\u82e5\u200b\u662f\u200b64\u200b\u4f4d\u200b\u7cfb\u7edf\u200b,\u200b\u5219\u200b\u5927\u5c0f\u200b\u4e3a\u200b8B)\nsizeof *p; // size of the type to which op points,i.e. sizeof (Sales_data)\nsizeof data.revenue; // size of the type of Sales_data's revenue member\n// C++ 11:\u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u63d0\u4f9b\u200b\u5bf9\u8c61\u200b\u8bbf\u95ee\u200b\u6210\u5458\u200b(\u200b\u51fd\u6570\u200b)\nsizeof Sales_data::revenue; // alternative way to get the size of revenue\n</code></pre> <p>the result of sizeof</p> <ul> <li><code>char</code> or an expression of type <code>char</code> si guaranteed to be 1</li> <li>a <code>reference</code> type returns the size of an object of the referenced type</li> <li>a pointer returns the size needed hold a pointer</li> <li>an <code>array</code> is the size of the entire array.<ul> <li>that sizeof does not convent the array to a pointer C++<pre><code>constexpr size_t sz = sizeof(ia) / sizeof(*ia);\nint arr2[sz]; // ok sizeof return a constant expression\n</code></pre></li> </ul> </li> <li>a <code>string</code> or <code>vector</code> returns only the size of the fixed part of these types, it does not return the size used by the object's elements.</li> </ul>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#the-comma-operator","title":"The comma Operator(,)","text":"<p>The comma operator takes two operands, which it evaluates from left to right.</p> <ul> <li>left-hand will be discard when there are evaluated.</li> <li>the result of comma expression is the value of its right-hand expression</li> <li>the result is an lvalue if the right-hand operand is an lvaule</li> </ul>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#type-conversions","title":"Type Conversions","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#implicit-conversions","title":"Implicit Conversions","text":"<p>When implicit conversions occur</p> <ul> <li>In most expressions, values of integral types smaller than int are first promoted to an appropriate larger integral type.</li> <li>In conditions, non<code>bool</code> expressions are converted <code>bool</code></li> <li>In initializations, the initializer is converted to the type of the variable; in assignments, the right-hand operand is converted to the type of the left-hand</li> <li>IN arithmetic and relational expressions with operands of mixed types, the types are converted to a common type.</li> <li>conversions also happen during function cells.</li> </ul> <p>Pointer Conversions C++<pre><code>int ia[10];\nint *ip = ia; // convert ia to a pointer to the first element\n</code></pre></p> <p>Warning</p> <p>\u200b\u5c06\u200b\u6570\u7ec4\u540d\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6307\u9488\u200b\u6709\u200b\u51e0\u4e2a\u200b\u4f8b\u5916\u200b</p> <ul> <li><code>decltype</code> C++<pre><code>    int arr[10];\n    decltype(arr) var; // the type of var is int[10]\n</code></pre></li> <li><code>&amp;</code> C++<pre><code>int arr[10];\nint (*ptr)[10] = &amp;arr; // the type ptr is int(*)[10]\n</code></pre></li> <li><code>sizeof</code> C++<pre><code>int arr[10];\nconstexpr size_t size = sizeof(arr); // size is 10\n</code></pre></li> <li><code>typeid</code></li> <li>reference of array C++<pre><code>int arr[10];\nint (&amp;ref)[10] = arr; // ref is reference of arr\n</code></pre></li> </ul> <p>Some other pointer conversions</p> <ul> <li>A constant integral value of 0 and the literal nullptr can be converted to and pointer type C++<pre><code>int *p1 = 0; // 0 -&gt; int *\ndouble *p2 = nullptr; // nullptr -&gt; double *\n</code></pre></li> <li>a pointer to any non-const type can be converted to <code>void*</code> C++<pre><code>int x = 10;\nint *p_int = &amp;x;\nvoid *p_void = p_int; // int* -&gt; void*\n</code></pre></li> <li>a pointer to any type can be converted to a <code>const void*</code> C++<pre><code>const char *p_str = \"hello\";\nconst void *p_const_void = p_str; // const char * -&gt; const void *\n</code></pre></li> </ul>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#explicit-conversions","title":"Explicit Conversions","text":"<p><code>casts</code> ---&gt; explicit conversion C++<pre><code>cast-name&lt;type&gt; (expression);\n</code></pre> - cast-name: one of these   - <code>static_cast</code>    - <code>dynamic_cast</code> : will be cover in 19.2   - <code>const_cast</code>   - <code>reinterpret_cast</code> - type : the target type of the conversion - expression: the value to be cast</p> <p>Note</p> <p>If type is reference, then the result is an lvalue.</p> <p>static_cast \u200b\u9664\u53bb\u200b\u6d89\u53ca\u200b\u5e95\u5c42\u200bconst\u200b\u7684\u200b\u5f3a\u5236\u200b\u7c7b\u578b\u8f6c\u6362\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u7528\u200b C++<pre><code>int i, j;\ndouble slope = static_cast&lt;double&gt;(j) / i; // j:int-&gt;double, i: int -&gt; double\n</code></pre></p> <p>\u200b\u6ce8\u610f\u200b\u8fd9\u91cc\u200b<code>i\u3001j</code>\u200b\u7684\u200b\u7c7b\u578b\u8f6c\u6362\u200b\u662f\u200b\u4e0d\u540c\u200b\u7684\u200b, <code>j</code>\u200b\u662f\u200b\u88ab\u200b\u663e\u793a\u200b\u8f6c\u6362\u200b\u4e3a\u200bdouble\uff0c\u200b\u800c\u200b<code>i</code>\u200b\u662f\u200b\u7531\u4e8e\u200b\u9664\u6cd5\u200b\u9690\u5f0f\u200b\u63d0\u5347\u200b\u4e3a\u200b<code>double</code></p> <p>\u200b\u663e\u793a\u200b\u7c7b\u578b\u8f6c\u6362\u200b\u5373\u4f7f\u200b\u53d1\u751f\u200b\u7cbe\u5ea6\u200b\u635f\u5931\u200b\u7f16\u8bd1\u5668\u200b\u4e5f\u200b\u4e0d\u4f1a\u200b\u7ed9\u51fa\u200b\u8b66\u544a\u200b C++<pre><code>double d = 3.1415;\nvoid *p = &amp;d; // ok non const object can be stored in a void*\ndouble *dp = static_cast&lt;double*&gt; (p); // converts void * back to the original pointer type\n</code></pre></p> <p>const_cast changes only a low-level const in its operand C++<pre><code>const char *pc;\nchar *p = const_cast&lt;char*&gt; (pc); // ok: but writing through p is undefined\n</code></pre></p> <p>Only a const_cast may be used to change the constness of an expression C++<pre><code>const char *cp;\nchar *q = static_cast&lt;char*&gt; (cp); // error: static_cast can't cast away const\nstatic_const&lt;string&gt; (cp); // ok: converts string literal to string\nconst_cast&lt;string&gt;(cp); // error: const_cast only changes constness\n</code></pre></p> <p>reinterpret_cast(\u200b\u975e\u5e38\u200b\u5371\u9669\u200b\u4e00\u822c\u200b\u4e0d\u7528\u200b) a low-level reinterpretation(\u200b\u91cd\u65b0\u200b\u89e3\u91ca\u200b) of the bit pattern of its operands.</p> C++<pre><code>int *ip;\nchar *pc = reinterpret_cast&lt;char*&gt; (ip);\n</code></pre> <p>Warning</p> <p>\u200b\u5982\u679c\u200b\u771f\u7684\u200b\u5c06\u200bpc\u200b\u5f53\u200bchar*\u200b\u4f7f\u7528\u200b\u4f1a\u200b\u5bfc\u81f4\u200brun-time error C++<pre><code>string str(pc); // result in bizarre run-time behavior.\n</code></pre></p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#old-style-cast","title":"Old-style cast","text":"C++<pre><code>type (expr); // function-style cast notation\n(type) expr; // C-language-style cast notation\n</code></pre>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Expressions/#summarize","title":"Summarize","text":"<p>Abstract</p> <p>C++ \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u5957\u200b\u4e30\u5bcc\u200b\u7684\u200b\u8fd0\u7b97\u7b26\u200b\uff0c\u200b\u5e76\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u8fd9\u4e9b\u200b\u8fd0\u7b97\u7b26\u200b\u4f5c\u7528\u200b\u4e8e\u200b\u5185\u7f6e\u200b\u7c7b\u578b\u200b\u503c\u65f6\u200b\u7684\u200b\u884c\u4e3a\u200b\u3002\u200b\u6b64\u5916\u200b\uff0cC++ \u200b\u8fd8\u200b\u652f\u6301\u200b\u8fd0\u7b97\u7b26\u200b\u91cd\u8f7d\u200b\uff0c\u200b\u5141\u8bb8\u200b\u6211\u4eec\u200b\u4e3a\u200b\u81ea\u5b9a\u4e49\u200b\u7c7b\u200b\u7c7b\u578b\u5b9a\u4e49\u200b\u8fd0\u7b97\u7b26\u200b\u7684\u200b\u542b\u4e49\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u7b2c\u200b14\u200b\u7ae0\u200b\u5b66\u4e60\u200b\u5982\u4f55\u200b\u4e3a\u200b\u81ea\u5df1\u200b\u7684\u200b\u7c7b\u578b\u5b9a\u4e49\u200b\u8fd0\u7b97\u7b26\u200b\u3002\u200b\u200b</p> <p>\u200b\u200b\u8981\u200b\u7406\u89e3\u200b\u5305\u542b\u200b\u591a\u4e2a\u200b\u8fd0\u7b97\u7b26\u200b\u7684\u200b\u8868\u8fbe\u5f0f\u200b\uff0c\u200b\u5fc5\u987b\u200b\u638c\u63e1\u200b\u4f18\u5148\u7ea7\u200b\uff08precedence\uff09\u3001\u200b\u7ed3\u5408\u200b\u6027\u200b\uff08associativity\uff09\u200b\u548c\u200b\u64cd\u4f5c\u6570\u200b\u6c42\u503c\u200b\u987a\u5e8f\u200b\uff08order of operand evaluation\uff09\u3002\u200b\u6bcf\u4e2a\u200b\u8fd0\u7b97\u7b26\u200b\u90fd\u200b\u6709\u200b\u4f18\u5148\u7ea7\u200b\u548c\u200b\u7ed3\u5408\u200b\u6027\u200b\u3002\u200b\u4f18\u5148\u7ea7\u200b\u51b3\u5b9a\u200b\u4e86\u200b\u8fd0\u7b97\u7b26\u200b\u5728\u200b\u590d\u5408\u200b\u8868\u8fbe\u5f0f\u200b\u4e2d\u200b\u7684\u200b\u5206\u7ec4\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u800c\u200b\u7ed3\u5408\u200b\u6027\u5219\u200b\u51b3\u5b9a\u200b\u4e86\u200b\u76f8\u540c\u200b\u4f18\u5148\u7ea7\u200b\u7684\u200b\u8fd0\u7b97\u7b26\u200b\u5982\u4f55\u200b\u5206\u7ec4\u200b\u3002\u200b\u200b  \u200b \u200b\u5927\u591a\u6570\u200b\u8fd0\u7b97\u7b26\u200b\u4e0d\u4f1a\u200b\u89c4\u5b9a\u200b\u64cd\u4f5c\u6570\u200b\u7684\u200b\u6c42\u503c\u200b\u987a\u5e8f\u200b\uff1a\u200b\u7f16\u8bd1\u5668\u200b\u53ef\u4ee5\u200b\u81ea\u7531\u9009\u62e9\u200b\u5148\u200b\u8ba1\u7b97\u200b\u5de6\u200b\u64cd\u4f5c\u6570\u200b\u8fd8\u662f\u200b\u53f3\u200b\u64cd\u4f5c\u6570\u200b\u3002\u200b\u901a\u5e38\u200b\uff0c\u200b\u64cd\u4f5c\u6570\u200b\u7684\u200b\u6c42\u503c\u200b\u987a\u5e8f\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u5982\u679c\u200b\u4e24\u4e2a\u200b\u64cd\u4f5c\u6570\u200b\u5f15\u7528\u200b\u540c\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u64cd\u4f5c\u6570\u200b\u4fee\u6539\u200b\u4e86\u200b\u8be5\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u90a3\u4e48\u200b\u7a0b\u5e8f\u200b\u5c31\u200b\u4f1a\u200b\u5b58\u5728\u200b\u4e25\u91cd\u200b\u7684\u200b\u9519\u8bef\u200b\u2014\u2014\u200b\u800c\u4e14\u200b\u8fd9\u79cd\u200b\u9519\u8bef\u200b\u53ef\u80fd\u200b\u5f88\u96be\u200b\u88ab\u200b\u53d1\u73b0\u200b\u3002\u200b\u200b</p> <p>\u200b\u6700\u540e\u200b\uff0c\u200b\u64cd\u4f5c\u6570\u200b\u901a\u5e38\u200b\u4f1a\u200b\u4ece\u200b\u5176\u200b\u521d\u59cb\u200b\u7c7b\u578b\u200b\u81ea\u52a8\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u53e6\u200b\u4e00\u79cd\u200b\u76f8\u5173\u200b\u7c7b\u578b\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b\u6240\u6709\u200b\u8868\u8fbe\u5f0f\u200b\u4e2d\u200b\uff0c\u200b\u8f83\u200b\u5c0f\u200b\u7684\u200b\u6574\u578b\u200b\u4f1a\u200b\u88ab\u200b\u63d0\u5347\u200b\u4e3a\u200b\u8f83\u5927\u200b\u7684\u200b\u6574\u578b\u200b\u3002\u200b\u8f6c\u6362\u200b\u65e2\u200b\u9002\u7528\u200b\u4e8e\u200b\u5185\u7f6e\u200b\u7c7b\u578b\u200b\uff0c\u200b\u4e5f\u200b\u9002\u7528\u200b\u4e8e\u7c7b\u200b\u7c7b\u578b\u200b\u3002\u200b\u8f6c\u6362\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5f3a\u5236\u200b\u7c7b\u578b\u8f6c\u6362\u200b\uff08cast\uff09\u200b\u663e\u5f0f\u200b\u8fdb\u884c\u200b\u3002</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/","title":"Function","text":"<p>Abstract</p> <p>\u200b\u672c\u7ae0\u200b\u7684\u200b\u4e3b\u8981\u200b\u5185\u5bb9\u200b:\u200b\u51fd\u6570\u200b\u7684\u200b\u58f0\u660e\u200b\u4e0e\u200b\u5b9a\u4e49\u200b,\u200b\u6309\u503c\u200b\u4f20\u9012\u200b\u53c2\u6570\u200b,\u200b\u51fd\u6570\u200b\u7684\u200b\u91cd\u8f7d\u200b\u4ee5\u53ca\u200b\u7f16\u8bd1\u5668\u200b\u5982\u4f55\u200b\u9009\u62e9\u200b\u91cd\u8f7d\u200b\u51fd\u6570\u200b,\u200b\u548c\u200b\u51fd\u6570\u6307\u9488\u200b\u76f8\u5173\u200b\u7684\u200b \u200b\u5185\u5bb9\u200b.</p> <p>A Function is a block of code with a name. A function may take zero or more arguments and usually yields a result.</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#function-basics","title":"Function Basics","text":"C++<pre><code>// function declare\ntype_return fun_name(parameters);\n// function define\ntype_return fun_name(parameters) {\n    // body\n}\n\n// cell function\ntype_return n = fun_name(parameters); \n</code></pre> <p>factorial</p> C++<pre><code>// factorial of val is val * (val - 1) * (val - 2) * ... * 1\nint fact(int val) {\n    int ret = 1; // local variable to hold the result as we calculate it\n    while (val &gt; 1) \n        ret *= val--; // assign ret * val to ret and decrement val\n    return ret; // return the result\n}\n</code></pre> <p>C++<pre><code>// cell fact\nint j = fact(5);\n</code></pre> cell function will do two things:</p> <ul> <li>initializes the function's parameters from the corresponding arguments</li> <li>transfers control to thant function</li> </ul> <p>return also do two things:</p> <ul> <li>return the value(if any) in the return </li> <li>transfers control out of the called function back to the calling function</li> </ul> <p>\u200b\u51fd\u6570\u8c03\u7528\u200b\u65f6\u5019\u200b\u5fc5\u987b\u200b\u5177\u6709\u200b\u548c\u200b\u5b9a\u4e49\u200b\u76f8\u540c\u200b\u6570\u76ee\u200b\u7684\u200b\u53c2\u6570\u200b\u4e2a\u6570\u200b,\u200b\u7c7b\u578b\u200b\u53ef\u4ee5\u200b\u4e0d\u540c\u200b\u4f46\u200b\u5fc5\u987b\u200b\u80fd\u200b\u5b58\u5728\u200b\u67d0\u79cd\u200b\u8f6c\u6362\u200b\u5173\u7cfb\u200b. C++<pre><code>fact(\"hello\"); // error const char* has no conversion from to int\nfact(); // error: too less arguments\nfact(42, 10, 0)// error: too many arguments\nfact(3.124)// ok double -&gt; int\n</code></pre></p> <p>empty parameter list</p> C++<pre><code>void f1() {} // cpp style\nvoid fi(void) {} // c-style\n</code></pre>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#local-objects","title":"Local Objects","text":"<p>scope(\u200b\u4f5c\u7528\u57df\u200b) : the scope of a name is the part of the program's text in which that name is visible</p> <p>lifetime(\u200b\u751f\u547d\u5468\u671f\u200b) : the lifetime of an object is the time during the program's execution that the object exists.</p> <p>local static objects</p> <p>\u200b\u901a\u8fc7\u200b<code>static</code>\u200b\u58f0\u660e\u200b\u7684\u200b\u53d8\u91cf\u200b\u7b2c\u4e00\u6b21\u200b\u6267\u884c\u200b\u5b8c\u5176\u200b\u5b9a\u4e49\u200b\u540e\u200b,\u200b\u5176\u200b\u5e76\u200b\u4e0d\u4f1a\u200b\u968f\u7740\u200b\u51fd\u6570\u200b\u7ed3\u675f\u200b\u800c\u200b\u88ab\u200b\u9500\u6bc1\u200b\u800c\u662f\u200b\u76f4\u5230\u200b\u7a0b\u5e8f\u200b\u7ed3\u675f\u200b\u624d\u200b\u4f1a\u200b\u88ab\u200b\u9500\u6bc1\u200b. C++<pre><code>size_t count_calls() {\n    static size_t ctr = 0; // value will persist across calls\n    return ++ctr; \n}\n\nint main() {\n    for (size_t i = 0; i != 10; ++i) cout &lt;&lt; count_calls() &lt;&lt; endl;\n    return 0;\n}\n</code></pre> \u200b\u82e5\u200b<code>static</code>\u200b\u4e3a\u200b\u901a\u8fc7\u200b\u521d\u59cb\u5316\u200b\u5668\u200b\u521d\u59cb\u5316\u200b\u5219\u200b\u4f1a\u200b\u6267\u884c\u200b\u503c\u200b\u521d\u59cb\u5316\u200b\u800c\u200b\u975e\u200b\u9ed8\u8ba4\u200b\u521d\u59cb\u5316\u200b,\u200b\u6bd4\u5982\u8bf4\u200b\u5185\u7f6e\u200b\u7c7b\u578b\u200b<code>int\\double</code>\u200b\u7b49\u200b\u90fd\u200b\u4f1a\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\u4e3a\u200b<code>0</code></p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#function-declarationsfunction-prototype","title":"Function Declarations(Function Prototype \u200b\u51fd\u6570\u200b\u539f\u578b\u200b)","text":"<p>\u200b\u51fd\u6570\u200b\u58f0\u660e\u200b\u53ef\u4ee5\u200b\u7701\u53bb\u200b\u51fd\u6570\u200b\u4f53\u200b\u4e0e\u200b\u53c2\u6570\u200b\u5217\u8868\u200b\u7684\u200b\u540d\u5b57\u200b,\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b C++<pre><code>// \u200b\u867d\u7136\u200b\u53ef\u4ee5\u200b\u7701\u53bb\u200b\u4f46\u200b\u5982\u679c\u200b\u53ef\u80fd\u200b\u8fd8\u662f\u200b\u5199\u200b\u4e0a\u200b\u53c2\u6570\u200b\u540d\u5b57\u200b\u6bd4\u8f83\u200b\u597d\u200b \u200b\u4fbf\u4e8e\u200b\u7406\u89e3\u200b\nvoid print(vector&lt;int&gt;::const_iterator , vector&lt;int&gt;::const_iterator);\n</code></pre></p> <p>Best Practices</p> <p>The header that declares a function should be included in the source file that defines that function.</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#argument-passing","title":"Argument Passing","text":"<p>Note</p> <p>If the parameter is a reference then the parameter is bound to its argument(pass by reference), otherwise, the argument's value is copied(pass by value). </p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#passing-arguments-by-value","title":"Passing Arguments by value","text":"<p>\u200b\u6309\u503c\u200b\u4f20\u9012\u200b\u7684\u200b\u53c2\u6570\u200b\u5728\u200b\u51fd\u6570\u200b\u4f53\u5185\u200b\u7684\u200b\u4fee\u6539\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200b.\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b C++<pre><code>int n = 5;\nfact(n); \n// n = 5 not 0\n</code></pre></p> <p>Pointer Parameters \u200b\u4f20\u200b\u6307\u9488\u200b\u4e5f\u200b\u662f\u200b\u6309\u503c\u200b\u4f20\u9012\u200b,\u200b\u4f20\u5165\u200b\u662f\u200b\u6307\u9488\u200b\u7684\u200b\u526f\u672c\u200b,\u200b\u4f46\u200b\u7531\u4e8e\u200b\u6307\u9488\u200b\u7684\u200b\u7279\u6027\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u526f\u672c\u200b\u6307\u9488\u200b(\u200b\u95f4\u63a5\u200b)\u200b\u4fee\u6539\u200b\u539f\u6765\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u7684\u200b\u5bf9\u8c61\u200b. C++<pre><code>void reset(int *ip) {\n    *ip = 0; // changes the value of the object to which ip points\n    ip = nullptr; // changes only the local copy of ip\n}\n</code></pre></p> <p>Using reference rather than using pointer</p> <p>Programmers accustomed to programming in C often use pointer parameters to access objects outside a function. </p> <p>In C++, programmers generally use reference parameters instead.</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#passing-arguments-by-reference","title":"Passing Arguments by reference","text":"<p>C++<pre><code>void reset(int &amp;i) i = 0;\n</code></pre> \u200b\u4f20\u200b\u5f15\u7528\u200b\u53ef\u4ee5\u200b\u907f\u514d\u200b\u62f7\u8d1d\u200b\u53c2\u6570\u200b,\u200b\u5bf9\u4e8e\u200b\u5927\u578b\u200b\u6570\u636e\u7ed3\u6784\u200b\u53ef\u4ee5\u200b\u907f\u514d\u200b\u62f7\u8d1d\u200b\u7684\u200b\u5f00\u9500\u200b,\u200b\u751a\u81f3\u200b\u6709\u4e9b\u200b\u7c7b\u578b\u200b\u662f\u200b\u6ca1\u6709\u200b\u62f7\u8d1d\u200b\u9009\u9879\u200b\u7684\u200b\u53ea\u80fd\u200b\u4f20\u200b\u5e94\u7528\u200b. C++<pre><code>bool isShorter(const string &amp;s1, const string &amp;s2) return s1.size() &lt; s2.size();\n</code></pre></p> <p>Best Practices</p> <p>Reference parameters that are not changed inside a function should be references to const.</p> <p>Return Additional Information</p> <p>C++\u200b\u7684\u200b\u51fd\u6570\u200b\u901a\u5e38\u200b\u53ea\u80fd\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u53d8\u91cf\u200b,\u200b\u82e5\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u8fd4\u56de\u200b\u591a\u4e2a\u200b\u53d8\u91cf\u200b\u5462\u200b?\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u7ed3\u6784\u200b\u5c01\u88c5\u200b\u4f46\u200b\u901a\u8fc7\u200b\u4f20\u5165\u200b\u989d\u5916\u200b\u7684\u200b\u5f15\u7528\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8fbe\u5230\u200b\u540c\u6837\u200b\u7684\u200b\u76ee\u7684\u200b.</p> <p>\u200b\u6bd4\u5982\u8bf4\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u5b83\u200b\u80fd\u200b\u8fd4\u56de\u200b\u7ed9\u5b9a\u200b\u5b57\u7b26\u200b\u5728\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u7684\u200b\u9996\u200b\u4f4d\u7f6e\u200b,\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5176\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b,\u200b\u901a\u8fc7\u200b\u989d\u5916\u200b\u5f15\u5165\u200b\u4e00\u4e2a\u200b\u8bb0\u5f55\u200b\u8be5\u200b\u5143\u7d20\u200b\u51fa\u73b0\u200b\u6b21\u6570\u200b\u7684\u200b\u5f15\u7528\u200b\u6765\u200b\u4f20\u9012\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b.</p> C++<pre><code>string::size_type find_char(const string &amp;s, char c, string::size_type &amp;occurs) {\n    auto ret = s.size();\n    occurs = 0;\n    for (decltype(ret) i = 0; i != s.size(); ++i) {\n        if (s[i] == c) {\n            if (ret == s.size()) ret = i;\n            ++occurs;\n        }\n    }\n    return ret;\n}\n</code></pre>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#const-parameters-and-arguments","title":"<code>const</code> Parameters and Arguments","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#return-types-and-the-return-statement","title":"Return Types and the return Statement","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#overloaded-functions","title":"Overloaded Functions","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#features-for-specialized-uses","title":"Features for Specialized Uses","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#function-matching","title":"Function Matching","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#pointers-to-functions","title":"Pointers to Functions","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Function/#summer","title":"Summer","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/","title":"Statement","text":"<p>Abstract</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#statement-scope","title":"Statement Scope","text":"<p>C++<pre><code>int i = 0;\nwhile (int i = get_num())\n    std::cout &lt;&lt; i &lt;&lt; std::endl;\n// i = 0 either the return of get_num()\n</code></pre> <code>for\\while\\if\\switch</code>\u200b\u5177\u6709\u200b\u5757\u200b\u4f5c\u7528\u57df\u200b\u5176\u5185\u200b\u7684\u200b\u5143\u7d20\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\u4ece\u200b\u5176\u200b\u5728\u200b\u5757\u200b\u5185\u200b\u5b9a\u4e49\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5f00\u59cb\u200b,\u200b\u5230\u200b\u5757\u200b\u7ed3\u675f\u200b\u4e3a\u6b62\u200b. \u200b\u5982\u4e0a\u200b\u4f8b\u4e2d\u200b\u7684\u200bi\u200b\u6240\u793a\u200b</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#conditional-statements","title":"Conditional Statements","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#the-if-statement","title":"The <code>if</code> Statement","text":"C++<pre><code>if (condition)\n    statement;\n\nif (condition)\n    statement;\nelse if (condition)\n    statement;\n// ....\nelse \n    statement;\u00a0\n</code></pre>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#the-switch-statement","title":"THe <code>switch</code> Statement","text":"C++<pre><code>switch (condition) {\n    case constexpr:\n        statement;\n        break;\n    case constexpr:\n        statement;\n        break;\n    // .....\n    default:\n        statement;\n        break;\n}\n</code></pre> <p>Warning</p> <p>\u200b\u6ce8\u610f\u200b\u4e00\u4e2a\u200b\u7279\u6b8a\u200b\u7684\u200b\u5730\u65b9\u200b,switch\u200b\u53ef\u4ee5\u200b\u4e0d\u7528\u200b{}\u200b\u5708\u5b9a\u200b\u4e00\u4e2a\u200b\u5206\u652f\u200b\u7684\u200b\u533a\u57df\u200b,\u200b\u4f46\u200b\u5982\u679c\u200b\u8fd9\u4e2a\u200b\u533a\u57df\u200b\u5185\u200b\u5305\u542b\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u53d8\u91cf\u200b\u5219\u200b\u5fc5\u987b\u200b\u7528\u200b{}\u200b\u5f3a\u5236\u200b\u6307\u5b9a\u200b\u4f5c\u7528\u57df\u200b\u5426\u5219\u200b\u7f16\u8bd1\u5668\u200b\u4f1a\u200b\u62d2\u7edd\u200b\u7f16\u8bd1\u200b\u901a\u8fc7\u200b. C++<pre><code>// \u200b\u9519\u8bef\u200b\u7248\u672c\u200b:`\u200b\u63a7\u5236\u4f20\u8f93\u200b\u8df3\u8fc7\u200b\u5b9e\u4f8b\u200b\u5316\u200b`\ncase true:\n    // \u200b\u8fd9\u4e2a\u200b switch \u200b\u8bed\u53e5\u200b\u662f\u200b\u975e\u6cd5\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u4e9b\u200b\u521d\u59cb\u5316\u200b\u53ef\u80fd\u200b\u88ab\u200b\u8df3\u200b\u8fc7\u200b\n    string file_name;  // \u200b\u9519\u8bef\u200b\uff1a\u200b\u63a7\u5236\u6d41\u200b\u53ef\u80fd\u200b\u7ed5\u8fc7\u200b\u9690\u5f0f\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u53d8\u91cf\u200b\n    int ival = 0;      // \u200b\u9519\u8bef\u200b\uff1a\u200b\u63a7\u5236\u6d41\u200b\u53ef\u80fd\u200b\u7ed5\u8fc7\u200b\u663e\u5f0f\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u53d8\u91cf\u200b\n    int jval;          // \u200b\u6b63\u786e\u200b\uff1ajval \u200b\u672a\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\n    break;\ncase false:\n    // jval \u200b\u5728\u200b\u4f5c\u7528\u57df\u200b\u5185\u200b\uff0c\u200b\u4f46\u200b\u672a\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\n    jval = next_num();  // \u200b\u6b63\u786e\u200b\uff1a\u200b\u7ed9\u200b jval \u200b\u8d4b\u503c\u200b\n    if (file_name.empty())  // file_name \u200b\u5728\u200b\u4f5c\u7528\u57df\u200b\u5185\u200b\uff0c\u200b\u4f46\u200b\u672a\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\n        // ...\n\n// \u200b\u6b63\u786e\u200b\u7248\u672c\u200b\ncase true: {\n    string file_name = \"data.txt\";  // \u200b\u6b63\u786e\u200b\uff1a\u200b\u53d8\u91cf\u200b\u5728\u200b\u5757\u200b\u4f5c\u7528\u57df\u200b\u5185\u200b\n    int ival = 42;                 // \u200b\u6b63\u786e\u200b\uff1a\u200b\u521d\u59cb\u5316\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u540e\u7eed\u200b case\n    break;\n}\ncase false:\n    // file_name \u200b\u548c\u200b ival \u200b\u5728\u200b\u8fd9\u91cc\u200b\u4e0d\u200b\u53ef\u89c1\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u5f15\u53d1\u200b\u95ee\u9898\u200b\n    cout &lt;&lt; \"This is false case\" &lt;&lt; endl;\n    break;\n</code></pre></p> <p>Best Practices</p> <ul> <li> <p>Although it is not necessary to include a breakafter the last label of a switch, the safest course is to provide one. That way, if an additional caseis added later, the breakis already in place</p> </li> <li> <p>It can be useful to define a default label even if there is no work for the default case. Defining an empty default section indicates to subsequent readers that the case was considered.</p> </li> </ul>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#iterative-statements","title":"Iterative Statements","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#the-while-statement","title":"The <code>while</code> Statement","text":"C++<pre><code>while (condition)\n    statement\n</code></pre> <p>Note</p> <p>Variables defined in a while condition or while bod are created and destroyed on each  iterative</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#the-for-statement","title":"The <code>for</code> Statement","text":"C++<pre><code>for (init-statement; condition; expression)\n    statement\n</code></pre> <p>Note</p> <ul> <li><code>init-statement</code>: all variables must have the same base type. C++<pre><code>// remember the size of v and stop when we get the original last element\nfor (decltype(v.size()) i = 0, sz = v.size(); i != sz; ++i)\n    v.push_back(v[i]);\n</code></pre></li> </ul>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#range-for-statement-c11","title":"Range <code>for</code> Statement (C11)","text":"<p>C++<pre><code>for ( (&amp;)declaration : expression)\n    statement\n</code></pre> \u200b\u82e5\u200b\u9700\u8981\u200b\u5728\u200b\u5faa\u73af\u200b\u4e2d\u200b\u4fee\u6539\u200b\u5143\u7d20\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b<code>&amp;</code> C++<pre><code>std::vector&lt;int&gt; v = {0, 1, 2, ,3 ,4, 5, 6, 7, 8, 9};\nfor (auto &amp;r : v) r *= 2;\n// v = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18}\n</code></pre></p> <p>Warning</p> <p>\u200b\u5982\u200b\u5728\u200bvector\u200b\u4e2d\u200b\u6240\u8bf4\u200b\u7684\u200b\u4e00\u6837\u200b,\u200b\u4e0d\u80fd\u200b\u901a\u8fc7\u200b\u8303\u56f4\u200bfor\u200b\u5faa\u73af\u200b-\u200b\u589e\u52a0\u200b\u5143\u7d20\u200b(vector\\string).</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#the-do-while-statement","title":"The do while Statement","text":"C++<pre><code>do\n    statement\nwhile (condition);\n</code></pre>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#jump-statements","title":"Jump Statements","text":"<p><code>break</code>: \u200b\u7acb\u523b\u200b\u8df3\u51fa\u200b\u5f53\u524d\u200b\u7684\u200b\u5185\u5c42\u200b\u5faa\u73af\u200b,\u200b\u5230\u200b\u5916\u90e8\u200b\u4ee3\u7801\u200b C++<pre><code>for (int i = 0; i &lt; n; ++i)\n    for (int j = i; j &lt; n; ++j) \n        if (nums[i] &lt; nums[j]) break;\n        // ....\n</code></pre> \u200b\u53ea\u4f1a\u200b\u8df3\u51fa\u200b\u5185\u5c42\u200b\u7684\u200b\u4ee5\u200b<code>j</code>\u200b\u4e3a\u200b\u53d8\u91cf\u200b\u7684\u200b\u5faa\u73af\u200b,\u200b\u800c\u200b\u7acb\u523b\u200b\u6267\u884c\u200b<code>++i</code>\u200b\u6267\u884c\u200b\u4e0b\u6b21\u200b\u5faa\u73af\u200b</p> <p><code>continue</code>: \u200b\u7acb\u5373\u200b\u7ec8\u6b62\u200b\u672c\u6b21\u200b\u5faa\u73af\u200b\u6267\u884c\u200b\u4e0b\u6b21\u200b\u5faa\u73af\u200b C++<pre><code>for (int i = 0; i &lt; n; ++i)\n    for (int j = i; j &lt; n; ++j) \n        if (nums[i] &lt; nums[j]) continue;\n        // ....\n</code></pre> \u200b\u7ec8\u6b62\u200b\u672c\u6b21\u200b\u5faa\u73af\u200b\u6267\u884c\u200b<code>++j</code>\u200b\u800c\u200b\u975e\u200b<code>++i</code></p> <p><code>goto</code></p> C++<pre><code>goto label;\n// ....\nlabel: statement;\n</code></pre> <p>Note</p> <p>\u200b\u6ee5\u7528\u200b<code>goto</code>\u200b\u4f1a\u200b\u4f7f\u5f97\u200b\u7a0b\u5e8f\u200b\u53d8\u5f97\u200b\u96be\u4ee5\u200b\u7406\u89e3\u200b,\u200b\u4f46\u200b\u5408\u7406\u200b\u5229\u7528\u200b<code>goto</code>\u200b\u4e5f\u200b\u662f\u200b\u5f88\u200b\u597d\u200b\u7528\u200b\u7684\u200b.</p> <p>Warning</p> <p><code>goto</code>\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u5411\u524d\u200b\u8df3\u8fc7\u200b\u53d8\u91cf\u200b\u7684\u200b\u521d\u59cb\u5316\u200b C++<pre><code>goto end;\nint x = 10; // error: goto bypasses an initialized variable definition \nend:\n    // error: code here could use ix but the goto bypassed its declaration\n    ix = 42;\n</code></pre></p> <p>\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b<code>goto</code>\u200b\u5411\u200b\u540e\u200b\u8df3\u200b\u8fc7\u200b\u53d8\u91cf\u200b\u521d\u59cb\u5316\u200b,\u200b\u5e94\u8be5\u200b\u540e\u7eed\u200b\u53ef\u4ee5\u200b\u91cd\u65b0\u200b\u6784\u9020\u200b C++<pre><code>// right edition\nbegin:\n    int sz = get_size();\n    if (sz &lt;= 0) goto begin;\n</code></pre></p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#try-blocks-and-exception-handling","title":"<code>try</code> Blocks and Exception Handling","text":"<p>Exception: run-time anomalies - such as losing a database connectio nor encountering unexpected input - that exist outside the normal functioning of a program.</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#a-throw-expression","title":"A <code>throw</code> Expression","text":"C++<pre><code>throw error_style(string)\n</code></pre> C++<pre><code>if (item1.isbn() != item2.isbn()) throw runtime_error(\"Data must refer to same ISBN\");\nstd::cout &lt;&lt; item1 + item2 &lt;&lt; std::endl;\n</code></pre>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#the-try-block","title":"The <code>try</code> Block","text":"C++<pre><code>try {\n    program-statements\n} catch (exception-declaration) {\n    handler-statements\n} catch (exception-declaration) {\n    handler-statements\n} // ...\n</code></pre> <p>try</p> C++<pre><code>while (cin &gt;&gt; item1 &gt;&gt; item2) {\n    try {\n        // execute code that will add the two Sales_items\n        // if the addition fails, the code throws a runtime_error exception\n    } catch (runtime_error) {\n        // remind the user that the ISBNs must match and prompt for another pair\n        cout &lt;&lt; err.what()\n             &lt;&lt; \"\\nTry Again? Enter y or n\" &lt;&lt; endl;\n            char c;\n            cin &gt;&gt; c;\n            if (!cin || c == 'n) break;\n    }\n}\n</code></pre> <p>Output:</p> <p>Data must refer to same ISB</p> <p>Try Again? Enter y or n</p> <p>\u200b\u5f02\u5e38\u200b\u7684\u200b\u641c\u7d22\u200b\u987a\u5e8f\u200b\u662f\u200b\u9006\u5411\u200b\u7684\u200b,\u200b\u5bf9\u4e8e\u200b\u4e00\u4e2a\u200berror,\u200b\u901a\u8fc7\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u8c03\u7528\u200b\u7684\u200btry\u200b\u53bb\u200b\u5bfb\u627e\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u5bf9\u200b\u5e94\u8be5\u200berror\u200b\u7684\u200b\u6b65\u9aa4\u200b,\u200b\u82e5\u200b\u6ca1\u6709\u200b \u200b\u5219\u200b\u4ece\u200b\u5176\u200b\u7684\u200b\u8c03\u7528\u8005\u200b\u7684\u200btry\u200b\u5bfb\u627e\u200b,\u200b\u82e5\u200b\u4ecd\u7136\u200b\u6ca1\u6709\u200b\u5219\u200b\u7ee7\u7eed\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b\u94fe\u200b\u56de\u6eaf\u200b\u5bfb\u627e\u200b.</p> <p>\u200b\u82e5\u200b\u6700\u7ec8\u200b\u90fd\u200b\u6ca1\u200b\u627e\u5230\u200b,\u200b\u5219\u200b\u6267\u884c\u200b\u6807\u51c6\u200b\u5e93\u51fd\u6570\u200b<code>terminate</code></p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#standard-exceptions","title":"Standard Exceptions","text":"<p>Standard Exceptions headers</p> <ul> <li><code>exception</code> <ul> <li>\u200b\u5b9a\u4e49\u200b\u7c7b\u200b<code>exception</code>\u200b\u7c7b\u200b \u200b\u4ec5\u200b\u8868\u9762\u200b\u4e86\u200b\u53d1\u751f\u200b\u4e86\u200b\u5f02\u5e38\u200b\u4f46\u200b\u4e0d\u200b\u63d0\u4f9b\u200b\u4efb\u4f55\u200b\u989d\u5916\u200b\u7684\u200b\u4fe1\u606f\u200b.</li> </ul> </li> <li><code>stdexcept</code> </li> <li><code>bad_alloc</code> will cover 12.12</li> <li><code>type_info</code> will cover 19.2</li> </ul> <p>\u200b\u5f02\u5e38\u200b\u5e93\u80fd\u200b\u505a\u200b\u7684\u200b\u64cd\u4f5c\u200b\u6bd4\u8f83\u200b\u6709\u9650\u200b,\u200b\u53ea\u80fd\u200b\u521b\u5efa\u200b\\\u200b\u62f7\u8d1d\u200b\\\u200b\u8d4b\u503c\u200b\u4efb\u610f\u200b\u5f02\u5e38\u200b\u7c7b\u578b\u200b\u7684\u200b\u5bf9\u8c61\u200b.</p> <p>\u200b\u521d\u59cb\u5316\u200b\u9650\u5236\u200b</p> <p>\u200b\u5bf9\u4e8e\u200b<code>exception\\bad_alloc\u200b\u548c\u200bbad_cast</code>\u200b\u8fd9\u200b\u4e09\u79cd\u200b\u7c7b\u578b\u200b\u7684\u200b\u5f02\u5e38\u200b\u53ea\u80fd\u200b\u8fdb\u884c\u200b\u9ed8\u8ba4\u200b\u521d\u59cb\u5316\u200b</p> <p>\u200b\u800c\u200b\u5bf9\u4e8e\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u7684\u200b\u5f02\u5e38\u200b\u6bd4\u5982\u8bf4\u200b\u4e0a\u9762\u200b\u7528\u8fc7\u200b\u7684\u200b<code>runtime_error</code>\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\u6216\u8005\u200bC-style\u200b\u98ce\u683c\u200b\u7684\u200b\u5b57\u7b26\u200b\u6570\u7ec4\u200b\u521d\u59cb\u5316\u200b.</p> <p>what()\u200b\u6210\u5458\u200b\u51fd\u6570\u200b,\u200b\u6bcf\u4e2a\u200b\u5f02\u5e38\u200b\u7c7b\u200b\u90fd\u200b\u4f1a\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b<code>what()</code>\u200b\u6210\u5458\u200b\u51fd\u6570\u200b</p> <ul> <li>\u200b\u8be5\u200b\u51fd\u6570\u200b\u65e0\u200b\u53c2\u6570\u200b</li> <li>\u200b\u8fd4\u56de\u200b\u6307\u5411\u200bC-style\u200b\u98ce\u683c\u200b\u5b57\u7b26\u200b\u6570\u7ec4\u200b\u7684\u200b<code>const char*</code>\u200b\u6307\u9488\u200b</li> <li>\u200b\u8be5\u200b\u5b57\u7b26\u4e32\u200b\u7528\u4e8e\u200b\u63d0\u4f9b\u200b\u5173\u4e8e\u200b\u5f02\u5e38\u200b\u7684\u200b\u57fa\u672c\u200b\u6587\u672c\u200b\u63cf\u8ff0\u200b</li> </ul> <p>what()\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u5185\u5bb9\u200b\u89c4\u5219\u200b</p> <ul> <li>\u200b\u5bf9\u4e8e\u200b\u652f\u6301\u200b\u5b57\u7b26\u4e32\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u5f02\u5e38\u200b\u8fd4\u56de\u200b\u521d\u59cb\u5316\u200b\u65f6\u5019\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b</li> <li>\u200b\u5bf9\u4e8e\u200b\u4e0d\u200b\u652f\u6301\u200b\u5b57\u7b26\u4e32\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u5f02\u5e38\u200b,\u200b\u8fd4\u56de\u200b\u7684\u200b\u5185\u5bb9\u200b\u7531\u200b\u7f16\u8bd1\u5668\u200b\u51b3\u5b9a\u200b</li> </ul>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Statements/#summer","title":"Summer","text":"<p>C++\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5185\u7f6e\u200b\u8bed\u53e5\u200b\u5e76\u4e0d\u591a\u200b,\u200b\u57fa\u672c\u200b\u53ef\u4ee5\u200b\u5206\u4e3a\u200b\u5982\u4e0b\u200b\u51e0\u7c7b\u200b 1. \u200b\u6d41\u7a0b\u200b\u63a7\u5236\u200b\u8bed\u53e5\u200b     - \u200b\u5faa\u73af\u200b\u8bed\u53e5\u200b<code>for\\while\\do-while</code>\u200b\u63d0\u4f9b\u200b\u5faa\u73af\u200b\u6267\u884c\u200b\u7684\u200b\u80fd\u529b\u200b     - \u200b\u6761\u4ef6\u200b\u8bed\u53e5\u200b(\u200b\u5206\u652f\u200b\u8df3\u8f6c\u200b)<code>if\\switch</code> \u200b\u5b9e\u73b0\u200b\u6761\u4ef6\u200b\u5206\u652f\u200b\u6267\u884c\u200b     - \u200b\u5faa\u73af\u200b\u63a7\u5236\u200b\u8bed\u53e5\u200b<code>break\\continue</code>      - \u200b\u8df3\u8f6c\u200b\u8bed\u53e5\u200b<code>goto</code> 2. \u200b\u5f02\u5e38\u200b\u5904\u7406\u200b\u8bed\u53e5\u200b     - <code>try</code>\u200b\u548c\u200b<code>catch</code>     - <code>throw</code> 3. \u200b\u51fd\u6570\u200b\u7ec8\u6b62\u200b\u8bed\u53e5\u200b     - <code>return</code> 4. \u200b\u5176\u4ed6\u200b\u57fa\u672c\u200b\u8bed\u53e5\u200b     - \u200b\u8868\u8fbe\u5f0f\u200b\u8bed\u53e5\u200b     - \u200b\u58f0\u660e\u200b\u8bed\u53e5\u200b</p>","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Strings%20Vectors%20and%20Arrays/","title":"Strings Vectors and Arrays","text":"","tags":["C++ Primer"]},{"location":"CS/C%2B%2B%20Language/C%2B%2B_Primer/Strings%20Vectors%20and%20Arrays/#namespace-using-declarations","title":"Namespace <code>using</code> Declarations (\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b\u4f7f\u7528\u200b\u58f0\u660e\u200b)","text":"","tags":["C++ Primer"]},{"location":"CS/Course/CS168-The-Modern-Internet/Applications/","title":"Application","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Applications/#dns","title":"DNS","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Applications/#http","title":"HTTP","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Beyond%20Client-Server/","title":"Beyond Client-Server","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Beyond%20Client-Server/#multicast","title":"Multicast","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Beyond%20Client-Server/#collectives","title":"Collectives","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Datacenters/","title":"Datacenters","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Datacenters/#topology","title":"Topology","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Datacenters/#routing","title":"Routing","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Datacenters/#sdn-and-host-networking","title":"SDN and Host Networking","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/","title":"Discussion","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-1-intro-i","title":"Dis 1 : Intro I","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-2-intro-ii","title":"Dis 2 : Intro II","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-3-routing-i","title":"Dis 3 : Routing I","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-4-routing-ii","title":"Dis 4 : Routing II","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-5-bgp","title":"Dis 5 : BGP","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-6-tcp","title":"Dis 6 : TCP","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-7-congestion-control","title":"Dis 7 : Congestion Control","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-8-dns-http-ethernet-stp","title":"Dis 8 : DNS, HTTP, Ethernet, STP","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-9-arp-dhcp-nat","title":"Dis 9 : ARP, DHCP, NAT","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-10-datacenters-sdn","title":"Dis 10 : Datacenters &amp; SDN","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-11-host-networking","title":"Dis 11 : Host Networking","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Discussion/#dis-12-multicast-and-collectives","title":"Dis 12 : Multicast and Collectives","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/End-to-End/","title":"End-to-End","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/End-to-End/#ethernet-stp","title":"Ethernet STP","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/End-to-End/#arp-dhcp-nat-tls","title":"ARP, DHCP, NAT, TLS","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/","title":"Introduction to the Internet","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#intro-1layers-of-the-internet","title":"Intro 1:Layers of the Internet","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#what-is-the-internet","title":"What is the Internet?","text":"<p>protocols:specify how entities exchange in communication.</p> <ul> <li>syntax:How to do  </li> <li>semantics:what to do</li> </ul>","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#layers-of-the-internettcpip-5-layers","title":"Layers of the Internet(TCP/IP 5 layers)","text":"<p>Physical Layer --- Link Layer --- Internet Layer --- Transport --- Application</p> <p></p>","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#physical-layer","title":"Physical Layer","text":"<p>Core function</p> <p>Transmits raw bit streams over physical media (cable/fiber/wireless).</p>","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#link-layer","title":"Link Layer","text":"<p>Core function</p> <p>Reliably delivers frames between directly connected nodes (e.g., Ethernet/Wi-Fi).</p>","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#internet-layer","title":"Internet Layer","text":"<p>Core function</p> <p>Routes and forwards IP packets across networks (e.g., router operations).</p> <p></p> <p>End hosts: machines(e.g. serves, laptops, phones)communicating over the Internet.</p> <p>Switch(aka router): a machine that isn't sending or receiving its own data, but exists to help the end hosts communicate withe each other.</p>","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#transport","title":"Transport","text":"<p>Core function</p> <p>Provides end-to-end data delivery (TCP reliable/UDP efficient).</p>","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#application","title":"Application","text":"<p>Core function</p> <p>Offers network services to applications (e.g., HTTP/DNS/Email).</p>","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#headers","title":"Headers","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#intro-2design-principles","title":"Intro 2:Design Principles","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Introduction%20to%20the%20Internet/#intro-3links","title":"Intro 3:Links","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Project/","title":"Project","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Project/#project-1-traceroute","title":"Project 1 : Traceroute","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Project/#project-2-routing","title":"Project 2 : Routing","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Project/#project-3-transport","title":"Project 3 : Transport","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Routing/","title":"Routing","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Routing/#principles","title":"Principles","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Routing/#distance-vector","title":"Distance-vector","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Routing/#like-state-addressing","title":"Like-state, Addressing","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Routing/#routers","title":"Routers","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Routing/#bgp","title":"BGP","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Special%20Topics/","title":"Special Topics","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Special%20Topics/#wireless","title":"Wireless","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Special%20Topics/#cellular","title":"Cellular","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Transport/","title":"Transport","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Transport/#tcp","title":"TCP","text":"","tags":["CS168"]},{"location":"CS/Course/CS168-The-Modern-Internet/Transport/#congestion-control","title":"Congestion Control","text":"","tags":["CS168"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Bayes%20Nets/","title":"Bayes Nets","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Bayes%20Nets/#bayes-nets-representation","title":"Bayes Nets: Representation","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Bayes%20Nets/#bayes-nets-conditional-independence","title":"Bayes Nets: Conditional Independence","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Bayes%20Nets/#bayes-nets-sampling","title":"Bayes Nets: Sampling","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/CSPs/","title":"GSPs","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/CSPs/#csps-i","title":"CSPs I","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/CSPs/#csps-ii","title":"CSPs II","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Descision%20Network%20and%20VPIs/","title":"Decision Networks and VPIs","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Discussion/","title":"Discussion","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Games/","title":"Games","text":"","tags":["AI","CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Games/#games-treesminimax","title":"Games Trees:Minimax","text":"","tags":["AI","CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Games/#game-trees-expectimax-utilities-multiplayer","title":"Game Trees: Expectimax, Utilities, Multiplayer","text":"","tags":["AI","CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/HMMs/","title":"HMMs","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/HMMs/#hmms_1","title":"HMMs","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/HMMs/#particle-filtering-and-applications-of-hmms","title":"Particle Filtering and Applications of HMMs","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Introduction/","title":"Introduction to Artificial Intelligence","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Introduction/#agents","title":"Agents","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Logic/","title":"Logic","text":""},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Logic/#tags-cs188","title":"tags: [CS188]","text":""},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/MDPs/","title":"MDPs","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/MDPs/#mdps-i","title":"MDPs I","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/MDPs/#mdps-ii","title":"MDPs II","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/ML/","title":"ML","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/ML/#ml-i","title":"ML I","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/ML/#ml-ii","title":"ML II","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/ML/#ml-iii","title":"ML III","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/RL/","title":"RL","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/RL/#rl-i","title":"RL I","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/RL/#rl-ii","title":"RL II","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Search/","title":"Search","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Search/#uninformed-search","title":"Uninformed Search","text":"","tags":["CS188"]},{"location":"CS/Course/CS188%20Introduction%20to%20Artificial%20Intelligence/Search/#a-search-and-heuristics","title":"A* Search and Heuristics","text":"","tags":["CS188"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Projects/","title":"Projects","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Projects/#project-1-hog-games","title":"Project 1 : Hog Games","text":"<ul> <li> \u200b\u5b8c\u6210\u200b \u200b\u8fd9\u4e2a\u200b\u9879\u76ee\u200b\u672c\u8eab\u200b\u6ca1\u6709\u200b\u9047\u5230\u200b\u5565\u200b\u95ee\u9898\u200b</li> </ul>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Projects/#project-2-cats","title":"Project 2 : Cats","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Projects/#project-3-ants","title":"Project 3 : Ants","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Projects/#project-4-scheme","title":"Project 4 : Scheme","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%201/","title":"Week 1","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>\u200b\u638c\u63e1\u200bPython\u200b\u57fa\u672c\u200b\u8bed\u6cd5\u200b\u548c\u200b\u7f16\u7a0b\u200b\u8303\u5f0f\u200b</p> <p>\u200b\u7406\u89e3\u200b\u51fd\u6570\u200b\u4f5c\u4e3a\u200b\u4e00\u7b49\u200b\u516c\u6c11\u200b\u7684\u200b\u6982\u5ff5\u200b(\u200b\u53ef\u200b\u7ed1\u5b9a\u200b\u3001\u200b\u4f20\u9012\u200b\u3001\u200b\u8fd4\u56de\u200b\u548c\u200b\u5305\u542b\u200b\u5728\u200b\u6570\u636e\u7ed3\u6784\u200b\u4e2d\u200b)</p> <p>\u200b\u5b66\u4e60\u200b\u63a7\u5236\u7ed3\u6784\u200b(\u200b\u6761\u4ef6\u200b\u8bed\u53e5\u200b\u548c\u200b\u8fed\u4ee3\u200b)\u200b\u7684\u200b\u4f7f\u7528\u200b</p> <p>\u200b\u7406\u89e3\u200b\u9ad8\u9636\u200b\u51fd\u6570\u200b\u7684\u200b\u6982\u5ff5\u200b\u548c\u200b\u5e94\u7528\u200b</p> <p>\u200b\u638c\u63e1\u200b\u51fd\u6570\u200b\u5f0f\u200b\u7f16\u7a0b\u200b\u7684\u200b\u57fa\u672c\u200b\u6280\u672f\u200b(\u200b\u5982\u200blambda\u200b\u8868\u8fbe\u5f0f\u200b\u548c\u200b\u67ef\u91cc\u5316\u200b)</p> <p>\u200b\u719f\u6089\u200bPython\u200b\u7684\u200b\u6587\u6863\u200b\u6d4b\u8bd5\u200b\u548c\u200b\u8c03\u8bd5\u200b\u65b9\u6cd5\u200b</p>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%201/#functions","title":"Functions","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%201/#reading-textbook-ch11-13","title":"Reading TextBook (Ch1.1 - 1.3)","text":"<p>computer programs consist of instructions to either computer some value or carry out some action.</p> <p>statements typically describe actions.</p> <p>expression typically describe computations.</p> <p>Function: function encapsulate logic that manipulates data.</p> <p>Object: An object seamlessly bundles together data and the logic that manipulates that data in a way that manages the complexity of both.</p> <p>Interpreters: A program that implements such a procedure, evaluating compound expressions, is called an interpreter.</p> <p>Note</p> <p>programs must be written for people to read, and only incidentally for machines to execute.</p> <p>Every one powerful language has three such mechanisms:</p> <p>primitive expression and statements(\u200b\u57fa\u672c\u200b\u8868\u8fbe\u5f0f\u200b\u4e0e\u200b\u8bed\u53e5\u200b):represent the simplest building blocks that the language provides</p> <p>means of combination(\u200b\u7ec4\u5408\u200b\u7684\u200b\u65b9\u6cd5\u200b): compound elements are built from simpler ones,</p> <p>means of abstraction(\u200b\u62bd\u8c61\u200b\u7684\u200b\u65b9\u6cd5\u200b):  compound elements can be named and manipulated as units</p> <p>Python<pre><code># call expression\n&gt;&gt;&gt; max(7.5, 9.5)\n9.5\n</code></pre> max: Operator, {(7.5, 9.5)}: Operands</p> Python<pre><code># Important Library Functions\nfor math import sqrt\nsqrt(256)\n# output 16.0\n</code></pre> <p>Python 3 Library Docs</p> <p>Python3 Library Docs</p> <p>Python<pre><code># assignment statement\n&gt;&gt;&gt; radius = 10\n&gt;&gt;&gt; radius \n10\n&gt;&gt;&gt; 2 * radius\n20\n</code></pre> Assignment statement(\u200b\u8d4b\u503c\u200b\u8bed\u53e5\u200b): establish new bindings Python<pre><code># name also can bind by import\n&gt;&gt;&gt; from math import pi\n&gt;&gt;&gt; pi * 71 / 233\n1.0002380197528042\n</code></pre></p> <p>environment(\u200b\u73af\u5883\u200b): some structure keep track of the names, values and bindings</p> <p>name also can be bound to function, for example <code>max</code> Python<pre><code>&gt;&gt;&gt; max\n&lt;build-in function max&gt;\n\n# can change the new relation \n&gt;&gt;&gt; f = max\n&gt;&gt;&gt; f\n&lt;build-in function max&gt;\n&gt;&gt;&gt; f(2, 3, 4)\n4\n# also can change the bind\n&gt;&gt;&gt; f = 2\n&gt;&gt;&gt; f\n2\n</code></pre></p> <p>multiple values to multiple names</p> Python<pre><code>area, circumference = pi * radius * radius, 2 * pi * radius\n</code></pre> <p>Evaluating Nested Expression : recursion, and expression tree Python<pre><code>&gt;&gt;&gt; mul(add(2, mul(4, 6)), add(3, 5))\n208\n</code></pre> </p> <p>pure functions(\u200b\u7eaf\u200b\u51fd\u6570\u200b) Functions have some input and return some output, no effects beyond returning a value, and must return the same value when called twice withe the same arguments.</p> <p></p> <p>no pure functions(\u200b\u975e\u7eaf\u200b\u51fd\u6570\u200b) In addition to returning a value, applying a non-pure function can generate side effects, which make some change to the state of the interpreter or computer.</p> <p> Python<pre><code>&gt;&gt;&gt; abs(1)\n1  # abs is pure function\n&gt;&gt;&gt; print(1, 2, 3) # print is not-pure function \n1 2 3 #the effect is print 1 2 3\n&gt;&gt;&gt; print(print(1), print(2))\n1 # print(1) print 1\n2 # print(2) print 2\nNone None # the print return None, and print(None, None) print None None\n</code></pre></p> Python<pre><code># defining new function -- square\n&gt;&gt;&gt; def square(x):\n        return mul(x, x)\n&gt;&gt;&gt; square\n&lt;function square at 0x1038cb240&gt;\n# as build-in function cell \n&gt;&gt;&gt; square(4)\n16\n&gt;&gt;&gt; square(10)\n100\n</code></pre> <p>Python<pre><code># can use self-function to build other function, as build-in function\n&gt;&gt;&gt; def sum_squares(x, y):\n            return add(square(x), square(y))\n&gt;&gt;&gt; sum_squares(3, 4)\n25\n</code></pre> function signatures(\u200b\u51fd\u6570\u200b\u7b7e\u540d\u200b) Functions differ in the number of arguments that they are allowed to take Python<pre><code># function signatures also name function definition\ndef square(x):\n    return mul(x, x)\n</code></pre></p> <p>name evaluation(\u200b\u540d\u5b57\u200b\u6c42\u503c\u200b\u89c4\u5219\u200b) A name evaluates to the value bound to that name in the earliest frame of the current environment in which that name is found.</p> <p>Using python Tutor</p> <p>python tutor</p> <p>Parameters</p> <p>the parameter names of a function must remain local to the body of the function Python<pre><code>def square(x):\n    return mul(x, x)\n# that is same as square(y)\ndef square(y):\n    return mul(y, y)\n</code></pre></p> <p>PEP 8 Style Guide for Python code</p> <p>PEP 8 Style Guide for Python code</p>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%201/#control","title":"Control","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%201/#reading-textbook-ch-14-15","title":"Reading TextBook (ch 1.4 - 1.5)","text":"<p>Designing Functions</p> <ul> <li>Each function should have exactly one job</li> <li>Don't repeat yourself is a central tenet of software engineering.</li> <li>Function should be defined generally</li> </ul> <p>Documentation(\u200b\u6587\u6863\u200b\u8bf4\u660e\u200b): The first line describes the job of the function in one line. The following lines can describe arguments and clarify the behavior of the function</p> Python<pre><code>def pressure(v, t, n):\n    \"\"\"Computer the pressure in pascals of an ideal gas.\n    Applies the ideas gas law : http://en.wikipedia.org/wiki/Ideal_gas_law\n\n    v -- volume of gas, in cubic meters\n    t -- absolute temperature in degrees kelvin\n    n -- particles of gas\n    \"\"\"\n    k = 1.38e-23 # Boltzmann's constant\n    return n * k * t / v\n</code></pre> <p>help</p> Python<pre><code>&gt;&gt;&gt; help(pressure) # return documentation\nComputer the pressure in pascals of an ideal gas.\nApplies the ideas gas law : http://en.wikipedia.org/wiki/Ideal_gas_law\n\nv -- volume of gas, in cubic meters\nt -- absolute temperature in degrees kelvin\nn -- particles of gas\n</code></pre> <p>Default Argument Values(\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u503c\u200b) When calling that function, arguments whit default values are optional,if they are not provided, then the default value is bound to the formal parameter name instead.</p> <p>Python<pre><code># n is default argument\ndef pressure(v, t, n = 6.022e23):\n    \"\"\"Computer the pressure in pascals of an ideal gas.\n    Applies the ideas gas law : http://en.wikipedia.org/wiki/Ideal_gas_law\n\n    v -- volume of gas, in cubic meters\n    t -- absolute temperature in degrees kelvin\n    n -- particles of gas\n    \"\"\"\n    k = 1.38e-23 # Boltzmann's constant\n    return n * k * t / v\n</code></pre> Conditional Statements(\u200b\u6761\u4ef6\u200b\u8bed\u53e5\u200b) &amp; Boolean values(\u200b\u5e03\u5c14\u200b\u53d8\u91cf\u200b)</p> <ul> <li>python build-in Boolean values : <code>True</code> or <code>False</code></li> </ul> <p>boolean return value</p> Python<pre><code>&gt;&gt;&gt; True and False\nTrue\n&gt;&gt;&gt; True and 41\n41\n&gt;&gt;&gt; False and 41\nFalse\n&gt;&gt;&gt; 0 or False\nFalse\n&gt;&gt;&gt; False or 0\n0\n&gt;&gt;&gt; 21 or True\n21\n&gt;&gt;&gt; True or 21\nTrue\n</code></pre> <p>Python<pre><code># if - else if - else\nif &lt;expression&gt;:\n    &lt;suite&gt;\nelif &lt;expression&gt;:\n    &lt;suite&gt;\nelse :\n    &lt;suite&gt;\n# Boolean values\n&gt;&gt;&gt; 4 &lt; 2\nFalse\n&gt;&gt;&gt; 5 &gt;= 5\nTrue\n</code></pre> Boolean operators(\u200b\u5e03\u5c14\u200b\u8fd0\u7b97\u7b26\u200b) <code>and</code> <code>or</code> <code>not</code> Python<pre><code># boolean operators\n&gt;&gt;&gt; True and False\nFalse\n&gt;&gt;&gt; True or False\nTrue\n&gt;&gt;&gt; not True\nFalse\n</code></pre></p> <p>short-circuiting</p> <p><code>and</code> <code>or</code> Python<pre><code>&lt;left&gt; and &lt;right&gt;\n&lt;left&gt; or &lt;right&gt;\n</code></pre></p> <ul> <li>Evaluate the sub-expression  <li>if the left is true, then the expression value is true (or)</li> <li>if the left is false, then the expression value is false (and)</li> <li>otherwise, the expression is the result of evaluate the sub-expression right</li> <p>Tip</p> <p>Functions that perform comparisons and return boolean values typically begin with is, not followed by an underscore(e.g., isfinite, isdigit, isinstance, etc.)</p> <p>Iteration(\u200b\u8fed\u4ee3\u200b\u8bed\u53e5\u200b) --- which Python<pre><code>while &lt;expression&gt;:\n    &lt;suite&gt;\n</code></pre></p> <p>assert(\u200b\u65ad\u8a00\u200b) use assert statements to verify expectations, such as the output of a function being tested.</p> Python<pre><code># assert is True, nothing will be done\nassert fib(8) == 13, 'The 8th Fibonacci number should be 13' # when assert is False, the 'xxxx' will be printed\n</code></pre> <p>Doctest(\u200b\u6587\u6863\u200b\u6d4b\u8bd5\u200b) Python provides a convenient method for placing simple tests directly in the docstring of a function.  Python<pre><code>def sum_naturals(n):\n    \"\"\"Return the sum of the first n natural numbers.\n\n    &gt;&gt;&gt; sum_naturals(10)\n    55\n    &gt;&gt;&gt; sum_naturals(100)\n    5050\n    \"\"\"\n    total, k = 0, 1\n    while k &lt;= n:\n        total, k = total + k, k + 1\n    return total\n# using doctest module to run documentation test\n&gt;&gt;&gt; from doctest import testmod\n&gt;&gt;&gt; testmod()\nTestResults(failed=0, attempted=2)\n</code></pre></p> Bash<pre><code># using doctest to run all document test of a python file\npython3 -m doctest &lt;python_source_file&gt;\n</code></pre>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%201/#higher-order-functions","title":"Higher-Order Functions","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%201/#reading-textbook-ch-16","title":"Reading TextBook (ch 1.6)","text":"<p>Functions as arguments(\u200b\u51fd\u6570\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b) Python<pre><code>def summation(n, term)\n    \"\"\"\n    term -- function as argument\n    \"\"\"\n    total, k = 0, 1\n    while k &lt;= n:\n        total, k = total + term(k), k + 1\n    return total\n\ndef cube(x):\n    return x**3\n\ndef sum_cubes(n)\n    return summation(n, cube) \n\nresult = sum_cubes(3)\n</code></pre> nested definitions(\u200b\u5d4c\u5957\u200b\u5b9a\u4e49\u200b) &amp; Lexical scope(\u200b\u8bcd\u6cd5\u200b\u4f5c\u7528\u57df\u200b)</p> <p>Python<pre><code>def sqrt(a):\n    # \u200b\u5185\u5c42\u200b\u5d4c\u5957\u200b\u7684\u200b\u51fd\u6570\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5916\u5c42\u200b\u51fd\u6570\u200b\u7684\u200b\u53c2\u6570\u200b\n    def sqrt_update(x):\n        return average(x, a/x)\n    def sqrt_close(x):\n        return approx_eq(x * x, a)\n    return improve(sqrt_update, sqrt_close)\n</code></pre> Function as Returned Values(\u200b\u51fd\u6570\u200b\u4f5c\u4e3a\u200b\u8fd4\u56de\u503c\u200b) Python<pre><code>def compose1(f, g):\n    def h(x):\n        return f(g(x))\n    return h\n</code></pre> <sup>^Currying(\u200b\u67ef\u91cc\u5316\u200b)</sup>^use higher-order functions to convert a function that takes multiple arguments into a chain of functions that each take a single argument.</p> Python<pre><code>def curried_pow(x):\n    def h(y):\n        return pow(x, y)\n    return h\n&gt;&gt;&gt; curried_pow(2)(3)\n8\n</code></pre> <p>auto to curry</p> Python<pre><code>&gt;&gt;&gt; def curry2(f):\n        \"\"\"Return a curried version of the given two-argument function.\"\"\"\n        def g(x):\n            def h(y):\n                return f(x, y)\n            return h\n        return g\n\n&gt;&gt;&gt; def uncurry2(g):\n        \"\"\"Return a two-argument version of the given curried function.\"\"\"\n        def f(x, y):\n            return g(x)(y)\n        return f\n</code></pre> <p>^^lambda expression(lambda\u200b\u8868\u8fbe\u5f0f\u200b/Anonymous function \u200b\u533f\u540d\u200b\u51fd\u6570\u200b)^^A lambda expression evaluates to a function that has a single return expression as its body. Assignment and control statements are not allowed.</p> Python<pre><code>def compose1(f, g):\n    \"\"\"\n    A function that takes x and returns f(g(x))\n    \"\"\"\n    return lambda x : f(g(x))\n</code></pre> <p>When using lambda expression?</p> <p>Python style prefers explicit def statements to lambda expressions, but allows them in cases where a simple function is needed as an argument or return value</p> <p>First class status --- function</p> <ul> <li>can be bound to names</li> <li>can be passed as arguments to function</li> <li>can be returned as the results of function</li> <li>can be included in data structures</li> </ul> <p>Function Decorators(\u200b\u51fd\u6570\u200b\u88c5\u9970\u200b\u5668\u200b) Python provides special syntax to apply higher-order functions as part of executing a def statement, called a decorator. Perhaps the most common example is a trace</p> Python<pre><code>def trace(fn):\n    def wrapped(x):\n        print('-&gt;', fn, '(', x, ')')\n        return fn(x)\n    return wrapped\n\n@trace \n\"\"\"\n@trace equivalent to:\ntriple = trace(triple)\n\"\"\"\ndef triple(x):\n    return 3 * x\n&gt;&gt;&gt; triple(12)\n-&gt; &lt;function triple at 0x10344d440&gt; ( 12 )\n36\n</code></pre>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/","title":"Week 2","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#environments","title":"Environments","text":"<p>python tutor</p>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#recursion","title":"Recursion","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#reding-textbook","title":"Reding Textbook","text":"<p>Recursion if the body of the function calls the function itself</p> <p>sum_digits</p> <p>Python<pre><code>def sum_digits(n):\n    \"\"\"Return the sum of the digits of positive integer n.\"\"\"\n    if n &lt; 10:\n        return n\n    else :\n        all_but_last, last = n // 10, n % 10\n        return sum_digits(all_but_last) + last\n</code></pre> The problem of summing the digits of a number is broken down into two steps</p> <ul> <li>summing all but the last digit</li> <li>adding the last digit</li> </ul> Text Only<pre><code>For example sum_digits(1234)\nsum_digits(1234)\n\u251c\u2500\u2500 sum_digits(123) + 4\n    \u251c\u2500\u2500 sum_digits(12) + 3\n        \u251c\u2500\u2500 sum_digits(1) + 2\n            \u251c\u2500\u2500 1  (base case\uff0cn &lt; 10)\n        \u2514\u2500\u2500 1 + 2 = 3\n    \u2514\u2500\u2500 3 + 3 = 6\n\u2514\u2500\u2500 6 + 4 = 10\n</code></pre> <p>Recursion consists of one or more base cases, followed by one or more recursive calls. It solves the original problem by gradually simplifying it</p> <p>Recursion VS Iteration Python<pre><code>\"\"\" Iteration Version \"\"\"\ndef fact_iter(n):\n    total, k = 1, 1\n    while k &lt;= n:\n        total, k = total * k, k + 1\n    return total\n\n\"\"\" Recursion Version \"\"\"\ndef fact_rec(n):\n    if n == 1:  # base case\n        return 1\n    else :\n        return fact_rec(n - 1) * n\n</code></pre></p> <p>proof</p> \\[ \\begin{align*} \\text{induction} \\\\ (n-1)! &amp;= (n - 1)(n - 2)\\ldots 1 \\\\ n! &amp;= n(n-1)(n-2)\\ldots 1 \\\\ n! &amp;= n(n-1)!  \\end{align*} \\] <p>Mutual Recursion(\u200b\u76f8\u4e92\u200b\u9012\u5f52\u200b) when a recursive procedures in divided among two functions that call each other.</p> <p>For example : </p> <ul> <li>a number is even if it is one more than an odd number</li> <li>a number is odd if it is one more than an even number</li> <li>zero is even (base case)</li> </ul> Python<pre><code>def is_even(n):\n    if n == 0:\n        return True\n    else :\n        return is_odd(n - 1)\n\ndef is_odd(n):\n    if n == 0:\n        return False\n    else :\n        return is_odd(n - 1)\n\n\"\"\"merge two function\"\"\"\ndef is_even(n):\n    if n == 0:\n        return True\n    else :\n        if (n - 1) == 0:\n            return False\n        else :\n            return is_even(n - 2)\n</code></pre>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#tree-recursion","title":"Tree Recursion","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#reading-textbook","title":"Reading Textbook","text":"<p>Tree Recursion (\u200b\u6811\u5f62\u200b\u9012\u5f52\u200b) a function calls itself more than once.</p> <p>For example : Fibonacci sequence</p> <p></p> Python<pre><code>\"\"\"Fibonacci Sequence\n    0 1 1 2 3 5 8 .....\n\"\"\"\ndef fib(n):\n    if n == 1:\n        return 0 # fib(1) = 0\n    elif n == 2:\n        return 1 # fib(2) = 1\n    else:\n        return fib(n - 2) + fib(n - 1) # fib(n) = fib(n - 2) + fib(n - 3)\n</code></pre> <p>Partitions</p> <p>The number of partitions of a positive integer n, using parts up to size m, is the number of ways in which n can be expressed as the sum of positive integer parts up to m in increasing order.</p>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#containers-and-sequences","title":"Containers and Sequences","text":"<p>Sequence(\u200b\u5e8f\u5217\u200b) is an ordered collection fo values.</p>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#reding-textbook_1","title":"Reding Textbook","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#lists-and-string","title":"Lists and String","text":"<p>Lists(\u200b\u5217\u8868\u200b) a sequence that can have arbitrary length Python<pre><code>&gt;&gt;&gt; digits = [1, 2, 3, 8]\n&gt;&gt;&gt; digits[2]\n3\n&gt;&gt;&gt; digits[3]\n8\n\n# lists can be add and can be mul by numbers\n&gt;&gt;&gt; [2, 7] + 2 * digits\n[2, 7, 1, 2, 3, 8, 1, 2, 3, 8]\n</code></pre></p> <p>Sequence Iteration -- for (\u200b\u5217\u8868\u200b\u5faa\u73af\u200b--for) iterate over the elements of a sequence and perform some computation each element in turn</p> Python<pre><code>\"\"\"while version\"\"\"\ndef count(s, value):\n    \"\"\"Count the number of occurrences of value in sequence s\"\"\"\n    total, index = 0, 0\n    while index &lt; len(s):\n        if s[index] == value:\n            total += 1\n        index += 1\n    return total\n\n\"\"\"for version\"\"\"\ndef count(s, value):\n    total = 0\n    for elem in s:\n        if elem == value:\n            total += 1\n    return total\n</code></pre> <p>Sequence unpacking(\u200b\u5e8f\u5217\u200b\u89e3\u5305\u200b) This pattern of binding multiple names to multiple values in a fixed-length sequence</p> Python<pre><code>pairs = [[1, 2], [2, 2], [2, 3], [4, 5]]\nsame_count = 0\n\nfor x, y in pairs:\n    # x = list.first\n    # y = list.second\n    if x == y:\n        same_count += 1\n</code></pre> <p>Range(\u200b\u8303\u56f4\u200b) built-in type of sequence in python Python<pre><code>&gt;&gt;&gt; range(1, 10) # includes 1 but not 10\nrange(1, 10) # not lists\n&gt;&gt;&gt; list(range(5, 8))\n[5, 6, 7]\n&gt;&gt;&gt; list(range(4)) # only one argument\n[0, 1, 2, 3]\n</code></pre></p> <p>_ in range()</p> <p>Python<pre><code>for _ in range(3):\n    print(\"Go Bears!\")\n</code></pre> A conventional meaning among programmers that indicates the name will not appear in any future expressions</p> <p>List Comprehensions(\u200b\u5217\u8868\u200b\u63a8\u5bfc\u200b) Many sequence processing operations can be expressed by evaluating a fixed expression for each element in a sequence and collecting the resulting values in a result sequence.</p> <p>Python<pre><code>&gt;&gt;&gt; odds = [1, 3, 5, 7, 9]\n# for is not for statement,but instead part of a list comprehensions\n&gt;&gt;&gt; [x + 1 for x in odds]  # list comprehension\n[2, 4, 6, 8, 10]\n\n&gt;&gt;&gt; [x for x in odds if 25 % x == 0] # list comprehension\n[1, 5]\n</code></pre> Membership(\u200b\u6210\u5458\u200b\u8d44\u683c\u200b) A value can be tested for membership in a sequence.</p> Python<pre><code>&gt;&gt;&gt; digits\n[1, 8, 2, 8]\n# in or  in not\n&gt;&gt;&gt; 2 in digits\nTrue\n&gt;&gt;&gt; 1828 in not digits\nTrue\n</code></pre> <p>Slicing(\u200b\u5207\u7247\u200b) Sequences contain smaller sequences within them. Python<pre><code>&gt;&gt;&gt; digits[:2]\n[1, 8]\n&gt;&gt;&gt; digits[0:2]\n[1, 8]\n&gt;&gt;&gt; digits[1:]\n[8, 2, 8]\n</code></pre></p> <p>Further reading</p> <p>Dive into Python3 - Slicing A list</p> <p>Strings literals(\u200b\u5b57\u7b26\u4e32\u200b\u5b57\u200b\u9762\u503c\u200b) Python<pre><code>&gt;&gt;&gt; 'I am string'\nI am string\n&gt;&gt;&gt; \"I am string\"\nI am string\n&gt;&gt;&gt; city = \"Berkeley\"\n&gt;&gt;&gt; len(city)\n8\n&gt;&gt;&gt; city[3] \n'k'\n</code></pre> Python not <code>char</code> type, any text is a string.</p> Python<pre><code># string can add and mul\n&gt;&gt;&gt; 'Berkeley' + ', CA'\n'Berkeley, CA'\n&gt;&gt;&gt; 'Shabu ' * 2\n'Shabu Shabu '\n</code></pre> <p>Python<pre><code># string membership\n&gt;&gt;&gt; 'here' in \"Where's Waldo?\"\nTrue\n</code></pre> string membership matches substrings rather the elements</p> Python<pre><code># multiline literals\n&gt;&gt;&gt; \"\"\"The Zen of Python\nclaims, Readability counts.\nRead more: import this.\"\"\"\n</code></pre> <p>str()</p> <p>string coercion(\u200b\u5b57\u7b26\u200b\u5f3a\u5236\u200b\u8f6c\u6362\u200b) Python<pre><code>&gt;&gt;&gt; str(2) + 'is an element of ' + str(digits)\n'2 is an element of [1, 8, 2, 8]'\n</code></pre></p> <p>Further Reading</p> <p>Dive into python3 - string</p> <p>closure property of a data type \u200b\u6570\u636e\u7c7b\u578b\u200b\u7684\u200b\u95ed\u5305\u200b\u7279\u6027\u200b to use lists as the elements of other lists.</p> <p></p>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#trees","title":"Trees","text":"<p>Trees is a fundamental data abstraction that imposes regularity on how hierarchical values are structured and manipulated.</p> Python<pre><code># simple version\ndef tree(root_label, branches=[]):\n    \"\"\"constructor tree\"\"\"\n    for branch in branches:\n        assert is_tree(branch), 'branches must be tree'\n    return [root_label] + list(branches)\n\ndef label(tree):\n    \"\"\"selectors label\"\"\"\n    return tree[0]\n\ndef branches(tree):\n    \"\"\"selectors branches\"\"\"\n    return tree[1:]\n\ndef is_tree(tree):\n    \"\"\"to verify that  all branches are well-formed\"\"\"\n    if type(tree) != list or len(tree) &lt; 1:\n        return false\n    for branch in branches(tree):\n        if not is_tree(branch):\n            return False\n    return True\n</code></pre>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#homework-laboratory","title":"Homework &amp; laboratory","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#hw3-recursion-tree-recursion","title":"HW3 Recursion, Tree Recursion","text":"<p>\u200b\u9012\u5f52\u200b\u4e00\u6765\u200b\u8fd9\u4e2a\u200b\u9898\u76ee\u200b\u5c31\u200b\u6ca1\u200b\u90a3\u4e48\u200b\u7b80\u5355\u200b\u55bd\u200b,\u200b\u4e3b\u8981\u200b\u8bb0\u5f55\u200b\u4e00\u4e0b\u200b\u4e24\u9053\u200b\u9898\u200b\u7684\u200b\u89e3\u6cd5\u200b</p> <p>count_coin</p> <p>Given a positive integer total, a set of coins makes change for total if the sum of the values of the coins is total. Here we will use standard US Coin values: 1, 5, 10, 25. For example, the following sets make change for 15:</p> <ul> <li>15 1-cent coins</li> <li>10 1-cent, 1 5-cent coins</li> <li>5 1-cent, 2 5-cent coins</li> <li>5 1-cent, 1 10-cent coins</li> <li>3 5-cent coins</li> <li>1 5-cent, 1 10-cent coin</li> </ul> <p>\u200b\u57fa\u672c\u601d\u8def\u200b,\u200b\u901a\u8fc7\u200b\u679a\u4e3e\u200b\u662f\u200b\u4f7f\u7528\u200b\u5f53\u524d\u200b\u7684\u200b\u786c\u5e01\u200b\u8fd8\u662f\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6bd4\u200b\u5f53\u524d\u200b\u786c\u5e01\u200b\u5927\u200b\\\u200b\u5c0f\u200b\u7684\u200b\u786c\u5e01\u200b\u6765\u200b\u51d1\u200b\u8fd9\u4e2a\u200b\u603b\u6570\u200b Python<pre><code>def count_coin(total):\n    def helper(amount, coin)\n        if total == 0:\n            return 1\n        elif total &lt; 0 or coin == None:\n            # \u200b\u65e0\u6cd5\u200b\u51d1\u6210\u200b\u603b\u6570\u200b\u6216\u8005\u200b\u5df2\u200b\u65e0\u200b\u786c\u5e01\u200b\u53ef\u7528\u200b(\u200b\u6bd4\u200b\u5f53\u524d\u200b\u5927\u200b\\\u200b\u5c0f\u200b)\n            return 0\n        else:\n            # \u200b\u8981\u4e48\u200b\u63a5\u7740\u200b\u4f7f\u7528\u200b\u5f53\u524d\u200b\u786c\u5e01\u200b,\u200b\u8981\u4e48\u200b\u4f7f\u7528\u200b\u66f4\u5927\u200b\u7684\u200b\u786c\u5e01\u200b\n            return count_coin(amount - coin, coin) + count_coin(amount, next_larger_coin(coin))\n    return helper(total, 1) # \u200b\u4ece\u5c0f\u200b\u679a\u4e3e\u200b\u5230\u200b\u5927\u200b\n</code></pre></p> <p>Anonymous Factorial</p> <p>Write an expression that computes n factorial using only call expressions, conditional expressions, and lambda expressions (no assignment or def statements).</p> <p>Note: You re not allowed to use make_anonymous_factorial in your return expression.</p> <p>The sub and mul functions from the operator module are the only built-in functions required to solve this problem.</p> <p>Y-combinator Y\u200b\u7ed3\u5408\u200b\u5b50\u200b \u200b\u8ba9\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u81ea\u8eab\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b,\u200b\u5b9e\u73b0\u200b\u533f\u540d\u200b\u9012\u5f52\u200b Python<pre><code>return (lambda f: \n        f(f))(lambda f\n                : lambda n : 1 if n == 0 else n * f(f)(n-1))\n</code></pre> \u200b\u89e3\u91ca\u200b <code>lambda f:f(f) ****</code> \u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200bf\u200b\u5e76\u200b\u8c03\u7528\u200bf</p> <ul> <li>(lambda f: f(f))(func) == func(func)</li> <li>\u200b\u5bf9\u4e8e\u200b\u8fd9\u4e2a\u200b\u9898\u200b,\u200b\u8fd9\u4e2a\u200bfunc\u200b\u5c31\u662f\u200b(lambda f: lambda n : ....)</li> </ul>","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%202/#hw4-sequences-adt-tree","title":"HW4 Sequences, ADT Tree","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%203/","title":"Week 3","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%203/#data-abstraction-and-adt-trees","title":"Data Abstraction and ADT Trees","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%203/#mutability","title":"Mutability","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%203/#iterators-and-generators","title":"Iterators and Generators","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%204/","title":"Week 4","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%204/#objects","title":"Objects","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%204/#inheritance-and-string-representation","title":"Inheritance and String Representation","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%204/#mutable-tree","title":"Mutable Tree","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%205/","title":"Week 5","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%205/#linked-lists","title":"Linked Lists","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%205/#efficiency","title":"Efficiency","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%205/#scheme-i","title":"Scheme I","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%205/#scheme-ii","title":"Scheme II","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%206/","title":"Week 6","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%206/#interpreters","title":"Interpreters","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%206/#tail-calls","title":"Tail Calls","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%206/#scheme-data-abstraction","title":"Scheme Data Abstraction","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%206/#sql-i-intro","title":"SQL I: Intro","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%207/","title":"Week 7","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%207/#sql-iiaggregation","title":"SQL II:Aggregation","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%207/#special-topics-i","title":"Special Topics I","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61A%20%20Structure%20and%20Interpretation%20of%20Computer%20Programs/Week%207/#special-topics-ii","title":"Special Topics II","text":"","tags":["CS61A"]},{"location":"CS/Course/CS61B%20Data%20Structure/Discussion/","title":"Discussion","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Labs/","title":"Labs","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Projects/","title":"Projects","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%201/","title":"Week 1","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%201/#intro-instance-variables","title":"Intro, Instance Variables","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%201/#defining-and-using-classes-lists-sets-and-maps","title":"Defining and Using Classes, Lists, Sets and Maps","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2011/","title":"Week 11","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2011/#directed-acyclic-graphs","title":"Directed Acyclic Graphs","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2011/#tries-and-midterm-2-review","title":"Tries and Midterm 2 Review","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2011/#basic-sorts","title":"Basic Sorts","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2012/","title":"Week 12","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2012/#software-engineering-1-project-3","title":"Software Engineering 1 - Project 3","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2012/#merge-sort-insertion-sort-an-quick-sort","title":"Merge Sort, Insertion Sort, an Quick Sort","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2012/#software-engineering-ii","title":"Software Engineering II","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2013/","title":"Week 13","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2013/#software-engineering-iii-project-3","title":"Software Engineering III - Project 3","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2013/#more-quicksortquick-selectstability","title":"More Quicksort,Quick Select,Stability","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2013/#sorting-and-algorithmic-bounds","title":"Sorting and Algorithmic Bounds","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2014/","title":"Week 14","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2014/#software-engineering-iv","title":"Software Engineering IV","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2014/#radix-sorts","title":"Radix Sorts","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2014/#sorting-conclusion-algorithm-design-practice","title":"Sorting Conclusion, Algorithm Design Practice","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2015/","title":"Week 15","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2015/#compression","title":"Compression","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2015/#p-vs-np","title":"P vs NP","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%2015/#summary-fun","title":"Summary, Fun","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%202/","title":"Week 2","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%202/#references-recursion-intlists","title":"References, Recursion, IntLists","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%202/#sllists-nested-classes-sentinel-nodes","title":"SLLists, Nested Classes, Sentinel Nodes","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%202/#dllists-arrays","title":"DLLists, Arrays","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%203/","title":"Week 3","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%203/#testing","title":"Testing","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%203/#arraylists-resizing","title":"ArrayLists, Resizing","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%203/#interface-and-implementation","title":"interface and Implementation","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%204/","title":"Week 4","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%204/#subtype-polymorphism-comparators-comparable-generic-functions","title":"Subtype Polymorphism, Comparators, Comparable, Generic Functions","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%204/#iterators-object-methods","title":"Iterators, Object Methods","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%204/#asymptotic-i","title":"Asymptotic I","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%205/","title":"Week 5","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%205/#ask-anything","title":"Ask Anything","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%205/#asymptotic-ii","title":"Asymptotic II","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%206/","title":"Week 6","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%206/#asymptotic-iii","title":"Asymptotic III","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%206/#disjoint-sets","title":"Disjoint Sets","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%206/#extends-sets-maps-and-bsts","title":"Extends Sets, Maps, and BSTs","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%207/","title":"Week 7","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%207/#b-trees","title":"B-Trees","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%207/#red-black-trees","title":"Red Black Trees","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%207/#hashing-i","title":"Hashing I","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%208/","title":"Week 8","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%208/#hashing-ii","title":"Hashing II","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%208/#heaps-and-priority-queues","title":"Heaps and Priority Queues","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%208/#tree-and-graph-traversals","title":"Tree and Graph Traversals","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%209/","title":"Week 9","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%209/#graph-traversals-and-implementations","title":"Graph Traversals and Implementations","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%209/#shortest-paths","title":"Shortest Paths","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61B%20Data%20Structure/Week%209/#minimum-spanning-trees","title":"Minimum Spanning Trees","text":"","tags":["CS61B"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Discussion/","title":"CS61C Discussion","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Labs/","title":"CS61C Labs","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Projects/","title":"CS61C Projects","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%201/","title":"Weeks 1","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%201/#intro-great-ides","title":"Intro, Great Ides","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%201/#number-representation","title":"Number Representation","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2011/","title":"Week 11","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2011/#risc-v-single-cycle-control-logic","title":"RISC-V Single-Cycle Control Logic","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2011/#risc-v-5-stage-pipeline-i","title":"RISC-V 5-Stage Pipeline I","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2011/#risc-v-5-stage-pipeline-ii","title":"RISC-V 5-Stage Pipeline II","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2012/","title":"Week 12","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2012/#risc-v-5-stage-pipeline-iii-hazards","title":"RISC-V 5-Stage Pipeline III - Hazards","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2012/#parallelism-i-intro","title":"Parallelism I - Intro","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2012/#parallelism-ii-simd","title":"Parallelism II - SIMD","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2013/","title":"Week 13","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2013/#parallelism-iii-tlp","title":"Parallelism III - TLP","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2013/#parallelism-iv-concurrency","title":"Parallelism IV - Concurrency","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2013/#parallelism-v-mimd","title":"Parallelism V - MIMD","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2014/","title":"Week 14","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2014/#virtual-memory-i","title":"Virtual Memory I","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2014/#virtual-memory-ii","title":"Virtual Memory II","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2014/#os-basics","title":"OS Basics","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2015/","title":"Week 15","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%2015/#summary-whats-next","title":"Summary, What's next?","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%202/","title":"Week 2","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%202/#c-intro-basics","title":"C Intro - Basics","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%202/#c-intro-pointers-arrays-strings","title":"C Intro - Pointers, Arrays, Strings","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%202/#c-memory-management","title":"C Memory Management","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%203/","title":"Week 3","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%203/#c-generics","title":"C Generics","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%203/#floating-point","title":"Floating Point","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%203/#risc-v-basics","title":"RISC-V Basics","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%204/","title":"Week 4","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%204/#risc-v-data-transfer","title":"RISC-V Data Transfer","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%204/#risc-v-decision-making","title":"RISC-V Decision Making","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%204/#risc-v-procedures","title":"RISC-V PRocedures","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%205/","title":"Week 5","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%205/#risc-v-instruction-formats-i","title":"RISC-V Instruction Formats I","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%205/#risc-v-instruction-formats-ii","title":"RISC-V Instruction Formats II","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%206/","title":"Week 6","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%206/#caches-i","title":"Caches I","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%206/#caches-ii","title":"Caches II","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%206/#caches-iii","title":"Caches III","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%207/","title":"Week 7","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%207/#cache-iv","title":"Cache IV","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%207/#compiler-assembler-linker-loader","title":"Compiler, Assembler, Linker, Loader","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%207/#sds-i","title":"SDS I","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%208/","title":"Week 8","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%208/#sds-ii","title":"SDS II","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%208/#sds-iii","title":"SDS III","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%208/#sds-iv","title":"SDS IV","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%209/","title":"Week 9","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%209/#risc-v-single-cycle-data-path-i","title":"RISC-V Single-Cycle Data-path I","text":"","tags":["CS61C"]},{"location":"CS/Course/CS61C%20Great%20Ideas%20in%20Computer%20Architecture/Week%209/#risc-v-single-cycle-data-path-ii","title":"RISC-V Single-Cycle Data-path II","text":"","tags":["CS61C"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/","title":"Discussion","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-0b","title":"Dis 0B","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-0c","title":"Dis 0C","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-0d","title":"Dis 0D","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-1a","title":"Dis 1A","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-1b","title":"Dis 1B","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-1c","title":"Dis 1C","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-1d","title":"Dis 1D","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-2a","title":"Dis 2A","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-2b","title":"Dis 2B","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-2c","title":"Dis 2C","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-2d","title":"Dis 2D","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-3a","title":"Dis 3A","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-3b","title":"Dis 3B","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-3c","title":"Dis 3C","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-3d","title":"Dis 3D","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-4a","title":"Dis 4A","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-4b","title":"Dis 4B","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-4c","title":"Dis 4C","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-4d","title":"Dis 4D","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-5a","title":"Dis 5A","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-5b","title":"Dis 5B","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-5c","title":"Dis 5C","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-5d","title":"Dis 5D","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-6a","title":"Dis 6A","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-6b","title":"Dis 6B","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-6c","title":"Dis 6C","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-6d","title":"Dis 6D","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Discussion/#dis-7a","title":"Dis 7A","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/","title":"Homeworks","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/#hw-0","title":"HW 0","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/#hw-1","title":"Hw 1","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/#hw-2","title":"Hw 2","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/#hw-3","title":"Hw 3","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/#hw-4","title":"Hw 4","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/#hw-5","title":"Hw 5","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/#hw-6","title":"Hw 6","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Homework/#hw-7","title":"Hw 7","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/","title":"Week 0","text":"<p>\u200b\u4e3b\u8981\u200b\u5185\u5bb9\u200b</p> <p>Introduction, Propositional Logic, Proofs, Induction, Stable Matching.</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#note-0-review-of-sets-and-mathematical-notation","title":"Note 0 : Review of Sets and Mathematical Notation","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#sets","title":"Sets","text":"<p>set : a collection of objects.</p> <p>\\(A=\\{2, 3, 5, 7, 11\\}\\) if x is an element of A, then \\(x\\in A\\), if y is not an element of A, then \\(y \\notin A\\)</p> <p>If A and B have same elements, then A and B are said to be equal, then \\(A = B\\)</p> <p>Order is not important</p> <p>\\(\\{A, B, C\\} = \\{C, B, A\\}\\)</p> <p>An other more complicated set can be defined as: \\(\\mathbb{Q} = \\left\\{ \\frac{b}{a} \\mid a,b \\text{ are integers}, b \\neq 0 \\right\\}\\)</p> <p>Cardinality(\u200b\u52bf\u200b) of set : the size of a set.</p> <p>If \\(A = \\{1, 2, 3, 4\\}\\), the cardinality of A is 4, then \\(|A| = 4\\)</p> <p>Cardinality is zero</p> <p>Only one set's cardinality is zero, that is empty set, \\(\\emptyset\\)</p> <p>Subsets(\u200b\u5b50\u96c6\u200b) and Proper Subsets(\u200b\u771f\u200b\u5b50\u96c6\u200b)</p> <p>\\(A \\subseteq B\\), if every elements of A is also in B</p> <p>\\(A \\subset B\\), if every elements of A is also in B, and B have at least one element not in A.</p> <p>properties of subset</p> <ul> <li>\\(\\{\\} \\subset A\\), A is any non-emptyset</li> <li>\\(\\{\\} \\subseteq B\\) B is every set</li> <li>\\(A\\subseteq A\\)</li> </ul> <p>Intersections(\u200b\u4ea4\u96c6\u200b) and Unions(\u200b\u5e76\u96c6\u200b)</p> <p>\\(A\\cup B\\), is the set containing all elements which are in both A and B.</p> <p>if \\(A\\cup B=\\emptyset\\), said A and B are disjoint(\u200b\u4e0d\u200b\u76f8\u4ea4\u200b)</p> <p>\\(A\\cap B\\), is the set containing all elements which are in either A or B or both.</p> <p>properties of intersections and unions</p> <ul> <li>\\(A\\cup B = B\\cap A\\)</li> <li>\\(A\\cup \\emptyset = \\emptyset\\)</li> <li>\\(A\\cap B = B\\cap A\\)</li> <li>\\(A\\cap \\emptyset = \\emptyset\\)</li> </ul> <p>Complements(\u200b\u8865\u96c6\u200b)</p> <p>\\(B-A = B/A = \\{x\\in B \\mid x \\notin A\\}\\), a complements is a set containing elements which in B but not in A.</p> <p>properties of complements</p> <ul> <li>\\(A/A=\\emptyset\\)</li> <li>\\(A/\\emptyset=A\\)</li> <li>\\(\\emptyset/A=\\emptyset\\)</li> </ul> <p>Significant Sets</p> <p>\\(\\mathbb{N}\\) the set of all natural numbers: \\(\\{0, 1, 2, 3, \\ldots \\}\\)</p> <p>\\(\\mathbb{Z}\\) the set of all integer numbers: \\(\\{\\ldots,-2,-1,0, 1, 2, 3, \\ldots \\}\\)</p> <p>\\(\\mathbb{Q}\\) the set of all rational numbers</p> <p>\\(\\mathbb{R}\\) the set of all real numbers</p> <p>\\(\\mathbb{C}\\) the set of all complex numbers.</p> <p>Products(\u200b\u79ef\u200b) and Power Sets(\u200b\u5e42\u96c6\u200b)</p> <p>The Cartesian Product(cross product) written as \\(A\\times B\\), is the set of all pairs whose first component is an element of A adn whose second component is an element of B.</p> <p>The power set of S, denoted by \\(\\mathcal{P}\\)(s), is the set of all subsets.</p> <p>Question</p> <p>Question : if \\(|S|=k\\), then \\(|\\mathcal{P}|=2^k\\)</p> <p>Proof: </p> \\[ \\begin{align*} \\textbf{Binomial Theorem} \\\\ (a + b)^n &amp;= \\sum_{k=0}^{n} \\binom{n}{k} a^{n-k} b^k \\end{align*} \\]","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#mathematical-notation","title":"Mathematical Notation","text":"<p>Sum:\\(\\sum_{i = m}^{n}f(i) = f(m) + f(m + 1) + \\ldots + f(n)\\) </p> <p>Product:\\(\\prod_{i = m}^{n}f(i) = f(m)f(m + 1)\\ldots f(n)\\) </p> <p>Universal Quantifiers(\u200b\u5168\u79f0\u200b\u91cf\u8bcd\u200b) : \\(\\forall\\)</p> <p>Existential Quantifiers: \\(\\exists\\)</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#note-1","title":"Note 1 \u200b\u547d\u9898","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#propositional-logic","title":"Propositional Logic(\u200b\u547d\u9898\u903b\u8f91\u200b)","text":"<p>propositional which is simply a statement which is either true or false</p> <p>Conjunction(\u200b\u5408\u53d6\u200b): \\(P \\land Q\\). True only when both P and Q are true</p> <p>Disjunction(\u200b\u6790\u53d6\u200b): \\(P \\lor Q\\). True when at least of P and Q is true</p> <p>Negation(\u200b\u5426\u5b9a\u200b): \\(\\lnot P\\). True when P is false. </p> <p>law of excluded middle (\u200b\u6392\u4e2d\u5f8b\u200b)</p> <p>for any proposition \\(P\\), either \\(P\\) is true or \\(\\lnot P\\) is true(but not both) so \\(P\\lor \\lnot P\\) always true</p> <p>tautology(\u200b\u91cd\u8a00\u5f0f\u200b) A propositional form that is always true regardless of the truth values of tis variables.</p> <p>implication(\u200b\u8574\u542b\u200b) \\(P \\implies Q\\) \"If P, then Q\", the P is called the hypothesis(\u200b\u524d\u63d0\u200b) , and Q is the conclusion(\u200b\u7ed3\u8bba\u200b).</p> <p>The true table of implication</p> \\(P\\) \\(Q\\) \\(P\\implies Q\\) \\(\\lnot P \\lor Q\\) T T T T T F F F F T T T F F T T <p>Note: only when P is true and Q is false, the implication is false, neither implication always true.</p> <p>Vacuously true(\u200b\u7a7a\u771f\u200b), when hypothesis is false, but the implication is true.</p> <p>logically equivalent(\u200b\u903b\u8f91\u200b\u7b49\u5f0f\u200b) In every possible case (or model), P and Q have the same truth value.</p> <p>if and only if(iff) If \\(P\\implies Q and Q\\implies P\\), then \\(P\\iff Q\\), Only when P and Q have the same truth values(both true or false)</p> <p>Contrapositive(\u200b\u9006\u5426\u547d\u9898\u200b) \\(\\lnot Q \\implies \\lnot P\\)</p> <p>Converse(\u200b\u9006\u547d\u9898\u200b) \\(Q\\implies P\\)</p> <p>Note</p> <p>propositional and its contrapositive have the same truth value, so they are logically equivalent \\((P \\implies Q) \\equiv (\\lnot Q\\implies \\not P)\\)</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#quantifies","title":"Quantifies(\u200b\u91cf\u8bcd\u200b)","text":"<p>Statement can have multiple quantifiers but quantifiers do not commute.</p> <p>\\((\\forall x \\in \\mathbb{Z})(\\exists y \\in \\mathbb{Z})(x &lt; y)\\)</p> <p>\\((\\exists y \\in \\mathbb{z})(\\forall x \\in \\mathbb{Z})(x &lt; y)\\)</p> <p>the first statement says that, given an integer, I can find a larger one.</p> <p>the second statement says that, exists an integer, for everyone integer, that is bigger than it, then, there is a largest integer!</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#much-ado-about-negation","title":"Much Ado About Negation","text":"<p>De Morgan's Laws (\u200b\u5fb7\u200b\u6469\u6839\u200b\u5f8b\u200b)</p> <p>\\(\\lnot (P\\land Q)\\equiv (\\lnot P \\lor \\lnot Q)\\)</p> <p>\\(\\lnot (P\\lor Q)\\equiv (\\lnot P \\land \\lnot Q)\\)</p> <p>\\(\\lnot (\\forall x P(x)) \\equiv \\exists x \\lnot P(x)\\)</p> <p>\\(\\lnot (\\exists x P(x)) \\equiv \\forall x \\lnot P(x)\\)</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#note-2","title":"Note 2 \u200b\u8bc1\u660e","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#proofs","title":"Proofs","text":"<p>Proof(\u200b\u8bc1\u660e\u200b): A proof is a finite sequence of steps, called logical deductions, which establishes the truth of a desired statement</p> <p>axioms(\u200b\u516c\u7406\u200b) or postulates(\u200b\u57fa\u672c\u200b\u5047\u8bbe\u200b) that we accept without proof(as start to proof other)</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#notation-and-basic-facts","title":"Notation and basic facts","text":"<p>\\(\\mathbb{Z}=\\{\\ldots, -2, -1, 0, 1, 2, \\ldots\\}\\), \\(\\mathbb{Z}\\) denote the set of integers.</p> <p>\\(\\mathbb{N}=\\{0, 1, 2, \\ldots\\}\\) \\(\\mathbb{N}\\) denote the natural numbers.</p> <p>closed, the sum or product of two integers(natural numbers) also is integers(natural numbers)</p> <p>\\(a \\mid b\\) denote a divides, iff there exists an integer q such that \\(b = aq\\)</p> <p>\\(:=\\) to indicate a definition</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#direct-proof","title":"Direct Proof(\u200b\u76f4\u63a5\u8bc1\u660e\u200b)","text":"<p>Theorem 2.1</p> <p>Theorem 2.1</p> <p>\\(For\\ any\\ a,b,c\\in\\mathbb{Z},if\\ a\\mid b\\ and\\ a\\mid c,\\ then\\ a\\mid (b+c)\\)</p> <p>Equivalent to</p> <p>\\(Let\\ P(x,y)\\ denote\\ x\\mid y \\)</p> <p>\\((\\forall a,b,c\\in\\mathbb{Z}(P(a,b)\\land P(a,c))\\implies P(a,b+c))\\)</p> <p>Direct Proof</p> <p>Goal: To prove \\(P\\impliedby Q\\)</p> \\[ \\begin{align*} Approach: Assume P \\\\             .\\\\             .\\\\             .\\\\             Therefore Q \\end{align*} \\] <p>For prove theorem 2.1, Assume is \\(a\\mid b\\ and\\ a\\mid c\\), </p> <p>there exist integer \\(q_1,q_2,\\ b = q_1a\\ and\\ c=q_2a\\),</p> <p>Then,\\(b+c=q_1a+q_2a=(q_1+q_2)a\\) denote \\(q_1+q_2=q\\in\\mathbb{Z}\\).</p> <p>So,\\(b+c=qa\\implies a\\mid (b+c)\\) </p> <p>Direct proof</p> <p>Try to use direct proof to prove \\(For\\ any\\ a,b,c\\in\\mathbb{Z},if\\ a\\mid b\\ and\\ a\\mid c,\\ then\\ a\\mid (b-c)\\)</p> <p>there exist integer \\(q_1,q_2,\\ b = q_1a\\ and\\ c=q_2a\\),</p> <p>Then,\\(b-c=q_1a-q_2a=(q_1-q_2)a\\) denote \\(q_1-q_2=q\\in\\mathbb{Z}\\).</p> <p>So,\\(b+c=qa\\implies a\\mid (b-c)\\)</p> <p>Theorem 2.2</p> <p>Theorem 2.2</p> <p>\\(Let\\ 0 &lt; n &lt; 1000\\ be\\ an\\ integer.If\\ the\\ sum\\ of\\ the digits\\ of\\ n\\ is\\ divisible\\ by\\ 9,\\ then\\ n\\ is\\ divisible\\ by\\ 9.\\)</p> <p>Direct proof:</p> <p>\\(n=abc,i.e.,n=100a+10b+c\\)</p> <p>\\(\\exists k\\in\\mathbb{Z},such\\ that\\ a+b+c=9k\\)</p> <p>\\(n=100a+10b+c=9k+99a+9b=9(k+11a+b),then,n\\ is\\ divisible\\ by\\ 9\\)</p> <p>Theorem 2.3</p> <p>Converse of Theorem 2.2</p> <p>Let 0 &lt; n &lt; 1000 be an integer. If n is divisible by 9, then the sum fo the digits of n is divisible by 9.</p> <p>Direct proof</p> \\[ \\begin{align*} n \\text{ is divisible by } 9 &amp;\\implies n=9l \\text{ for } l\\in\\mathbb{Z} \\\\ &amp;\\implies 100a+10b+c=9l \\\\ &amp;\\implies a + b + c = 9l - 99a - 9b \\\\ &amp;\\implies a + b + c = 9(l - 11a - b) \\\\ &amp;\\implies a + b + c = 9k,\\ \\text{for } k=l-11a-b\\in\\mathbb{Z} \\end{align*} \\] <p>to prove equivalence</p> <p>if \\(P\\implies Q\\) and \\(Q\\implies P\\) then \\(P\\iff Q\\)</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#proof-by-contraposition","title":"Proof by Contraposition(\u200b\u4f7f\u7528\u200b\u9006\u5426\u547d\u9898\u200b\u8bc1\u660e\u200b)","text":"<p>Proof by Contraposition</p> <p>Goal: To Prove \\(P\\implies Q\\).</p> \\[ \\begin{align*} \\text{Approach:Assume} &amp;\\lnot Q \\\\ &amp; \\ldots \\\\ &amp; \\ldots \\\\ &amp; \\ldots \\\\ &amp; \\text{Therefore}\\lnot P \\end{align*} \\] <p>Conclusion:\\(\\lnot Q\\implies \\lnot P\\)which is equivalent to \\(P\\implies Q\\)</p> <p>Theorem 2.4</p> <p>Theorem 2.4 Let n be a positive integer and let d divide n, If n is odd then d is odd.</p> <p>We proceed by contraposition., Assume the d is even.</p> <p>Then \\(d=2k,k\\in\\mathbb{Z}\\), Because \\(d\\mid n\\), then \\(n=dl,for\\ l\\in\\mathbb{Z}\\)</p> <p>So,\\(n=dl=(2k)l=2(kl)\\),then n is even.</p> <p></p> <p>Theorem 2.5 Pigeonhole Principle(\u200b\u9e3d\u5de2\u200b\u539f\u7406\u200b)</p> <p>Pigeonhole Principle: Let n and k be positive integers. Place n objects into k boxes. If n &gt; k, then at least one box must contain multiple objects.</p> <p>Proof: If all boxes contain at most one object, then the number of objects is at most the number of boxes,i.e.,\\(n\\leq k\\)</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#proof-by-contradiction","title":"Proof by Contradiction(\u200b\u53cd\u8bc1\u6cd5\u200b)","text":"<p>Proof by Contradiction</p> <p>Goal: To prove P.</p> \\[ \\begin{align*} \\text{Approach: Assume} &amp;\\lnot P \\\\ &amp; \\cdot \\\\ &amp; \\cdot \\\\ &amp; \\cdot \\\\ &amp; R \\\\ &amp; \\cdot \\\\ &amp; \\cdot \\\\ &amp; \\cdot \\\\ &amp; \\lnot R \\end{align*} \\] <p>Conclusion:\\(\\lnot P\\implies \\lnot R \\land R,\\)</p> <p>which is a contradiction, Thus P</p> <p>Theorem 2.6</p> <p>Theorem 2.6 : There are infinitely many prime numbers.</p> <p>Lemma 2.1</p> <p>Lemma 2.1 Every natural number greater than one is either prime or has a primer divisor.</p> <p>Proof: by contradiction.</p> <p>Suppose that Theorem 2.6 is false, then, that there are only finitely many primes, say k of them. Then we can enumerate them, such as:\\(p_1,p_2,\\ldots,p_k\\)</p> <p>then, we can define number \\(q:=q_1q_2\\ldots q_3 + 1\\), then q is not primers(as suppose). By lemma 2.1, we therefore conclude that q has a primer divisor, p.</p> <p>Because \\(p_1,p_2,\\ldots,p_k\\) are all the primer, so p must be equal to one of them; thus, p divides \\(r:=p_1p_2\\ldots p_k\\),Hence, \\(p\\mid q\\) and \\(p\\mid (q-r)\\). but \\(q-r=1,\\implies p\\leq 1\\), then p is not primer</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#exercises","title":"Exercises","text":"<p>Exercise 1</p> <p>Generalize the proof of Theorem 2.2 so that it works for any positive integer n. (Hint: Suppose n has k digits, and write \\(a_i\\) for the digits of n, so that $n=\\sum_{i=0}^{k-1}(a_i\\cdot 10^i))</p> <p>Exercise 2</p> <p>Prove if \\(a^2\\) is even, then \\(a\\) is even (Hint: First try a direct proof. Then, try contraposition. Which proof approach is better suited to proving this lemma?)</p>","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#note-3","title":"Note 3 \u200b\u5f52\u7eb3\u6cd5","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#mathematical-induction","title":"Mathematical Induction","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#strengthening-the-induction-hypothesis","title":"Strengthening the Induction Hypothesis","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#simple-induction-vs-strong-induction","title":"Simple Induction vs. Strong Induction","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#recursion-programming-and-induction","title":"Recursion, Programming and induction","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#false-proofs","title":"False proofs","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#practice-problems","title":"Practice Problems","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#note-4","title":"Note 4","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#the-stable-matching-problem","title":"The Stable Matching Problem","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#the-propose-and-reject-algorithm","title":"The Propose-and-Reject Algorithm","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#the-residency-match","title":"The Residency Match","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#properties-of-the-propose-and-reject-algorithm","title":"Properties of the Propose-and-Reject Algorithm","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#optimality","title":"Optimality","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%200/#further-reading-optional","title":"Further Reading (optional)","text":"","tags":["CS70"]},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%202/","title":"Week 2","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%202/#tags-cs70","title":"tags: [CS70]","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%203/","title":"Week 3","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%203/#tags-cs70","title":"tags: [CS70]","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%204/","title":"Week 4","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%204/#tags-cs70","title":"tags: [CS70]","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%205/","title":"Week 5","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%205/#tags-cs70","title":"tags: [CS70]","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%206/","title":"Week 6","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%206/#tags-cs70","title":"tags: [CS70]","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%207/","title":"Week 7","text":""},{"location":"CS/Course/CS70%20Discrete%20Mathematics%20and%20Probability%20Theory/Week%207/#tags-cs70","title":"tags: [CS70]","text":""},{"location":"CS/Course/NJU-%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/overview/","title":"Overview","text":"","tags":["NJU \u7f16\u8bd1\u539f\u7406"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","title":"\u673a\u5668\u200b\u5b66\u4e60\u200b\u7684\u200b\u57fa\u672c\u6982\u5ff5","text":"<p>\u200b\u7b80\u4ecb\u200b</p> <p>Machine Learning \\(\\approx\\) Looking for Function</p>","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_2","title":"\u57fa\u672c\u200b\u5185\u5bb9","text":"<p>Regression(\u200b\u56de\u5f52\u200b): The function outputs a scalar(\u200b\u6807\u91cf\u200b\\\u200b\u5e38\u91cf\u200b)</p> <p>Classification(\u200b\u5206\u7c7b\u200b): Given options(classes), the function outputs the correct one.</p> <p>Structured Learning: create something with structure(image, document)</p>","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#colab","title":"Colab\u200b\u6559\u5b66","text":"","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#pytorch","title":"Pytorch\u200b\u6559\u7a0b","text":"","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_3","title":"(\u200b\u9009\u4fee\u200b)\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u7b80\u4ecb","text":"","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_4","title":"(\u200b\u9009\u4fee\u200b)\u200b\u53cd\u5411\u200b\u4f20\u64ad","text":"","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_5","title":"(\u200b\u9009\u4fee\u200b)\u200b\u9884\u6d4b\u200b\u795e\u5947\u200b\u5b9d\u8d1d","text":"","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_6","title":"(\u200b\u9009\u4fee\u200b)\u200b\u5206\u7c7b\u200b\u795e\u5947\u200b\u5b9d\u8d1d","text":"","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"CS/Course/%E6%9D%8E%E5%AE%8F%E6%AF%85-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%282021%29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_7","title":"(\u200b\u9009\u4fee\u200b)\u200b\u903b\u8f91\u200b\u56de\u5f52","text":"","tags":["\u674e\u5b8f\u6bc5-\u673a\u5668\u5b66\u4e60"]},{"location":"Compete/Codeforces/Codeforces%20Round%201030%20%28Div.%202%29/","title":"Codeforces Round 1030 (Div. 2)","text":"<p>Abstract</p> <p>\u200b\u53c2\u52a0\u200b\u65f6\u95f4\u200b\uff1a2025-6-12 10PM</p> <p>\u200b\u5b8c\u6210\u200b\u60c5\u51b5\u200b\uff1a A  B  C  D  E  F </p> <p>\u200b\u8865\u9898\u200b\u8bb0\u5f55\u200b\uff1a B  C  D  E  F </p>","tags":["compete"]},{"location":"Compete/Codeforces/Codeforces%20Round%201030%20%28Div.%202%29/#codeforces-round-1030-div-2","title":"Codeforces Round 1030 (Div. 2)","text":"","tags":["compete"]},{"location":"Compete/Codeforces/Codeforces%20Round%201030%20%28Div.%202%29/#a-equal-subsequences","title":"A\u200b\u9898\u200b Equal Subsequences","text":"<p>\u200b\u9650\u5236\u200b</p> <p>time limit per test: 1 second</p> <p>memory limit per test: 256 megabytes</p> <p>input: standard input</p> <p>output: standard output</p> <p>We call a bitstring\\(^{\\text{\u2217}}\\) perfect if it has the same number of \\(\\mathtt{101}\\) and \\(\\mathtt{010}\\) subsequences\\(^{\\text{\u2020}}\\). Construct a perfect bitstring of length \\(n\\) where the number of \\(\\mathtt{1}\\) characters it contains is exactly \\(k\\).</p> <p>It can be proven that the construction is always possible. If there are multiple solutions, output any of them.</p> <p>\\(^{\\text{\u2217}}\\)A bitstring is a string consisting only of the characters \\(\\mathtt{0}\\) and \\(\\mathtt{1}\\).</p> <p>\\(^{\\text{\u2020}}\\)A sequence \\(a\\) is a subsequence of a string \\(b\\) if \\(a\\) can be obtained from \\(b\\) by the deletion of several (possibly zero or all) characters.</p> <p>Input</p> <p>Each test contains multiple test cases. The first line contains the number of test cases \\(t\\) (\\(1 \\le t \\le 500\\)). The description of the test cases follows.</p> <p>The first line of each test case contains two integers \\(n\\) and \\(k\\) (\\(1 \\le n \\le 100\\), \\(0 \\le k \\le n\\)) \u2014 the size of the bitstring and the number of \\(\\mathtt{1}\\) characters in the bitstring.</p> <p>Output</p> <p>For each test case, output the constructed bitstring. If there are multiple solutions, output any of them.</p> Text Only<pre><code>input\n5\n4 2\n5 3\n5 5\n6 2\n1 1\n</code></pre> Text Only<pre><code>output\n1010\n10110\n11111\n100010\n1\n</code></pre> \u200b\u6848\u4f8b\u200b\u89e3\u91ca\u200b <p>In the first test case, the number of \\(\\mathtt{101}\\) and \\(\\mathtt{010}\\) subsequences is the same, both being \\(1\\), and the sequence contains exactly two \\(\\mathtt{1}\\) characters.</p> <p>In the second test case, the number of \\(\\mathtt{101}\\) and \\(\\mathtt{010}\\) subsequences is the same, both being \\(2\\), and the sequence contains exactly three \\(\\mathtt{1}\\) characters.</p> <p>In the third test case, the number of \\(\\mathtt{101}\\) and \\(\\mathtt{010}\\) subsequences is the same, both being \\(0\\), and the sequence contains exactly five \\(\\mathtt{1}\\) characters.</p> \u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b <ol> <li>It is somehow difficult to count the number of such subsequences in an arbitrary string. Can you think of strings where it is trivial?</li> <li>The number of such subsequences can be \\(0\\).</li> <li> <p>Key observation: A bitstring where all \\(\\mathtt{1}\\) bits come before all \\(\\mathtt{0}\\) bits is perfect as it has no \\(\\mathtt{101}\\) or \\(\\mathtt{010}\\) subsequences.</p> <p>You can fix the number of \\(\\mathtt{1}\\) bits to be \\(k\\) and then put \\(n-k\\) \\(\\mathtt{0}\\) bits after them. This achieves a perfect bitstring with the number of \\(\\mathtt{1}\\) bits being \\(k\\).</p> </li> </ol> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b C++<pre><code>#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    int n = 0;\n    scanf(\"%d\", &amp;n);\n    while (n--) {\n        int len, ones;\n        scanf(\"%d %d\", &amp;len, &amp;ones);\n        std::string ans(len, '0');\n        for (int i = 0; i &lt; ones; i++) {\n            ans[i] = '1';\n        }\n        std::cout &lt;&lt; ans &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre> <p>\u200b\u6536\u83b7\u200b</p> <p>A|B\u200b\u9898\u200b\u7ed9\u200b\u7684\u200b\u6848\u4f8b\u200b\u5e76\u4e0d\u4e00\u5b9a\u200b\u662f\u200b\u6700\u597d\u200b\u7684\u200b\u7b54\u6848\u200b\uff01</p>","tags":["compete"]},{"location":"Compete/Codeforces/Codeforces%20Round%201030%20%28Div.%202%29/#b-make-it-permutation","title":"B\u200b\u9898\u200b Make It Permutation","text":"<p>\u200b\u9650\u5236\u200b</p> <p>time limit per test: 1 second</p> <p>memory limit per test: 256 megabytes</p> <p>input: standard input</p> <p>output: standard output</p> <p>There is a matrix \\(A\\) of size \\(n\\times n\\) where \\(A_{i,j}=j\\) for all \\(1 \\le i,j \\le n\\).</p> <p>In one operation, you can select a row and reverse any subarray\\(^{\\text{\u2217}}\\) in it.</p> <p>Find a sequence of at most \\(2n\\) operations such that every column will contain a permutation\\(^{\\text{\u2020}}\\) of length \\(n\\).</p> <p>It can be proven that the construction is always possible. If there are multiple solutions, output any of them.</p> <p>\\(^{\\text{\u2217}}\\)An array \\(a\\) is a subarray of an array \\(b\\) if \\(a\\) can be obtained from \\(b\\) by deleting zero or more elements from the beginning and zero or more elements from the end.</p> <p>\\(^{\\text{\u2020}}\\)A permutation of length \\(n\\) is an array consisting of \\(n\\) distinct integers from \\(1\\) to \\(n\\) in arbitrary order. For example, \\([2,3,1,5,4]\\) is a permutation, but \\([1,2,2]\\) is not a permutation (\\(2\\) appears twice in the array), and \\([1,3,4]\\) is also not a permutation (\\(n=3\\) but there is \\(4\\) in the array).</p> <p>Input</p> <p>Each test contains multiple test cases. The first line contains the number of test cases \\(t\\) (\\(1 \\le t \\le 100\\)). The description of the test cases follows.</p> <p>The first line of each test case contains one integer \\(n\\) (\\(3 \\le n \\le 5000\\)) \u2014 denoting the number of rows and columns in the matrix.</p> <p>It is guaranteed that the sum of \\(n\\) over all test cases does not exceed \\(5000\\).</p> <p>Output</p> <p>For each test case, on the first line, print an integer \\(k\\) \\((0 \\le k \\le 2n)\\), the number of operations you wish to perform. On the next lines, you should print the operations.</p> <p>To print an operation, use the format \"\\(i\\;l\\;r\\)\" (\\(1 \\leq l \\leq r \\leq n\\) and \\(1 \\leq i \\leq n\\)) which reverses the subarray \\(A_{i, l}\\), \\(A_{i, l+1}\\), \\(\\ldots\\), \\(A_{i, r}\\). Text Only<pre><code>input\n2\n3\n4\n</code></pre></p> Text Only<pre><code>4\n2 1 3\n2 2 3\n3 1 2\n3 2 3\n5\n2 1 4\n3 1 3\n3 2 4\n4 3 4\n4 1 2\n</code></pre> \u200b\u6848\u4f8b\u200b\u89e3\u91ca\u200b <p></p> <p>\u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b <p>\u200b\u6536\u83b7\u200b</p>","tags":["compete"]},{"location":"Compete/Codeforces/Codeforces%20Round%201030%20%28Div.%202%29/#c-make-it-beautiful","title":"C\u200b\u9898\u200b Make It Beautiful","text":"<p>\u200b\u9650\u5236\u200b</p> <p>time limit per test: 2 seconds</p> <p>memory limit per test: 512 megabytes</p> <p>input: standard input</p> <p>output: standard output</p> <p>You are given an array \\(a\\) of \\(n\\) integers. We define the \\(\\text{beauty}\\) of a number \\(x\\) to be the number of \\(1\\) bits in its binary representation. We define the beauty of an array to be the sum of beauties of the numbers it contains.</p> <p>In one operation, you can select an index \\(i\\) \\((1 \\le i \\le n)\\) and increase \\(a_i\\) by \\(1\\).</p> <p>Find the maximum beauty of the array after doing at most \\(k\\) operations.</p> <p>Input</p> <p>Each test contains multiple test cases. The first line contains the number of test cases \\(t\\) (\\(1 \\le t \\le 5000\\)). The description of the test cases follows.</p> <p>The first line of each test case contains two integers \\(n\\) and \\(k\\) (\\(1 \\le n \\le 5000\\), \\(0 \\le k \\le 10^{18}\\)) \u2014 the length of the array and the maximal number of operations.</p> <p>The second line of each test case contains \\(n\\) integers \\(a_1, a_2, \\ldots a_n\\) (\\(0 \\le a_i \\le 10^9\\)) \u2014denoting the array \\(a\\).</p> <p>It is guaranteed that the sum of \\(n\\) over all test cases does not exceed \\(5000\\).</p> <p>Output</p> <p>For each test case, output a single integer, the maximum beauty after at most \\(k\\) operations.</p> Text Only<pre><code>input\n5\n5 2\n0 1 7 2 4\n5 3\n0 1 7 2 4\n1 1\n3\n3 0\n2 0 3\n1 100000000000\n0\n</code></pre> Text Only<pre><code>output\n8\n9\n2\n3\n36\n</code></pre> \u200b\u6848\u4f8b\u200b\u89e3\u91ca\u200b <p>The beauty of this array is . One of the other valid solutions with the same beauty is .</p> <p>Note</p> <p>In the first test case, \\(a = [0, 1, 7, 2, 4]\\).</p> <ul> <li>apply the first operation at \\(i = 1\\), the new array is \\(a = [1, 1, 7, 2, 4]\\)</li> <li>apply the second operation at \\(i = 4\\), the new array is \\(a = [1, 1, 7, 3, 4]\\)</li> </ul> <p>The beauty of this array is \\(1 + 1 + 3 + 2 + 1 = 8\\). One of the other valid solutions with the same beauty is \\([0, 1, 7, 3, 5]\\).</p> <p>In the third test case, \\(a = [3]\\). Since you are not required to use exactly \\(k\\) operations, it is optimal to do none.</p>","tags":["compete"]},{"location":"Compete/Codeforces/Codeforces%20Round%201030%20%28Div.%202%29/#d-red-light-green-lighthard-version","title":"D\u200b\u9898\u200b Red Light, Green Light(hard version)","text":"<p>\u200b\u9650\u5236\u200b</p> <p>time limit per test: 4 seconds</p> <p>memory limit per test: 512 megabytes</p> <p>input: standard input</p> <p>output: standard output</p> <p>You are given a strip of length \\(10^{15}\\) and a constant \\(k\\). There are exactly \\(n\\) cells that contain a traffic light; each has a position \\(p_i\\) and an initial delay \\(d_i\\) for which \\(d_i &lt; k\\). The \\(i\\)-th traffic light works the following way:</p> <ul> <li>it shows red at the \\(l \\cdot k + d_i\\)-th second, where \\(l\\) is an integer,</li> <li>it shows green otherwise.</li> </ul> <p>At second \\(0\\), you are initially positioned at some cell on the strip, facing the positive direction. At each second, you perform the following actions in order:</p> <ul> <li>If the current cell contains a red traffic light, you turn around.</li> <li>Move one cell in the direction you are currently facing.</li> </ul> <p>You are given \\(q\\) different starting positions. For each one, determine whether you will eventually leave the strip within \\(10^{100}\\) seconds.</p> <p>Input</p> <p>Each test contains multiple test cases. The first line contains the number of test cases \\(t\\) (\\(1 \\le t \\le 2\\cdot10^5\\)). The description of the test cases follows.</p> <p>The first line of each test case contains two integers \\(n\\), \\(k\\) (\\(\\mathbf{1 \\le n \\le 2\\cdot10^5}\\) and \\(\\mathbf{1 \\le k \\le 10^{15}}\\)) \u2014 the number of traffic lights and the length of the period.</p> <p>The second line of each test case contains \\(n\\) integers \\(p_1, p_2, \\ldots p_n\\) (\\(1 \\le p_1 &lt; p_2 &lt; \\ldots &lt; p_n \\le 10^{15}\\)) \u2014 the positions of the traffic lights.</p> <p>The third line of each test case contains \\(n\\) integers \\(d_1, d_2, \\ldots d_n\\) (\\(0 \\le d_i &lt; k\\)) \u2014 the delays of the traffic lights.</p> <p>The fourth line of each test case contains one integer \\(q\\) (\\(\\mathbf{1 \\le q \\le 2\\cdot10^5}\\)) \u2014 the number of queries.</p> <p>The fifth line of each test case contains \\(q\\) integers \\(a_1, a_2, \\ldots, a_q\\) (\\(1 \\leq a_i \\leq 10^{15}\\)) \u2014 the starting positions.</p> <p>It is guaranteed that the sum of \\(n\\) and \\(q\\) over all test cases does not exceed \\(\\mathbf{2\\cdot10^5}\\).</p> <p>Output</p> <p>For each test case, output \\(q\\) lines. Each line should contain \"YES\" if you will eventually leave the strip and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.</p> Text Only<pre><code>input\n4\n2 2\n1 4\n1 0\n3\n1 2 3\n9 4\n1 2 3 4 5 6 7 8 9\n3 2 1 0 1 3 3 1 1\n5\n2 5 6 7 8\n4 2\n1 2 3 4\n0 0 0 0\n4\n1 2 3 4\n3 4\n1 2 3\n3 1 1\n3\n1 2 3\n</code></pre> Text Only<pre><code>output\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\n</code></pre> \u200b\u6848\u4f8b\u200b\u89e3\u91ca\u200b <p>In the first test case, the following happens at starting positions \\(1\\), \\(2\\), and \\(3\\):</p> <p></p> <p>And the following in the second test case at starting position \\(2\\):</p> <p></p> <p>\u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b <p>\u200b\u6536\u83b7\u200b</p>","tags":["compete"]},{"location":"Compete/Codeforces/Codeforces%20Round%201030%20%28Div.%202%29/#e-grid-coloring","title":"E\u200b\u9898\u200b Grid Coloring","text":"<p>\u200b\u9650\u5236\u200b</p> <p>time limit per test: 2 seconds</p> <p>memory limit per test: 256 megabytes</p> <p>input: standard input</p> <p>output: standard output</p> <p>There is a \\(n\\times m\\) grid with each cell initially white. You have to color all the cells one-by-one. After you color a cell, all the colored cells furthest from it receive a penalty. Find a coloring order, where no cell has more than \\(3\\) penalties.</p> <p>Note that \\(n\\) and \\(m\\) are both odd.</p> <p>The distance metric used is the chessboard distance while we decide ties between cells with Manhattan distance. Formally, a cell \\((x_2, y_2)\\) is further away than \\((x_3, y_3)\\) from a cell \\((x_1, y_1)\\) if one of the following holds:</p> <ul> <li>\\(\\max\\big(\\lvert x_1 - x_2 \\rvert, \\lvert y_1 - y_2 \\rvert\\big)&gt;\\max\\big(\\lvert x_1 - x_3 \\rvert, \\lvert y_1 - y_3 \\rvert\\big)\\)</li> <li>\\(\\max\\big(\\lvert x_1 - x_2 \\rvert, \\lvert y_1 - y_2 \\rvert\\big)=\\max\\big(\\lvert x_1 - x_3 \\rvert, \\lvert y_1 - y_3 \\rvert\\big)\\) and \\(\\lvert x_1 - x_2 \\rvert + \\lvert y_1 - y_2 \\rvert&gt;\\lvert x_1 - x_3 \\rvert + \\lvert y_1 - y_3 \\rvert\\)</li> </ul> <p>It can be proven that at least one solution always exists.</p> <p> Example showing penalty changes after coloring the center of a \\(5 \\times 5\\) grid. The numbers indicate the penalty of the cells.</p> <p>Input</p> <p>Each test contains multiple test cases. The first line contains the number of test cases \\(t\\) (\\(1 \\le t \\le 100\\)). The description of the test cases follows.</p> <p>The first line of each test case contains two odd integers \\(n\\) and \\(m\\) (\\(1 \\le n, m \\le 4999\\)) \u2014 the number of rows and columns.</p> <p>It is guaranteed that the sum of \\(n \\cdot m\\) over all test cases does not exceed \\(5000\\).</p> <p>Output</p> <p>For each test case, output \\(n \\cdot m\\) lines where the \\(i\\)-th line should contain the coordinates of the \\(i\\)-th cell in your coloring order. If there are multiple solutions, print any of them.</p> <p>The empty lines in the example output are just for increased readability. You're not required to print them.</p> Text Only<pre><code>input\n3\n3 3\n1 1\n1 5\n</code></pre> Text Only<pre><code>output\n2 1\n2 3\n2 2\n1 1\n3 2\n3 3\n3 1\n1 3\n1 2\n\n1 1\n\n1 2\n1 4\n1 5\n1 1\n1 3\n</code></pre> \u200b\u6848\u4f8b\u200b\u89e3\u91ca\u200b <p>In the first test case, the grid can be colored as follows:</p> <p> The numbers indicate the penalty of the cells.</p> <p>\u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b <p>\u200b\u6536\u83b7\u200b</p>","tags":["compete"]},{"location":"Compete/Codeforces/Codeforces%20Round%201030%20%28Div.%202%29/#f-shifts-and-swaps","title":"F\u200b\u9898\u200b Shifts and Swaps","text":"<p>\u200b\u9650\u5236\u200b</p> <p>time limit per test: 6 seconds</p> <p>memory limit per test: 512 megabytes</p> <p>input: standard input</p> <p>output: standard output</p> <p>You are given arrays \\(a\\) and \\(b\\) of length \\(n\\) and an integer \\(m\\).</p> <p>The arrays only contain integers from \\(1\\) to \\(m\\), and both arrays contain all integers from \\(1\\) to \\(m\\).</p> <p>You may repeatedly perform either of the following operations on \\(a\\):</p> <ul> <li>cyclic shift\\(^{\\text{\u2217}}\\) the array to the left</li> <li>swap two neighboring elements if their difference is at least \\(2\\).</li> </ul> <p>Is it possible to transform the first array into the second?</p> <p>\\(^{\\text{\u2217}}\\)A left cyclic shift of a zero-indexed array \\(p\\) of length \\(n\\) is an array \\(q\\) such that \\(q_i = p_{(i + 1) \\bmod n}\\) for all \\(0 \\le i &lt; n\\).</p> <p>Input</p> <p>Each test contains multiple test cases. The first line contains the number of test cases \\(t\\) (\\(1 \\le t \\le 10^5\\)). The description of the test cases follows.</p> <p>The first line of each test case contains two integers \\(n\\) and \\(m\\) (\\(2 \\le m \\le n \\le 5\\cdot10^5\\)) \u2014 the length of the arrays and the number of distinct elements in \\(a\\).</p> <p>The second line contains \\(n\\) integers \\(a_1, a_2, \\ldots, a_n\\) (\\(1 \\le a_i \\le m\\)) \u2014 denoting the array \\(a\\).</p> <p>The third line contains \\(n\\) integers \\(b_1, b_2, \\ldots, b_n\\) (\\(1 \\le b_i \\le m\\)) \u2014 denoting the array \\(b\\).</p> <p>It is guaranteed that both arrays contain all integers from \\(1\\) to \\(m\\).</p> <p>It is guaranteed that the sum of \\(n\\) over all test cases does not exceed \\(5\\cdot10^5\\).</p> <p>Output</p> <p>For each test case, output \"YES\" if it is possible to transform the first array into the second and \"NO\" otherwise. You can output the answer in any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive responses.</p> Text Only<pre><code>input\n8\n3 3\n1 2 3\n3 2 1\n4 3\n1 1 2 3\n1 2 2 3\n4 4\n1 3 2 4\n2 3 4 1\n6 3\n1 1 2 1 2 3\n2 1 1 2 3 1\n5 4\n2 3 4 1 1\n3 2 1 1 4\n9 7\n2 4 6 7 3 1 5 4 6\n6 7 3 5 6 4 2 4 1\n9 8\n8 3 5 6 5 4 1 7 2\n7 5 3 5 8 4 6 2 1\n8 6\n2 1 5 4 6 3 5 4\n6 1 5 2 4 5 3 4\n</code></pre> Text Only<pre><code>output\nYES\nNO\nYES\nNO\nYES\nYES\nNO\nNO\n</code></pre> \u200b\u6848\u4f8b\u200b\u89e3\u91ca\u200b <p>In the first test case, you can transform array \\(a\\) into array \\(b\\) with the following steps:</p> <ul> <li>[\\(1\\), \\(2\\), \\(3\\)] \u2014 shift to the left</li> <li>[\\(2\\), \\(3\\), \\(1\\)] \u2014 swap indices \\(2\\) and \\(3\\)</li> <li>[\\(2\\), \\(1\\), \\(3\\)] \u2014 shift to the left</li> <li>[\\(1\\), \\(3\\), \\(2\\)] \u2014 shift to the left</li> <li>\\([3, 2, 1]\\)</li> </ul> <p>In the second test case, it can be proven that it is impossible to transform array \\(a\\) into array \\(b\\) with the given operations.</p> <p>\u200b\u7b97\u6cd5\u200b\u601d\u8def\u200b</p> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b <p>\u200b\u6536\u83b7\u200b</p>","tags":["compete"]},{"location":"Compete/leetcode/454/","title":"leetcode\u200b\u7b2c\u200b454\u200b\u6b21\u200b\u5468\u8d5b","text":"<p>\u200b\u53c2\u8d5b\u200b\u60c5\u51b5\u200b</p> <p>2025-6-15 11:00 AM A:  B:  C:  D: </p>","tags":["compete"]},{"location":"Compete/leetcode/454/#a-easy","title":"A. \u200b\u4e3a\u200b\u89c6\u9891\u200b\u6807\u9898\u200b\u751f\u6210\u200b\u6807\u7b7e\u200b Easy","text":"<p>\u200b\u9898\u76ee\u200b</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b caption\uff0c\u200b\u8868\u793a\u200b\u4e00\u4e2a\u200b\u89c6\u9891\u200b\u7684\u200b\u6807\u9898\u200b\u3002</p> <p>\u200b\u9700\u8981\u200b\u6309\u7167\u200b\u4ee5\u4e0b\u200b\u6b65\u9aa4\u200b\u6309\u200b\u987a\u5e8f\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u89c6\u9891\u200b\u7684\u200b\u6709\u6548\u200b\u6807\u7b7e\u200b \uff1a</p> <p>\u200b\u5c06\u200b\u6240\u6709\u200b\u5355\u8bcd\u200b\u7ec4\u5408\u200b\u4e3a\u200b\u5355\u4e2a\u200b\u9a7c\u5cf0\u200b\u547d\u540d\u200b\u5b57\u7b26\u4e32\u200b\u5e76\u200b\u5728\u200b\u524d\u9762\u200b\u52a0\u4e0a\u200b'#'\u3002\u200b\u9a7c\u5cf0\u200b\u547d\u540d\u200b\u5b57\u7b26\u4e32\u200b \u200b\u6307\u200b\u7684\u200b\u662f\u200b\u9664\u200b\u7b2c\u4e00\u4e2a\u200b\u5355\u8bcd\u200b\u5916\u200b\uff0c\u200b\u5176\u4f59\u200b\u5355\u8bcd\u200b\u7684\u200b\u9996\u5b57\u6bcd\u200b\u5927\u5199\u200b\uff0c\u200b\u4e14\u200b\u6bcf\u4e2a\u200b\u5355\u8bcd\u200b\u7684\u200b\u9996\u5b57\u6bcd\u200b\u4e4b\u540e\u200b\u7684\u200b\u5b57\u7b26\u200b\u5fc5\u987b\u200b\u662f\u200b\u5c0f\u5199\u200b\u3002</p> <p>\u200b\u79fb\u9664\u200b\u6240\u6709\u200b\u4e0d\u662f\u200b\u82f1\u6587\u5b57\u6bcd\u200b\u7684\u200b\u5b57\u7b26\u200b\uff0c\u200b\u4f46\u200b\u4fdd\u7559\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b'#'\u3002</p> <p>\u200b\u5c06\u200b\u7ed3\u679c\u200b\u622a\u65ad\u200b\u4e3a\u200b\u6700\u200b\u591a\u200b 100 \u200b\u4e2a\u5b57\u7b26\u200b\u3002</p> <p>\u200b\u5bf9\u200bcaption\u200b\u6267\u884c\u200b\u4e0a\u8ff0\u200b\u64cd\u4f5c\u200b\u540e\u200b\uff0c\u200b\u8fd4\u56de\u200b\u751f\u6210\u200b\u7684\u200b\u6807\u7b7e\u200b \u3002</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u867d\u7136\u200b\u662f\u200b\u7b80\u5355\u200b\u9898\u200b\uff0c\u200b\u4f46\u200b\u786e\u5b9e\u200b\u6709\u200b\u597d\u591a\u200b\u5751\u200b\u3002\u200b\u9996\u5148\u200b\u5b83\u200b\u6ca1\u200b\u8bf4\u200b\u9996\u5b57\u6bcd\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u4f4d\u200b\u6240\u4ee5\u200b\u9700\u8981\u200b\u7279\u5224\u200b\u3002\u200b\u4e5f\u200b\u6ca1\u200b\u8bf4\u200b\u5168\u90e8\u200b\u8f93\u5165\u200b\u90fd\u200b\u662f\u200b\u5c0f\u5199\u200b\\\u200b\u5927\u5199\u200b\uff0ccaption\u200b\u5185\u200b\u53ef\u80fd\u200b\u6709\u200b\u5927\u5199\u5b57\u6bcd\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8981\u200b\u5148\u200b\u628a\u200b\u5b57\u7b26\u4e32\u200b\u5168\u200b\u8f6c\u5316\u200b\u4e3a\u200b\u5c0f\u5199\u200b\u5b57\u7b26\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b</p> C++<pre><code>class Solution {\npublic:\n    string generateTag(string caption) {\n        // \u200b\u628a\u200b\u6240\u6709\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5c0f\u5199\u200b\u5b57\u7b26\u200b\n        for (char &amp;c : caption) {\n            c = tolower(c);\n        }\n        string ans(\"#\"); // \u200b\u4ee5\u200b`#`\u200b\u5f00\u5934\u200b\n        // \u200b\u7528\u4e8e\u200b\u5224\u65ad\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u662f\u5426\u662f\u200b' '\n        bool flag = false;\n        int j = 0;\n        // \u200b\u79fb\u9664\u200b\u5f00\u5934\u200b\u7684\u200b` `\n        while(caption[j] == ' ') j++;\n\n        for (int i = j; i &lt; caption.size(); i++) {\n            if (caption[i] == ' ') flag = true;\n            else if (flag) {\n                ans += toupper(caption[i]);\n                flag = false;\n            }\n            else ans += caption[i];\n        }\n        // \u200b\u4ec5\u200b\u4fdd\u7559\u200b\u524d\u200b100\u200b\u4e2a\u5b57\u7b26\u200b\n        return ans.size() &gt; 100 ? ans.substr(0, 100) : ans; \n    }\n};\n</code></pre>","tags":["compete"]},{"location":"Compete/leetcode/454/#b-medium","title":"B. \u200b\u7edf\u8ba1\u200b\u7279\u6b8a\u200b\u4e09\u5143\u7ec4\u200b Medium","text":"<p>\u200b\u9898\u76ee\u200b\u63cf\u8ff0\u200b</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b nums\u3002</p> <p>\u200b\u7279\u6b8a\u200b\u4e09\u5143\u7ec4\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\u6ee1\u8db3\u200b\u4ee5\u4e0b\u200b\u6761\u4ef6\u200b\u7684\u200b\u4e0b\u6807\u200b\u4e09\u5143\u7ec4\u200b (i, j, k)\uff1a</p> <p>\\(0 &lt;= i &lt; j &lt; k &lt; n\uff0c\u200b\u5176\u4e2d\u200b n = nums.length\\)</p> <p>\\(nums[i] == nums[j] * 2\\)</p> <p>\\(nums[k] == nums[j] * 2\\)</p> <p>\u200b\u8fd4\u56de\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7279\u6b8a\u200b\u4e09\u5143\u7ec4\u200b\u7684\u200b\u603b\u6570\u200b\u3002</p> <p>\u26a0\ufe0f\u200b\u7531\u4e8e\u200b\u7b54\u6848\u200b\u53ef\u80fd\u200b\u975e\u5e38\u200b\u5927\u200b\uff0c\u200b\u8bf7\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u5bf9\u200b109 + 7\u200b\u53d6\u200b\u4f59\u6570\u200b\u540e\u200b\u7684\u200b\u503c\u200b\u3002</p> <p>\u200b\u8fd9\u9053\u9898\u200b\u8bf4\u200b\u96be\u200b\u4e5f\u200b\u4e0d\u96be\u200b\uff0c\u200b\u5176\u200b\u66b4\u529b\u200b\u89e3\u653e\u200b\u975e\u5e38\u200b\u597d\u200b\u60f3\u200b\uff0c\u200b\u4f46\u200b\u8fc7\u200b\u4e0d\u4e86\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u53ea\u80fd\u200b\u8fc7\u200b80%\u200b\u5de6\u53f3\u200b\u3002 \u200b\u6211\u200b\u7684\u200b\u4f18\u5316\u200b\u601d\u8def\u200b\u662f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e24\u4e2a\u200bmap\u200b\u5206\u522b\u200b\u8bb0\u5f55\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u5de6\u53f3\u200b\u4e24\u8fb9\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\uff0c\u200b\u901a\u8fc7\u200b\u53bb\u200b\u4e24\u4e2a\u200bmap\u200b\u4e2d\u200b\u5206\u522b\u200b\u67e5\u627e\u200b<code>cur * 2</code>\u200b\u5373\u53ef\u200b\u83b7\u5f97\u200b\u7b54\u6848\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b</p> \u200b\u66b4\u529b\u200b\u89e3\u6cd5\u200b\u6211\u200b\u81ea\u5df1\u200b\u7684\u200b\u4f18\u5316\u200b\u7248\u672c\u200b <p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b:\\(O(N^3)\\) \u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b:\\(O(1)\\) C++<pre><code>class Solution {\npublic:\n    typedef long long LL;\n    int specialTriplets(vector&lt;int&gt;&amp; nums) {\n        LL ans = 0;\n        // \u200b\u66b4\u529b\u200b\n        for (int j = 0; j &lt; nums.size(); j++) {\n            for (int i = 0; i &lt; j; i++) {\n                if (nums[i] == nums[j] * 2) {\n                    for (int k = j + 1; k &lt; nums.size(); k++) \n                        if (nums[k] == nums[j] * 2) ans++;\n                } \n            }\n        }\n\n        return ans % (LL)(1e9 + 7);\n    }\n};\n</code></pre></p> <p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\\(O(N)\\) \u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\\(O(N)\\) C++<pre><code>class Solution {\npublic:\n    typedef long long LL;\n    int specialTriplets(vector&lt;int&gt;&amp; nums) {\n        LL ans = 0;\n        // \u200b\u66b4\u529b\u200b\n        unordered_map&lt;int, LL&gt; left, right;\n        for (auto num : nums) {\n            right[num]++;\n        }\n        for (auto num : nums) {\n            right[num]--;\n            int want = num * 2;\n            LL l = left[want], r = right[want];\n            if (l != 0 &amp;&amp; r != 0) ans += l * r;\n            left[num]++;\n        }\n\n        ans %= (LL)(1e9 + 7);\n        return ans;\n    }\n};\n</code></pre></p>","tags":["compete"]},{"location":"Compete/leetcode/454/#c-medium","title":"C. \u200b\u5b50\u200b\u5e8f\u5217\u200b\u9996\u4f4d\u200b\u5143\u7d20\u200b\u7684\u200b\u6700\u5927\u200b\u4e58\u79ef\u200b Medium","text":"<p>\u200b\u9898\u76ee\u200b</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u6570\u7ec4\u200b<code>nums</code>\u200b\u548c\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b<code>m</code>\u3002</p> <p>\u200b\u8fd4\u56de\u200b\u4efb\u610f\u200b\u5927\u5c0f\u200b\u4e3a\u200b<code>m</code>\u200b\u7684\u200b\u5b50\u200b\u5e8f\u5217\u200b\u4e2d\u200b\u9996\u5c3e\u200b\u5143\u7d20\u200b\u4e58\u79ef\u200b\u7684\u200b\u6700\u5927\u503c\u200b</p> <p>\u200b\u5b50\u200b\u5e8f\u5217\u200b\u662f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5220\u9664\u200b\u539f\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5143\u7d20\u200b\uff08\u200b\u6216\u200b\u4e0d\u200b\u5220\u9664\u200b\u4efb\u4f55\u200b\u5143\u7d20\u200b\uff09\uff0c \u200b\u4e14\u200b\u4e0d\u200b\u6539\u53d8\u200b\u5269\u4f59\u200b\u5143\u7d20\u200b\u987a\u5e8f\u200b\u800c\u200b\u5f97\u5230\u200b\u7684\u200b\u6570\u7ec4\u200b\u3002</p> hit <p>We can select nums[i] as the first element of the subsequence, and the last one can be any of nums[i + m - 1], nums[i + m - 2], ..., nums[n - 1].</p> <p>If we select the first element from the largest i, the suffix just gets longer, and we can update the minimum and maximum values dynamically.</p> <p>\u200b\u5173\u952e\u5728\u4e8e\u200b\u80fd\u5426\u200b\u610f\u8bc6\u200b\u5230\u200b\u8981\u200b\u5c06\u200b\u95ee\u9898\u200b\u8f6c\u6362\u200b\u4e3a\u200b<code>nums</code>\u200b\u7684\u200b\u4efb\u610f\u200b\u4e0b\u6807\u200b\u76f8\u5dee\u200b\u81f3\u5c11\u200b\u4e3a\u200b<code>m-1</code>\u200b\u7684\u200b\u4e24\u6570\u200b\u4e4b\u79ef\u200b\u7684\u200b\u6700\u5927\u503c\u200b</p> <p>\u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b</p> <p>\u200b\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\\(O(n + m)\\) \u200b\u7a7a\u95f4\u200b\u590d\u6742\u5ea6\u200b\\(O(1)\\) C++<pre><code>// \u200b\u8d2a\u5fc3\u200b\nclass Solution {\npublic:\n    typedef long long LL;\n    long long maximumProduct(vector&lt;int&gt;&amp; nums, int m) {\n        LL ans = LLONG_MIN;         \n        int mn = INT_MAX, mx = INT_MIN;\n        for (int i = m - 1; i&lt; nums.size(); i++) {\n            // \u200b\u679a\u4e3e\u200b\u5de6\u8fb9\u200b[0, i - m + 1]\u200b\u7684\u200b\u6700\u5927\u503c\u200b\u4e0e\u200b\u6700\u5c0f\u503c\u200b\n            int y = nums[i - m + 1];\n            mn = min(mn, y);\n            mx = max(mx, y);\n\n            // \u200b\u679a\u4e3e\u200b\u53f3\u8fb9\u200b\n            LL x = nums[i];\n            ans = max({ans, x * mn, x * mx});\n        }\n\n        return ans;\n    }\n};\n</code></pre></p>","tags":["compete"]},{"location":"Compete/leetcode/454/#d-hard","title":"D. \u200b\u6811\u4e2d\u200b\u627e\u5230\u200b\u5e26\u6743\u200b\u4e2d\u4f4d\u200b\u8282\u70b9\u200b Hard","text":"<p>\u200b\u9898\u76ee\u200b</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200bn\uff0c\u200b\u4ee5\u53ca\u200b\u4e00\u68f5\u200b\u65e0\u5411\u200b\u5e26\u200b\u6743\u6811\u200b\uff0c\u200b\u6839\u200b\u8282\u70b9\u200b\u4e3a\u200b\u8282\u70b9\u200b0\uff0c\u200b\u6811\u200b\u4e2d\u5171\u200b\u6709\u200bn\u200b\u4e2a\u200b\u8282\u70b9\u200b\uff0c\u200b\u7f16\u53f7\u200b\u4ece\u200b0\u200b\u5230\u200bn - 1\u3002\u200b\u8be5\u6811\u200b\u7531\u200b\u4e00\u4e2a\u200b\u957f\u5ea6\u200b\u4e3a\u200bn - 1\u200b\u7684\u200b\u4e8c\u7ef4\u200b\u6570\u7ec4\u200bedges\u200b\u8868\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200bedges[i] = [ui, vi, wi] \u200b\u8868\u793a\u200b\u5b58\u5728\u200b\u4e00\u6761\u200b\u4ece\u200b\u8282\u70b9\u200b ui \u200b\u5230\u200b vi \u200b\u7684\u200b\u8fb9\u200b\uff0c\u200b\u6743\u91cd\u200b\u4e3a\u200b wi\u3002</p> <p>\u200b\u5e26\u6743\u200b\u4e2d\u4f4d\u200b\u8282\u70b9\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\u4ece\u200bui\u200b\u5230\u200bvi\u200b\u8def\u5f84\u200b\u4e0a\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u8282\u70b9\u200bx,\u200b\u4f7f\u5f97\u200b\u4ece\u200bui\u200b\u5230\u200bx\u200b\u7684\u200b\u8fb9\u6743\u200b\u4e4b\u200b\u548c\u200b\u5927\u4e8e\u200b\u7b49\u4e8e\u200b\u8be5\u200b\u8def\u5f84\u200b\u603b\u6743\u503c\u200b\u548c\u200b\u7684\u200b\u4e00\u534a\u200b\u3002</p> <p>\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u4e2a\u4e8c\u7ef4\u200b\u6574\u6570\u200b\u6570\u7ec4\u200bqueries\u3002\u200b\u5bf9\u4e8e\u200b\u6bcf\u4e2a\u200bqueries[j] = [uj, vj]\uff0c\u200b\u6c42\u51fa\u200b\u4ece\u200buj\u200b\u5230\u200bvj\u200b\u8def\u5f84\u200b\u4e0a\u200b\u7684\u200b\u5e26\u6743\u200b\u4e2d\u4f4d\u200b\u8282\u70b9\u200b\u3002</p> <p>\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200bans\uff0c\u200b\u5176\u4e2d\u200bans[j]\u200b\u8868\u793a\u200b\u67e5\u8be2\u200bqueries[j]\u200b\u7684\u200b\u5e26\u6743\u200b\u4e2d\u4f4d\u200b\u8282\u70b9\u200b\u7f16\u53f7\u200b\u3002</p>","tags":["compete"]},{"location":"Compete/leetcode/454/#_1","title":"\u603b\u7ed3","text":"<p>\u200b\u603b\u7ed3\u200b</p>","tags":["compete"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/","title":"\u64cd\u4f5c\u7cfb\u7edf\u200b\u6982\u8ff0","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_2","title":"\u64cd\u4f5c\u7cfb\u7edf\u200b\u7684\u200b\u76ee\u6807\u200b\u548c\u200b\u529f\u80fd","text":"<p>\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b \u200b\u63a7\u5236\u5e94\u7528\u7a0b\u5e8f\u200b\u6267\u884c\u200b\u7684\u200b\u7a0b\u5e8f\u200b,\u200b\u662f\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u548c\u200b\u8ba1\u7b97\u673a\u786c\u4ef6\u200b\u76f4\u63a5\u200b\u7684\u200b\u63a5\u53e3\u200b. </p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_3","title":"\u4f5c\u4e3a\u200b\u7528\u6237\u200b/\u200b\u8ba1\u7b97\u673a\u200b\u7ed3\u6784\u200b\u7684\u200b\u64cd\u4f5c\u7cfb\u7edf","text":"<p>\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u63d0\u4f9b\u200b\u7684\u200b\u670d\u52a1\u200b</p> <ul> <li>\u200b\u7a0b\u5e8f\u5f00\u53d1\u200b:\u200b\u7f16\u8bd1\u5668\u200b\u548c\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b:\u200b\u6307\u4ee4\u200b\u52a0\u8f7d\u200b\\\u200b\u5185\u5b58\u200b\u7ba1\u7406\u200b</li> <li>I/O\u200b\u8bbe\u5907\u200b\u8bbf\u95ee\u200b</li> <li>\u200b\u6587\u4ef6\u200b\u8bbf\u95ee\u63a7\u5236\u200b</li> <li>\u200b\u7cfb\u7edf\u200b\u8bbf\u95ee\u200b</li> <li>\u200b\u9519\u8bef\u200b\u68c0\u9519\u200b\u548c\u200b\u54cd\u5e94\u200b</li> <li>\u200b\u8bb0\u8d26\u200b \u200b\u7edf\u8ba1\u200b\u5404\u79cd\u200b\u6570\u636e\u200b</li> </ul> <p>\u200b\u6307\u4ee4\u7cfb\u7edf\u200b\u4f53\u7cfb\u7ed3\u6784\u200bISA \u200b\u5b9a\u4e49\u200b\u8ba1\u7b97\u673a\u200b\u9075\u5faa\u200b\u7684\u200b\u673a\u5668\u8bed\u8a00\u200b\u6307\u4ee4\u7cfb\u7edf\u200b,\u200b\u8be5\u200b\u7ed3\u6784\u200b\u662f\u200b\u786c\u4ef6\u200b\u548c\u200b\u8f6f\u4ef6\u200b\u7684\u200b\u5206\u754c\u7ebf\u200b</p> <p>\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e8c\u8fdb\u5236\u200b\u7ed3\u6784\u200bABI \u200b\u5b9a\u4e49\u200b\u4e86\u200b\u7a0b\u5e8f\u200b\u95f4\u200b\u4e8c\u8fdb\u5236\u200b\u8bfe\u79fb\u503c\u200b\u7684\u200b\u6807\u51c6\u200b,\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u7684\u200b\u7cfb\u7edf\u200b\u8c03\u7528\u200b\u63a5\u53e3\u200b,\u200b\u4ee5\u53ca\u200b\u5728\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u901a\u8fc7\u200bISA\u200b\u80fd\u200b\u4f7f\u7528\u200b\u7684\u200b\u786c\u4ef6\u8d44\u6e90\u200b\u548c\u200b\u670d\u52a1\u200b</p> <p>\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7f16\u7a0b\u200b\u7ed3\u6784\u200bAPI \u200b\u5141\u8bb8\u200b\u7a0b\u5e8f\u200b\u8bbf\u95ee\u200b\u7cfb\u7edf\u200b\u7684\u200b\u786c\u4ef6\u8d44\u6e90\u200b\u548c\u200b\u670d\u52a1\u200b,\u200b\u8fd9\u4e9b\u200b\u670d\u52a1\u200b\u7531\u200bISA\u200b\u548c\u200b\u9ad8\u7ea7\u200b\u8bed\u8a00\u200b\u7a0b\u5e8f\u5e93\u200b(HHL)\u200b\u8c03\u7528\u200b\u6765\u200b\u63d0\u4f9b\u200b.</p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_4","title":"\u4f5c\u4e3a\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668\u200b\u7684\u200b\u64cd\u4f5c\u7cfb\u7edf","text":"<p> \u200b\u4f4d\u4e8e\u200b\u5185\u5b58\u200b\u7684\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u7684\u200b\u90a3\u200b\u4e00\u90e8\u5206\u200b\u88ab\u200b\u79f0\u4e3a\u200b\"\u200b\u5185\u6838\u200b\u7a0b\u5e8f\u200b(kernel)\",\u200b\u5305\u542b\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u6700\u200b\u57fa\u672c\u200b\u6700\u200b\u5e38\u7528\u200b\u7684\u200b\u529f\u80fd\u200b.</p> <p>\u200b\u56fe\u4e2d\u200b\u63cf\u8ff0\u200b\u4e86\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u80fd\u591f\u200b\u7ba1\u7406\u200b\u7684\u200b\u5404\u79cd\u200b\u8d44\u6e90\u200b -- \u200b\u6587\u4ef6\u200b\u7ba1\u7406\u200b | I\\O\u200b\u7ba1\u7406\u200b | \u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u7684\u200b\u7ba1\u7406\u200b | CPU\u200b\u8c03\u5ea6\u200b</p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_5","title":"\u64cd\u4f5c\u7cfb\u7edf\u200b\u7684\u200b\u6f14\u5316","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_6","title":"\u4e32\u884c\u200b\u5904\u7406","text":"<p>\u200b\u4e32\u884c\u200b\u5904\u7406\u200b \u200b\u7528\u6237\u200b\u5fc5\u987b\u200b\u6309\u7167\u200b\u987a\u5e8f\u200b\u8bbf\u95ee\u200b\u8ba1\u7b97\u673a\u200b</p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_7","title":"\u7b80\u5355\u200b\u7684\u200b\u6279\u5904\u7406\u200b\u7cfb\u7edf","text":"<p>\u200b\u7b80\u5355\u200b\u7684\u200b\u6279\u5904\u7406\u200b\u7cfb\u7edf\u200b\u6ca1\u6709\u200b\u4e2d\u65ad\u200b\u8fd9\u4e00\u200b\u529f\u80fd\u200b,\u200b\u4f46\u200b\u6709\u200b\u8fd0\u884c\u200b\u6a21\u5f0f\u200b\u7684\u200b\u6982\u5ff5\u200b.</p> <p>\u200b\u76d1\u63a7\u200b\u7a0b\u5e8f\u200b\u4ee5\u200b\u7cfb\u7edf\u200b\u6a21\u5f0f\u200b(\u200b\u5185\u6838\u200b\u6a21\u5f0f\u200b)\u200b\u8fd0\u884c\u200b,\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u7279\u6743\u200b\u6307\u4ee4\u200b;\u200b\u666e\u901a\u200b\u7a0b\u5e8f\u200b\u4ee5\u200b\u7528\u6237\u200b\u6a21\u5f0f\u200b\u8fd0\u884c\u200b,\u200b\u6709\u4e9b\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\u662f\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u7684\u200b\u7528\u6237\u200b\u6a21\u5f0f\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u65e0\u6cd5\u8bbf\u95ee\u200b.</p> <p>\u200b\u7528\u6237\u7a0b\u5e8f\u200b\u548c\u200b\u76d1\u63a7\u200b\u7a0b\u5e8f\u200b\u4ea4\u66ff\u200b\u8fd0\u884c\u200b</p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_8","title":"\u591a\u9053\u200b\u6279\u200b\u5904\u7406\u7a0b\u5e8f","text":"<p>\u200b\u5355\u200b\u9053\u200b\u7a0b\u5e8f\u8bbe\u8ba1\u200b \u200b\u4ec5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7a0b\u5e8f\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u4f5c\u4e1a\u200b,\u200b\u5f53\u200b\u7cfb\u7edf\u200b\u8fdb\u884c\u200bI\\O\u200b\u7684\u200b\u65f6\u5019\u200bCPU\u200b\u5c06\u4f1a\u200b\u95f2\u7f6e\u200b,\u200b\u6d6a\u8d39\u200b\u8f83\u5927\u200b</p> <p>\u200b\u591a\u9053\u7a0b\u5e8f\u200b\u8bbe\u8ba1\u200b(\u200b\u591a\u4efb\u52a1\u5904\u7406\u200b) \u200b\u5f53\u200b\u4e00\u4e2a\u200b\u7528\u6237\u7a0b\u5e8f\u200b\u7b49\u5f85\u200bI\\O\u200b\u7684\u200b\u65f6\u5019\u200b,\u200b\u53ef\u4ee5\u200b\u5207\u6362\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7528\u6237\u7a0b\u5e8f\u200b\u8fdb\u884c\u200b\u4f5c\u4e1a\u200b.</p> <p>\u200b\u6ce8\u610f\u200b\u591a\u9053\u200b\u6279\u5904\u7406\u200b\u7cfb\u7edf\u200b\u5c31\u200b\u9700\u8981\u200b\u5f15\u5165\u200b\"I\\O\u200b\u4e2d\u65ad\u200b\u673a\u5236\u200b\", \u200b\u5e76\u4e14\u200b\u540c\u65f6\u200b\u5f15\u5165\u200b\u4e86\u200bDMA(\u200b\u76f4\u63a5\u200b\u5185\u5b58\u200b\u8bbf\u95ee\u200b)</p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_9","title":"\u5206\u65f6\u7cfb\u7edf","text":"<p>\u200b\u5206\u65f6\u7cfb\u7edf\u200b\u7684\u200b\u51fa\u73b0\u200b\u5c31\u662f\u200b\u4e3a\u4e86\u200b\u54cd\u5e94\u200b\u7528\u6237\u200b\u7684\u200b\u4ea4\u4e92\u200b\u8981\u6c42\u200b,\u200b\u901a\u8fc7\u200b<code>\u200b\u5206\u200b\u65f6\u200b</code>\u200b\u6280\u672f\u200b,\u200b\u8ba9\u200b\u591a\u4e2a\u200b\u7528\u6237\u200b\u5206\u4eab\u200b\u5904\u7406\u5668\u200b\u65f6\u95f4\u200b.</p> <p>\u200b\u5728\u200b\u5206\u65f6\u64cd\u4f5c\u7cfb\u7edf\u200b,\u200b\u591a\u4e2a\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u540c\u65f6\u200b\u901a\u8fc7\u200b\u7ec8\u7aef\u200b\u8bbf\u95ee\u200b\u7cfb\u7edf\u200b,\u200b\u7531\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u63a7\u5236\u200b\u6bcf\u4e2a\u200b\u7528\u6237\u7a0b\u5e8f\u200b\u5728\u200b\u5f88\u200b\u77ed\u200b\u7684\u200b\u65f6\u95f4\u200b\u4ea4\u66ff\u200b\u8fdb\u884c\u200b.</p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_10","title":"\u540e\u7eed\u200b\u5185\u5bb9\u200b\u7684\u200b\u7efc\u8ff0","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_11","title":"\u8fdb\u7a0b","text":"<p>\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u5b9a\u4e49\u200b</p> <ul> <li>\u200b\u4e00\u4e2a\u200b\u6b63\u5728\u200b\u6267\u884c\u200b\u7684\u200b\u7a0b\u5e8f\u200b</li> <li>\u200b\u8ba1\u7b97\u673a\u200b\u4e2d\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u5b9e\u4f8b\u200b</li> <li>\u200b\u53ef\u200b\u5206\u914d\u200b\u7ed9\u200b\u5904\u7406\u5668\u200b\u5e76\u200b\u7531\u200b\u5904\u7406\u5668\u200b\u6267\u884c\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b9e\u4f53\u200b</li> <li>\u200b\u7531\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u987a\u5e8f\u200b\u7ebf\u7a0b\u200b,\u200b\u4e00\u4e2a\u200b\u5f53\u524d\u200b\u72b6\u6001\u200b\u548c\u200b\u4e00\u7ec4\u200b\u76f8\u5173\u200b\u7cfb\u7edf\u8d44\u6e90\u200b\u6240\u200b\u8868\u5f81\u200b\u7684\u200b\u6d3b\u52a8\u200b\u5355\u5143\u200b</li> </ul>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_12","title":"\u5185\u5b58\u200b\u7ba1\u7406","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u200b\u6982\u8ff0","text":"<p>\u200b\u672c\u7ae0\u200b\u5b66\u4e60\u200b\u76ee\u6807\u200b</p> <ul> <li>\u200b\u4e86\u89e3\u200b\u8ba1\u7b97\u673a\u7cfb\u7edf\u200b\u7684\u200b\u5404\u4e2a\u200b\u57fa\u672c\u200b\u7ec4\u6210\u90e8\u5206\u200b\u53ca\u200b\u5b83\u4eec\u200b\u95f4\u200b\u7684\u200b\u5185\u90e8\u200b\u5173\u7cfb\u200b</li> <li>\u200b\u4e86\u89e3\u200b\u5904\u7406\u5668\u200b\u6267\u884c\u200b\u4e00\u6761\u200b\u6307\u4ee4\u200b\u65f6\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u6b65\u9aa4\u200b</li> <li>\u200b\u638c\u63e1\u200b\u4e2d\u65ad\u200b\u7684\u200b\u6982\u5ff5\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5904\u7406\u5668\u200b\u5982\u4f55\u200b\u53ca\u200b\u4e3a\u4f55\u200b\u5229\u7528\u200b\u4e2d\u65ad\u200b</li> <li>\u200b\u5217\u4e3e\u200b\u5e76\u200b\u63cf\u8ff0\u200b\u5178\u578b\u200b\u8ba1\u7b97\u673a\u200b\u5b58\u50a8\u4f53\u7cfb\u200b\u7684\u200b\u6bcf\u200b\u4e00\u5c42\u200b</li> <li>\u200b\u7406\u89e3\u200b\u591a\u5904\u7406\u5668\u200b\u7cfb\u7edf\u200b\u548c\u200b\u591a\u200b\u6838\u200b\u8ba1\u7b97\u673a\u200b\u7684\u200b\u57fa\u672c\u200b\u7279\u6027\u200b</li> <li>\u200b\u8ba8\u8bba\u200b\u5c40\u90e8\u6027\u200b\u6982\u5ff5\u200b\uff0c\u200b\u5206\u6790\u200b\u591a\u7ea7\u200b\u5b58\u50a8\u4f53\u7cfb\u200b\u7684\u200b\u6027\u80fd\u200b</li> <li>\u200b\u638c\u63e1\u200b\u6808\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6808\u200b\u5bf9\u200b\u8fc7\u7a0b\u200b\u8c03\u7528\u200b\u548c\u200b\u8fd4\u56de\u200b\u7684\u200b\u652f\u6301\u200b</li> </ul>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_2","title":"\u57fa\u672c\u200b\u7ec4\u6210","text":"<p>\u200b\u5728\u200b\u786c\u4ef6\u200b\u5c42\u9762\u200b\uff0c\u200b\u8ba1\u7b97\u673a\u200b\u7531\u200b\u4e94\u5927\u200b(\u200b\u56db\u5927\u200b)\u200b\u90e8\u5206\u200b\u7ec4\u6210\u200b\u5206\u522b\u200b\u4e3a\u200b<code>\u200b\u5904\u7406\u5668\u200b</code> <code>\u200b\u5b58\u50a8\u7cfb\u7edf\u200b</code> <code>\u200b\u8f93\u5165\u200b\\\u200b\u8f93\u51fa\u200b\u7cfb\u7edf\u200b</code> <code>\u200b\u7cfb\u7edf\u603b\u7ebf\u200b</code> \u200b\u57fa\u672c\u200b\u67b6\u6784\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b  \u200b\u6ce8\u200b: MBR = MDR(Memory Date Register, \u200b\u5185\u5b58\u200b\u6570\u636e\u200b\u5bc4\u5b58\u5668\u200b)</p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_3","title":"\u6307\u4ee4\u200b\u7684\u200b\u6267\u884c","text":"<p>\u200b\u57fa\u672c\u200b\u6307\u4ee4\u200b\u5468\u671f\u200b</p> <p></p>","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_4","title":"\u4e2d\u65ad","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_5","title":"\u5b58\u50a8\u5668\u200b\u7684\u200b\u5c42\u6b21\u7ed3\u6784","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#cache","title":"\u9ad8\u901f\u7f13\u5b58\u200b(Cache)","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#dma","title":"\u76f4\u63a5\u200b\u5185\u5b58\u200b\u5b58\u53d6\u200b(DMA)","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_6","title":"\u591a\u5904\u7406\u5668\u200b\u548c\u200b\u591a\u200b\u6838\u200b\u8ba1\u7b97\u673a\u200b\u7ec4\u7ec7\u200b\u67b6\u6784","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_7","title":"\u603b\u7ed3","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/#_8","title":"\u8865\u5145","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%BF%9B%E7%A8%8B%E6%8F%8F%E8%BF%B0%E5%92%8C%E6%8E%A7%E5%88%B6/","title":"\u8fdb\u7a0b\u200b\u63cf\u8ff0\u200b\u548c\u200b\u63a7\u5236","text":"","tags":["Operating System Internals and Design"]},{"location":"TextBook/Operating-Systems-Internals-and-Design-Principles/%E8%BF%9B%E7%A8%8B%E6%8F%8F%E8%BF%B0%E5%92%8C%E6%8E%A7%E5%88%B6/#_2","title":"\u5565\u200b\u662f\u200b\u8fdb\u7a0b\u200b?","text":"","tags":["Operating System Internals and Design"]},{"location":"blog/","title":"Blog","text":""},{"location":"blog/CMake%20Tutorial/","title":"CMake Tutorial","text":"<p>\u200b\u53c2\u8003\u200b\u94fe\u63a5\u200b</p>","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-1a-basic-starting-point","title":"Step 1:A Basic Starting Point","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#building-a-basic-project","title":"Building a Basic Project","text":"<p>CMake<pre><code>cmake_minimum_required(VERSION 3.10) \nproject(Tutorial)\nadd_executable(\n    Tutorial tutorial.cxx\n)\n</code></pre> \u200b\u4e09\u4e2a\u200b\u4e3b\u8981\u200b\u6807\u7b7e\u200b CMake<pre><code>cmake_minimum_required(VERSION &lt;min&gt; | ...&lt;policy_max&gt;| [FATAL_ERROR])\n</code></pre></p> <p><code>cmake_minimum_required</code>: \u200b\u6307\u660e\u200bcmake\u200b\u7684\u200b\u6700\u4f4e\u200b\u7248\u672c\u200b\u8981\u6c42\u200b</p> CMake<pre><code>project(&lt;PROJECT-NAME&gt; [&lt;language-name&gt;...])\n</code></pre> <p><code>project</code> \u200b\u8bbe\u7f6e\u200b\u9879\u76ee\u200b\u540d\u5b57\u200b,\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u50a8\u5b58\u200b\u5728\u200b\u53d8\u91cf\u200bPROJECT_NAME\u200b\u4e2d\u200b,\u200b\u5f53\u200b\u4ece\u200b\u9876\u5c42\u200bCMakeLists.txt\u200b\u8c03\u7528\u200b\u65f6\u200b,\u200b\u8fd8\u4f1a\u200b\u5c06\u200b\u9879\u76ee\u200b \u200b\u540d\u79f0\u200b\u5b58\u50a8\u200b\u5728\u200bCMAKE_PROJECT_NAME\u200b\u4e2d\u200b</p> CMake<pre><code>add_executable(&lt;name&gt; &lt;options&gt; ... &lt;sources&gt; ....)\n</code></pre> <p><code>cmake</code> \u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b\u7684\u200b\u53ef\u200b\u6267\u884c\u200b\u76ee\u6807\u200b,\u200b\u8be5\u200b\u76ee\u6807\u200b\u5c06\u200b\u7531\u200b\u547d\u4ee4\u200b\u8c03\u7528\u200b\u4e2d\u200b\u5217\u51fa\u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\u6784\u5efa\u200b\u800c\u6210\u200b. <p>\u200b\u6784\u5efa\u200b\u4e0e\u200b\u8fd0\u884c\u200b Bash<pre><code>mkdir Step1_build # \u200b\u521b\u5efa\u200bbuild\u200b\u76ee\u5f55\u200b\ncd Step1_build &amp;&amp; cmake ../Step1 &amp;&amp; cmake --build . # \u200b\u8fdb\u5165\u200bbuild\u200b\u76ee\u5f55\u200b\u5e76\u200b\u7f16\u8bd1\u200b\u6587\u4ef6\u200b\n# \u200b\u6b64\u65f6\u200bbuild\u200b\u6587\u4ef6\u5939\u200b\u4e0b\u200b\u5c31\u200b\u4f1a\u200b\u751f\u6210\u200b\u5bf9\u5e94\u200b\u7684\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\n</code></pre></p>","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#specifying-the-c-standard","title":"Specifying the C++ Standard","text":"<p><code>CMAKE_CXX_STANDARD</code>\u200b\u53d8\u91cf\u200b\u7684\u200b\u503c\u6765\u200b\u6307\u660e\u200b\u9700\u8981\u200b\u7684\u200bc++\u200b\u7248\u672c\u200b,\u200b\u901a\u8fc7\u200b<code>set()</code>\u200b\u6765\u200b\u8bbe\u7f6e\u200b.</p> <p><code>CMAKE_CXX_STANDARD_REQUIRED</code>\u200b\u662f\u200b\u5e03\u5c14\u503c\u200b\u53d8\u91cf\u200b\u82e5\u200b\u5176\u503c\u200b\u4e3a\u200b<code>true(on\\yes)</code>\u200b\u8868\u660e\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u7f16\u8bd1\u5668\u200b\u4e0d\u200b\u652f\u6301\u200b<code>CMAKE_CXX_STANDARD</code>\u200b\u4e2d\u200b\u6307\u660e\u200b\u7684\u200bcpp\u200b\u7248\u672c\u200b\u5219\u200bCMake\u200b\u4f1a\u200b\u76f4\u63a5\u200b\u62a5\u9519\u200b\u5e76\u200b\u505c\u6b62\u200b\u914d\u7f6e\u200b\u8fc7\u7a0b\u200b.</p> C++<pre><code>set(CMAKE_CXX_STANDARD 11) # \u200b\u8bbe\u7f6e\u200bcpp\u200b\u7248\u672c\u200b\u4e3a\u200bc11\nset(CMAKE_CXX_STANDARD_REQUIRED true)\n</code></pre>","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-2adding-a-library","title":"Step 2:Adding a Library","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#creating-a-library","title":"Creating a Library","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#adding-an-option","title":"Adding an Option","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-3adding-usage-requirements-for-a-library","title":"Step 3:Adding Usage Requirements for a Library","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-4adding-generator-expressions","title":"Step 4:Adding Generator Expressions","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-5installing-and-testing","title":"Step 5:Installing and Testing","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-6adding-support-for-a-testing-dashboard","title":"Step 6:Adding Support for a Testing Dashboard","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-7adding-system-introspection","title":"Step 7:Adding System Introspection","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-8adding-a-custom-command-and-generated-file","title":"Step 8:Adding a Custom Command and Generated File","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-9packaging-an-install","title":"Step 9:Packaging an Install","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-10selecting-static-or-shared-libraries","title":"Step 10:Selecting Static or Shared Libraries","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-11adding-export-configuration","title":"Step 11:Adding Export Configuration","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/CMake%20Tutorial/#step-12packaging-debug-adn-release","title":"Step 12:Packaging Debug adn Release","text":"","tags":["CMake","\u6742\u8c08"]},{"location":"blog/Learn%20Makefile/","title":"Learn Makefile","text":"","tags":["makefile","\u6742\u8c08"]},{"location":"blog/Learn%20Makefile/#getting-started","title":"Getting Started","text":"","tags":["makefile","\u6742\u8c08"]},{"location":"blog/Learn%20Makefile/#targets","title":"Targets","text":"","tags":["makefile","\u6742\u8c08"]},{"location":"blog/Learn%20Makefile/#automatic-variables-and-wildcards","title":"Automatic Variables and Wildcards","text":"","tags":["makefile","\u6742\u8c08"]},{"location":"blog/Learn%20Makefile/#fancy-rules","title":"Fancy Rules","text":"","tags":["makefile","\u6742\u8c08"]},{"location":"blog/Learn%20Makefile/#commands-and-execution","title":"Commands and execution","text":"","tags":["makefile","\u6742\u8c08"]},{"location":"blog/Learn%20Makefile/#variables-pt2","title":"Variables Pt.2","text":"","tags":["makefile","\u6742\u8c08"]},{"location":"blog/mac%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/","title":"\u4e3a\u200bMacOS\u200b\u914d\u7f6e\u200b\u5f00\u53d1\u200b\u73af\u5883","text":"<p>\u200b\u7b2c\u4e00\u6b65\u200b</p> <p>\u200b\u5b89\u88c5\u200b<code>clash-x</code>, \u200b\u54ce\u200b\uff0c\u200b\u56fd\u5185\u200b\u7684\u200b\u7f51\u7edc\u200b\u73af\u5883\u200b\u8fd8\u662f\u200b\u4e0d\u200b\u592a\u884c\u200b\uff0c\u200b\u82e5\u200b\u53ef\u80fd\u200b\u8fd8\u662f\u200b\u9700\u8981\u200b\u53bb\u200b\u56fd\u5916\u200b\u67e5\u67e5\u200b\u8d44\u6599\u200b\u5565\u200b\u7684\u200b.</p> <p>\u200b\u5b89\u88c5\u200b<code>brwe house</code> Bash<pre><code>\n</code></pre></p>"},{"location":"blog/mac%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/#_1","title":"\u914d\u7f6e\u200b\u7ec8\u7aef\u200b\u4ee3\u7406","text":"<p>\u200b\u5bf9\u4e8e\u200bmacos\u200b\u5176\u200b\u9ed8\u8ba4\u200b\u7ec8\u7aef\u200b\u4e3a\u200b<code>zsh</code>\uff0c\u200b\u6309\u7167\u200b\u5982\u4e0b\u200b\u64cd\u4f5c\u200b\u5373\u53ef\u200b Bash<pre><code>vi ~/.zshrc # \u200b\u901a\u8fc7\u200bvim\u200b\u5f80\u200bzsh\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u5199\u5165\u200b\u4e1c\u897f\u200b\n\nalias proxy='export all_proxy=socks5://127.0.0.1:????'  # ????\u200b\u4e3a\u200b\u4ee3\u7406\u200b\u7aef\u53e3\u53f7\u200b\uff0c\u200b\u6b64\u200b\u4e3a\u200b\u5f00\u542f\u200b\u4ee3\u7406\u200b\u7684\u200b\u6307\u4ee4\u200b\nalias unproxy='unset all_proxy'\n# \u200b\u6b64\u200b\u4e3a\u200b\u5173\u95ed\u200b\u4ee3\u7406\u200b\u7684\u200b\u6307\u4ee4\u200b\n\nsource ~/.zshrc # \u200b\u542f\u52a8\u200b\u914d\u7f6e\u200b\nproxy # \u200b\u542f\u52a8\u200b\u4ee3\u7406\u200b\n# unproxy \u200b\u4e3a\u200b\u5173\u95ed\u200b\u4ee3\u7406\u200b\n</code></pre></p> <p>\u200b\u4e3a\u200bgit\u200b\u914d\u7f6e\u200b\u4ee3\u7406\u200b</p> <p>\u200b\u6267\u884c\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\u542f\u52a8\u200bgit\u200b\u7684\u200b\u4ee3\u7406\u200b Bash<pre><code>git config --global http.proxy http://127.0.0.1:????\ngit config --global https.proxy https://127.0.0.1:???? #\u200b\u5176\u4e2d\u200b????\u200b\u5747\u200b\u4e3a\u200b\u7aef\u53e3\u53f7\u200b\n</code></pre></p> Bash<pre><code>git config --global --unset http.proxy\ngit config --global --unset https.proxy #\u200b\u53bb\u9664\u200b\u914d\u7f6e\u200b\n</code></pre>"},{"location":"blog/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/","title":"\u5e38\u7528\u200bvscode\u200b\u5feb\u6377\u952e","text":"<p>\u200b\u590d\u5236\u200b\u5f53\u524d\u200b\u884c\u200b<code>cmd + c</code> (\u200b\u4e0d\u200b\u9700\u8981\u200b\u9009\u62e9\u200b) \u00a1 \u200b\u5220\u9664\u200b\u5f53\u524d\u200b\u884c\u200b<code>cmd + shift + k</code></p> <p>\u200b\u91cd\u505a\u200b\u64cd\u4f5c\u200b<code>cmd + shift + z</code></p> <p>\u200b\u8df3\u8f6c\u200b\u5230\u200b\u6279\u8bc4\u200b\u7684\u200b\u62ec\u53f7\u200b<code>cmd + shift + \\</code></p> <p>\u200b\u67e5\u627e\u6587\u4ef6\u200b<code>cmd + p</code></p> <p>\u200b\u6253\u5f00\u200b\u7ec8\u7aef\u200b\\(cmd + `\\) </p>","tags":["\u6742\u8c08"]},{"location":"math/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%85%A5%E9%97%A8/%E7%BA%BF%E6%80%A7%E6%98%A0%E5%B0%84%E4%B8%8E%E7%9F%A9%E9%98%B5/","title":"\u7ebf\u6027\u200b\u6620\u5c04\u200b\u4e0e\u200b\u77e9\u9635","text":"","tags":["\u7ebf\u6027\u4ee3\u6570\u5165\u95e8"]},{"location":"%E8%80%83%E7%A0%94/%E6%94%BF%E6%B2%BB/%E7%9F%A5%E8%AF%86%E7%82%B9/","title":"\u653f\u6cbb\u200b\u77e5\u8bc6\u70b9","text":"","tags":["\u8003\u7814\u653f\u6cbb"]},{"location":"%E8%80%83%E7%A0%94/%E6%94%BF%E6%B2%BB/%E9%94%99%E9%A2%98%E9%9B%86/","title":"\u9519\u9898\u200b\u672c","text":"","tags":["\u8003\u7814\u653f\u6cbb"]},{"location":"%E8%80%83%E7%A0%94/%E8%8B%B1%E8%AF%AD/%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"\u5386\u5e74\u200b\u771f\u9898\u200b\u7cbe\u8bfb\u200b\u7b14\u8bb0","text":"","tags":["\u8003\u7814\u82f1\u8bed"]}]}